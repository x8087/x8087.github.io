<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>假如上帝不是程序员</title>
  <subtitle>--存在就是最大的bug</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://x8087.github.io/"/>
  <updated>2016-12-22T16:46:46.000Z</updated>
  <id>http://x8087.github.io/</id>
  
  <author>
    <name>x8087</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim脚本语法</title>
    <link href="http://x8087.github.io/2016/12/15/Vim%E8%84%9A%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://x8087.github.io/2016/12/15/Vim脚本语法/</id>
    <published>2016-12-14T16:13:14.000Z</published>
    <updated>2016-12-22T16:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim7.4脚本相关帮助笔记<br><a id="more"></a></p>
<h1 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:let &#123;变量&#125; = &#123;表达式&#125;</div></pre></td></tr></table></figure>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:while &#123;条件&#125;</div><div class="line">:  &#123;语句&#125;</div><div class="line">:endwhile</div></pre></td></tr></table></figure>
<h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:for &#123;变量&#125; in &#123;列表&#125;</div><div class="line">:  &#123;语句&#125;</div><div class="line">:endfo[r]</div><div class="line"></div><div class="line">:for [&#123;变量1&#125;, &#123;变量2&#125;, ...] in &#123;二维列表&#125;</div><div class="line">:  &#123;语句&#125;</div><div class="line">:endfo[r]</div></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量名包含ASCII字符，数字和下划线，不能以数字开头。<br><code>:let</code>查看当前定义变量列表。<br><code>:let {变量} = {表达式}</code>    定义变量<br><code>:unlet {变量}</code>             删除变量<br><code>:unlet! {变量}</code>            删除变量，不管变量是否存在，不需要报错信息。<br><code>exist(&quot;{变量}&quot;)</code>           检测变量是否存在，参数是检测的变量名。<br>true为非0，false为0<br>vim在查找数字时自动转换字符串为数字，当字符串不以0开头时，结果为0。<br><code>type()</code>获取变量类型<br>特殊变量：</p>
<ul>
<li>‘viminfo’选项包含’!’标志时，以大写字符开头且不包含小写字符的全局变量保存在viminfo-file</li>
<li>‘sessionoptions’选项包含”global”时，以大写字符开头且至少包含一个小写字符的全局变量保存在session-file<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2>Vim支持的基本类型有数字和字符串。变量类型是动态的，每次使用<code>:let</code>给变量赋值时设置类型。</li>
</ul>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul>
<li><em>十进制</em> 不以”0”开头数字。</li>
<li><em>十六进制</em> 以”0x”或者”0X”开头。</li>
<li><em>八进制</em> 以”0”开头。</li>
<li>负数在前面加负号<br>注:<strong>表达式忽略空格</strong></li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><h5 id="使用双引号"><a href="#使用双引号" class="headerlink" title="使用双引号"></a>使用双引号</h5><ul>
<li>字符串内部包含双引号时使用反斜杠转义<code>\&quot;</code></li>
<li>特殊字符使用反斜杠转义</li>
</ul>
<p>A string constant accepts these special characters:<br>...    three-digit octal number (e.g., “\316”)<br>..    two-digit octal number (must be followed by non-digit)<br>.    one-digit octal number (must be followed by non-digit)<br>\x..    byte specified with two hex numbers (e.g., “\x1f”)<br>\x.    byte specified with one hex number (must be followed by non-hex char)<br>\X..    same as \x..<br>\X.    same as \x.<br>\u….    character specified with up to 4 hex numbers, stored according to the<br>    current value of ‘encoding’ (e.g., “\u02a4”)<br>\U….    same as \u but allows up to 8 hex numbers.<br>\b    backspace <bs><br>\e    escape <esc><br>\f    formfeed <ff><br>\n    newline <nl><br>\r    return <cr><br>\t    tab <tab><br>\    backslash<br>\”    double quote<br>\<xxx>    Special key named “xxx”.  e.g. “\<c-w>“ for CTRL-W.  This is for use<br>    in mappings, the 0x80 byte is escaped.<br>    To use the double quote character it must be escaped: “&lt;M-\”&gt;”.<br>    Don’t use <char-xxxx> to get a utf-8 character, use \uxxxx as<br>    mentioned above.</char-xxxx></c-w></xxx></tab></cr></nl></ff></esc></bs></p>
<h5 id="使用单引号"><a href="#使用单引号" class="headerlink" title="使用单引号"></a>使用单引号</h5><ul>
<li>所有字符除单引号外都不需要转义，使用两个单引号表示自己<code>&#39;&#39;</code><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3></li>
<li>有序序列</li>
<li>序列项可以为任何类型，甚至混合使用</li>
<li><em>创建列表</em> <code>:let alist = [{item}, {item}, {item}....]</code></li>
<li><em>添加项</em> <code>add({list}, {item})</code></li>
<li><em>连接或扩展列表</em> <code>{list}+{list2}</code> 或者 <code>call extend({list}, {list2})</code></li>
<li><em>拷贝</em> <code>copy()</code> 或者 <code>[:]</code></li>
<li><em>深拷贝</em> <code>deepcopy()</code></li>
<li><em>判断是否同一个list</em> <code>is</code>和<code>isnot</code></li>
<li><em>判断两个列表是否包含相同值</em> <code>==</code>，当长度相同且所有项使用<code>==</code>对比后相等时为真。<br>注意：字符串和数字比较时不会自动类型转换，视为不相等项。</li>
<li>列表比较比数字与字符串比较要严格</li>
<li><em>列表解包</em> <code>:let [var1, var2] = mylist</code>（当列表长度与变量数不对应时会报错），使用<code>:let [var1, var2; rest] = mylist</code>可以将额外项放到rest，避免报错。</li>
<li><em>列表修改</em> <code>:let list[4] = &quot;four&quot;</code>,<code>:let listlist[0][3] = item</code></li>
<li><em>列表部分修改</em> `:let list[3:5] = [3, 4, 5]</li>
<li>从列表添加和移除项：<br>examples: &gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">:call insert(list, &apos;a&apos;)		&quot; prepend item &apos;a&apos;</div><div class="line">:call insert(list, &apos;a&apos;, 3)	&quot; insert item &apos;a&apos; before list[3]</div><div class="line">:call add(list, &quot;new&quot;)		&quot; append String item</div><div class="line">:call add(list, [1, 2])		&quot; append a List as one new item</div><div class="line">:call extend(list, [1, 2])	&quot; extend the list with two more items</div><div class="line">:let i = remove(list, 3)	&quot; remove item 3</div><div class="line">:unlet list[3]			&quot; idem</div><div class="line">:let l = remove(list, 3, -1)	&quot; remove items 3 to last item</div><div class="line">:unlet list[3 : ]		&quot; idem</div><div class="line">:call filter(list, &apos;v:val !~ &quot;x&quot;&apos;)  &quot; remove items with an &apos;x&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Changing the order of items in a list: &gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:call sort(list)		&quot; sort a list alphabetically</div><div class="line">:call reverse(list)		&quot; reverse the order of items</div><div class="line">:call uniq(sort(list))		&quot; sort and remove duplicates</div></pre></td></tr></table></figure></p>
<ul>
<li>列表方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">:let r = call(funcname, list)	&quot; call a function with an argument list</div><div class="line">:if empty(list)			&quot; check if list is empty</div><div class="line">:let l = len(list)		&quot; number of items in list</div><div class="line">:let big = max(list)		&quot; maximum value in list</div><div class="line">:let small = min(list)		&quot; minimum value in list</div><div class="line">:let xs = count(list, &apos;x&apos;)	&quot; count nr of times &apos;x&apos; appears in list</div><div class="line">:let i = index(list, &apos;x&apos;)	&quot; index of first &apos;x&apos; in list</div><div class="line">:let lines = getline(1, 10)	&quot; get ten text lines from buffer</div><div class="line">:call append(&apos;$&apos;, lines)	&quot; append text lines in buffer</div><div class="line">:let list = split(&quot;a b c&quot;)	&quot; create list from items in a string</div><div class="line">:let string = join(list, &apos;, &apos;)	&quot; create string from list items</div><div class="line">:let s = string(list)		&quot; String representation of list</div><div class="line">:call map(list, &apos;&quot;&gt;&gt; &quot; . v:val&apos;)  &quot; prepend &quot;&gt;&gt; &quot; to each item</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li>无序序列，键值对</li>
<li><em>创建列表</em> <code>:let {varname} = {&lt;key&gt; : &lt;value&gt;, ...}</code></li>
<li><em>访问字典项</em> <code>:echo {varname}[{key}]</code>或者<code>:echo {varname}.{key}</code></li>
<li><em>字典方法</em> <code>:function {dictname}.{funcname}({param}) dict</code>方法内部可以通过<code>self</code>访问字典本身</li>
<li><code>keys()</code> <code>values()</code> <code>items()</code></li>
<li>字典相关方法<br>  :if has_key(dict, ‘foo’)    “ TRUE if dict has entry with key “foo”<br>  :if empty(dict)            “ TRUE if dict is empty<br>  :let l = len(dict)        “ number of items in dict<br>  :let big = max(dict)        “ maximum value in dict<br>  :let small = min(dict)        “ minimum value in dict<br>  :let xs = count(dict, ‘x’)    “ count nr of times ‘x’ appears in dict<br>  :let s = string(dict)        “ String representation of dict<br>  :call map(dict, ‘“&gt;&gt; “ . v:val’)  “ prepend “&gt;&gt; “ to each item<h2 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h2><code>name</code>     在函数内为函数本地变量，否则为全局变量<br><code>s:name</code>   脚本变量<br><code>b:name</code>   本地缓存变量。其中b:changedtick为预定义变量，表示当前缓存改变总数。<br><code>w:name</code>   本地窗口变量<br><code>t:name</code>   本地标签变量<br><code>g:name</code>   全局变量<br><code>l:name</code>   函数本地变量<br><code>a:name</code>   函数参数（只在函数内有效）<br><code>v:name</code>   vim预定义变量</li>
</ul>
<p>变量范围名可以当作字典使用。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for k in keys(s:)</div><div class="line">  unlet s:[k]</div><div class="line">endfor</div></pre></td></tr></table></figure></p>
<h2 id="花括号名称"><a href="#花括号名称" class="headerlink" title="花括号名称"></a>花括号名称</h2><p>在大多数可以使用变量的地方，可以使用”花括号各称”变量。这是具有一个或者多个表达式的常规变量名包裹在一对花括号内，如：<code>my_{varname}_variable</code><br>当vim遇到这种情况时，会计算括号内的表达式，代替表达式位置，并将整个重新解释为一个变量名。<br>可以使用选项值，如：<code>my_{&amp;background}_message</code><br>可以使用多对花括号。<br>可以嵌套使用。<br>注：最终解悉后的变量名必须为有效的变量名。</p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><ul>
<li>表达式的基本项有数字，字符串，变量，$Name(环境变量), &amp;name(选项), @r(寄存器)<br>|expr1|   expr2<br>  expr2 ? expr1 : expr1    if-then-else</li>
</ul>
<p>|expr2|    expr3<br>    expr3 || expr3 ..    logical OR</p>
<p>|expr3|    expr4<br>    expr4 &amp;&amp; expr4 ..    logical AND</p>
<p>|expr4|    expr5<br>    expr5 == expr5        equal<br>    expr5 != expr5        not equal<br>    expr5 &gt;     expr5        greater than<br>    expr5 &gt;= expr5        greater than or equal<br>    expr5 &lt;     expr5        smaller than<br>    expr5 &lt;= expr5        smaller than or equal<br>    expr5 =~ expr5        regexp matches<br>    expr5 !~ expr5        regexp doesn’t match</p>
<pre><code>expr5 ==? expr5        equal, ignoring case
expr5 ==# expr5        equal, match case
etc.            As above, append ? for ignoring case, # for
            matching case

expr5 is expr5        same |List| instance
expr5 isnot expr5    different |List| instance
</code></pre><p>|expr5|    expr6<br>    expr6 +     expr6 ..    number addition or list concatenation<br>    expr6 -     expr6 ..    number subtraction<br>    expr6 .     expr6 ..    string concatenation</p>
<p>|expr6|    expr7<br>    expr7 *     expr7 ..    number multiplication<br>    expr7 /     expr7 ..    number division<br>    expr7 %     expr7 ..    number modulo</p>
<p>|expr7|    expr8<br>    ! expr7            logical NOT</p>
<pre><code>- expr7            unary minus
+ expr7            unary plus
</code></pre><p>|expr8|    expr9<br>    expr8[expr1]        byte of a String or item of a |List|<br>    expr8[expr1 : expr1]    substring of a String or sublist of a |List|<br>    expr8.name        entry in a |Dictionary|<br>    expr8(expr1, …)    function call with |Funcref| variable</p>
<p>|expr9|   number        number constant<br>    “string”        string constant, backslash is special<br>    ‘string’        string constant, ‘ is doubled<br>    [expr1, …]        |List|<br>    {expr1: expr1, …}    |Dictionary|<br>    &amp;option            option value<br>    (expr1)            nested expression<br>    variable        internal variable<br>    va{ria}ble        internal variable with curly braces<br>    $VAR            environment variable<br>    @r            contents of register ‘r’<br>    function(expr1, …)    function call<br>    func{ti}on(expr1, …)    function call with curly braces<br>    {args -&gt; expr1}        lambda expression</p>
<p>“..” 表示此级别的操作可连接<br>Example: &gt;<br>    &amp;nu || &amp;list &amp;&amp; &amp;shell == “csh”</p>
<p>一个级别内的所有表达式从左到右解析</p>
<h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><h2 id="三种条件语句"><a href="#三种条件语句" class="headerlink" title="三种条件语句"></a>三种条件语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">:if &#123;condition&#125;</div><div class="line">  &#123;statements&#125;</div><div class="line">:endif</div><div class="line"></div><div class="line">if &#123;condition&#125;</div><div class="line">  &#123;statements&#125;</div><div class="line">:else</div><div class="line">  &#123;statements&#125;</div><div class="line">:endif</div><div class="line"></div><div class="line">:if &#123;condition&#125;</div><div class="line">  &#123;statements&#125;</div><div class="line">:elseif &#123;condition&#125;</div><div class="line">  &#123;statements&#125;</div><div class="line">:else</div><div class="line">  &#123;statements&#125;</div><div class="line">:endif</div></pre></td></tr></table></figure>
<h2 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h2><h3 id="数字和字符串"><a href="#数字和字符串" class="headerlink" title="数字和字符串"></a>数字和字符串</h3><p>a == b等于<br>a != b不等于<br>a &gt;  b大于<br>a &gt;= b大于或等于<br>a &lt; b 小于<br>a &lt;= b小于或等于</p>
<ul>
<li>如果条件满足结果为1，否则为0</li>
<li>逻辑运算符同时用于数字和字符串。 </li>
<li>比较两个字符串时，使用数学差异。 这是比较字节值，可能不适合某些语言。</li>
<li>当将字符串与数字进行比较时，字符串首先转换为数字。 这有点棘手，因为当一个字符串不像一个数字时，使用数字零。</li>
</ul>
<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>a =~ b 匹配<br>a !~ b 不匹配<br><code>#</code> 匹配大小写<br><code>?</code> 忽略大小写</p>
<h3 id="更多循环"><a href="#更多循环" class="headerlink" title="更多循环"></a>更多循环</h3><p><code>:continue</code> 跳转回到循环开始继续循环<br><code>:break</code> 跳转到<code>:endwihile</code>，不继续循环</p>
<h1 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h1><ul>
<li><code>:execute</code>命令允许执行表达式结果，这是构建并执行命令的一种非常强大的方法。</li>
<li><code>:execute</code>命令只能执行冒号命令。</li>
<li><code>:normal</code>命令执行普通模式命令，但参数不能为表达式。</li>
<li><code>:execute &quot;normal &quot; . normal_commands</code>实现允许执行表达式结果普通模式命令。</li>
<li><code>eval()</code>函数只计算获取表达式的值而不执行。</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><ul>
<li>使用<code>:call</code>命令调用函数。 在括号之间传入参数用逗号分隔。</li>
<li>函数能在表达式里调用</li>
</ul>
<h2 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h2><ul>
<li><code>:delfunction {name}</code>函数不存在时报错</li>
</ul>
<h2 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h2><ul>
<li><code>function()</code>这个函数可以把函数名转化成函数引用</li>
<li>注意：为了与内置函数区分开来，函数引用的变量首字母也要大写</li>
<li><code>call({funcRef}, {paramlist})</code>通过这个函数可以调用函数引用</li>
</ul>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:function &#123;name&#125;(&#123;var1&#125;, &#123;var2&#125;, ...)</div><div class="line">:  &#123;body&#125;</div><div class="line">:endfunction</div></pre></td></tr></table></figure>
<ul>
<li>函数名必须首字符大写</li>
<li>函数执行到<code>:endfunction</code>或者<code>:return</code>没有参数时，返回0</li>
<li><code>:function!</code>重定义已存在的函数</li>
</ul>
<h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><ul>
<li><code>:call</code>命令可以给一个行范围。</li>
<li>当函数用<code>range</code>关键字定义时，它会只关心行范围本身。</li>
<li>函数传递变量<code>a:firstline</code>和<code>a:lastline</code>，拥有函数调用范围的行数字。</li>
<li>另一种使用行范围的方法是定义不带<code>range</code>关键字的函数。函数对范围内的每行调用一次，光标在该行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:function Number()</div><div class="line">: echo &quot;line &quot; . line(&quot;.&quot;) . &quot; contains: &quot; . getline(&quot;.&quot;)</div><div class="line">:endfunction</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="可变数量参数"><a href="#可变数量参数" class="headerlink" title="可变数量参数"></a>可变数量参数</h3><ul>
<li>Vim允许你定义带可变数量参数的函数</li>
<li><code>a:1</code>包含第一个可选参数, <code>a:2</code>第二个，以此类推。<code>a:0</code>包含额外参数数量。</li>
<li><code>a:000</code>所有<code>...</code>参数的列表</li>
</ul>
<h3 id="列出函数"><a href="#列出函数" class="headerlink" title="列出函数"></a>列出函数</h3><ul>
<li><code>:function</code>列出所有用户定义函数的名字和参数</li>
<li><code>:function {funcname}</code>查看函数实现</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="进入调试模式"><a href="#进入调试模式" class="headerlink" title="进入调试模式"></a>进入调试模式</h4><ul>
<li><code>vim -D file.txt</code> 使用 <code>-D</code>参数打开vim</li>
<li>调用带<code>:debug</code>前缀的命令。调试只有当这个命令执行时有效。用于调试特定脚本或者用户函数，以及自动命令使用的脚本和函数。</li>
<li>在源文件或者用户函数中设置断点。你可以在命令行里这样做：`vim -c “breakadd file */explorer.vim”。</li>
<li>在调试模式，每条执行命令在它执行前显示。跳过空行和没有执行的行。当一行内包含两条命令，由<code>|</code>分开，每条命令分别显示。</li>
<li>在调试模式下可以使用平常的Ex命令。<h4 id="调试模式下的命令"><a href="#调试模式下的命令" class="headerlink" title="调试模式下的命令"></a>调试模式下的命令</h4></li>
<li><code>cont</code></li>
<li><code>quit</code></li>
<li><code>next</code></li>
<li><code>step</code></li>
<li><code>interrupt</code></li>
<li><code>finish</code></li>
<li><code>backtrace``bt``where</code></li>
<li><code>frame N</code></li>
<li><code>up</code></li>
<li><code>down</code></li>
<li>不会自动补全，自动补全只对Ex命令有效</li>
<li>可以缩短输入的字符，除了相同字符开始的命令需要输入足够字符区分。f=finish,fr=frame</li>
<li>点击<cr>重复上个命令，当运行另一个命令时，重置。</cr></li>
<li>当需要使用相同名字的Ex命令时，前面添加冒号。<h4 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h4><h5 id="添加断点"><a href="#添加断点" class="headerlink" title="添加断点"></a>添加断点</h5></li>
<li><code>:breaka[dd] func [lnum] {name}</code> 在函数里设置断点，不会验证函数名有效性，因此可以在函数定义前添加断点。</li>
<li><code>:breaka[dd] file [lnum] {name}</code> 在源文件设置断点</li>
<li><code>:breaka[dd] here</code> 在当前文件当前行设置断点。</li>
<li><code>[lnum]</code>是断点的行数字，缺省为1</li>
<li><code>{name}</code>匹配文件或者函数名的模式。不指定目录则使用当前目录。<h5 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h5></li>
<li><code>:breakd[el] {nr}</code>删除断点{nr}， 使用<code>:breaklist</code>查看每个断点的数值</li>
<li><code>:breakd[el] \*</code>删除所有断点</li>
<li><code>:breakd[el] func [lnum] {name}</code>删除函数内断点</li>
<li><code>:breakd[el] file [lnum] {name}</code>删除源文件断点</li>
<li><code>:breakd[el] here</code>删除当前文件当前行断点</li>
<li><code>[lnum]</code>缺省为第一个断点位置<h5 id="列出断点"><a href="#列出断点" class="headerlink" title="列出断点"></a>列出断点</h5></li>
<li><code>:breakl[ist]</code> 列出所有断点<h2 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h2></li>
</ul>
<h3 id="字符串操作："><a href="#字符串操作：" class="headerlink" title="字符串操作："></a>字符串操作：</h3><p>nr2char（）通过其ASCII值获取字符<br>char2nr（）获取字符的ASCII值<br>str2nr（）将字符串转换为数字<br>str2float（）将字符串转换为Float<br>printf（）根据％项格式化一个字符串<br>escape（）转义一个字符串中带有’\’的字符<br>shellescape（）转义一个用于shell命令的字符串<br>fnameescape（）转义用于Vim命令的文件名<br>tr（）将字符从一个集翻译成另一个集<br>strtrans（）翻译一个字符串，使其可打印<br>tolower（）将字符串转换为小写<br>toupper（）将字符串转换为大写<br>match（）位置，其中模式在字符串中匹配<br>matchend（）位置，其中模式匹配以字符串结尾<br>matchstr（）匹配字符串中的模式<br>matchstrpos（）匹配和字符串中模式的位置<br>matchlist（）like matchstr（）并返回子匹配<br>stridx（）长字符串中的短字符串的第一个索引<br>strridx（）一个长字符串中的一个短字符串的最后一个索引<br>strlen（）字符串的长度（以字节为单位）<br>strchars（）字符串的长度<br>strwidth（）显示时字符串的大小<br>strdisplaywidth（）显示时字符串的大小，处理制表符<br>substitute（）用一个字符串替换模式匹配<br>submatch（）在“：s”和substitute（）中获取特定的匹配项，<br>strpart（）使用字节索引获取字符串的一部分<br>strcharpart（）使用char索引获取字符串的一部分<br>strgetchar（）使用char索引从字符串中获取字符<br>expand（）展开特殊关键字<br>iconv（）将文本从一个编码转换为另一个<br>byteidx（）字符串中字符的字节索引<br>byteidxcomp（）like byteidx（）但计算构成字符<br>repeat（）重复一个字符串多次<br>eval（）计算字符串表达式<br>execute（）执行Ex命令并获取输出</p>
<h3 id="列表操作："><a href="#列表操作：" class="headerlink" title="列表操作："></a>列表操作：</h3><p>get（）得到一个没有错误的项目，错误的索引<br>len（）列表中的项目数<br>empty（）检查List是否为空<br>insert（）在List中的某个位置插入一个项目<br>add（）将一个项目附加到List<br>extend（）将列表附加到列表<br>remove（）从列表中删除一个或多个项目<br>copy（）创建一个List的浅拷贝<br>deepcopy（）创建一个列表的完整副本<br>filter（）从列表中删除所选项目<br>map（）更改每个List项<br>sort（）排序列表<br>reverse（）反转List的顺序<br>uniq（）删除重复的邻近项目的副本<br>split（）将一个String拆分成一个List<br>join（）将列表项目转换为String<br>range（）返回一个包含数字序列的List<br>string（）List的字符串表示形式<br>call（）调用List作为参数的函数<br>index（）列表中值的索引<br>max（）最大值<br>min（）最小值<br>count（）count一个值出现在列表中的次数<br>repeat（）重复一个List多次</p>
<h3 id="字典操作："><a href="#字典操作：" class="headerlink" title="字典操作："></a>字典操作：</h3><p>get（）获取一个条目，没有错误的错误键<br>len（）在Dictionary中的条目数<br>has_key（）检查一个键是否出现在Dictionary中<br>empty（）检查Dictionary是否为空<br>remove（）从Dictionary中删除一个条目<br>extend（）将一个字典中的条目添加到另一个<br>filter（）从Dictionary中删除选定的条目<br>map（）更改每个Dictionary条目<br>keys（）获取字典键列表<br>values（）获取字典值列表<br>items（）获取字典键值对列表<br>copy（）做一个字典的浅拷贝<br>deepcopy（）创建一个字典的完整副本<br>string（）字典的字符串表示形式<br>max（）在Dictionary中的最大值<br>min（）最小值<br>count（）count一个值出现的次数</p>
<h3 id="浮点计算"><a href="#浮点计算" class="headerlink" title="浮点计算"></a>浮点计算</h3><p>float2nr（）将Float转换为Number<br>abs（）绝对值（也适用于Number）<br>round（）舍入<br>ceil（）向上舍入<br>floor（）向下舍入<br>trunc（）删除小数点后的值<br>fmod（）除法的余数<br>exp（）指数<br>log（）自然对数（以e为底的对数）<br>log10（）对数以10为底<br>pow（）值x到指数y<br>sqrt（）平方根<br>sin（）正弦<br>cos（）余弦<br>tan（）切线<br>asin（）反正弦<br>acos（）反余弦<br>atan（）反正切<br>atan2（）反正切<br>sinh（）双曲正弦<br>cosh（）双曲余弦<br>tanh（）双曲正切<br>isnan（）检查不是一个数字</p>
<h3 id="其它计算"><a href="#其它计算" class="headerlink" title="其它计算"></a>其它计算</h3><p>and（）按位与<br>invert（）按位反转<br>or（）按位或<br>xor（）按位异或<br>sha256（）SHA-256哈希</p>
<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>type（）类型的变量<br>islocked（）检查变量是否被锁定<br>function（）获取函数名的Funcref<br>getbufvar（）从特定缓冲区获取变量值<br>setbufvar（）在一个特定的缓冲区中设置一个变量<br>getwinvar（）从特定窗口获取变量<br>gettabvar（）从特定标签页获取一个变量<br>gettabwinvar（）从特定窗口和标签页获取一个变量<br>setwinvar（）在一个特定的窗口中设置一个变量<br>settabvar（）在一个特定的标签页中设置一个变量<br>settabwinvar（）在一个特定的窗口和标签页中设置一个变量<br>garbagecollect（）尽可能释放内存</p>
<h3 id="光标和标志位置"><a href="#光标和标志位置" class="headerlink" title="光标和标志位置"></a>光标和标志位置</h3><p>col（）列号或一个标记<br>virtcol（）屏幕列的光标或标记<br>line（）行号的光标或标记<br>wincol（）窗口列的光标号<br>winline（）窗口中光标的行号<br>cursor（）将光标定位在一行/列<br>screencol（）获取屏幕列的光标<br>screenrow（）获取光标的屏幕行<br>getcurpos（）获取光标的位置<br>getpos（）获取光标，标记等的位置。<br>setpos（）设置光标，标记等的位置<br>byte2line（）获取特定字节计数的行号<br>line2byte（）在特定行的字节计数<br>diff_filler（）获取行之上的填充行数<br>screenattr（）获取屏幕线/行的属性<br>screenchar（）在屏幕行/行获取字符代码</p>
<h3 id="使用当前缓冲区的文本"><a href="#使用当前缓冲区的文本" class="headerlink" title="使用当前缓冲区的文本"></a>使用当前缓冲区的文本</h3><p>getline（）从缓冲区中获取行或行的列表<br>setline（）替换缓冲区中的一行<br>append（）在缓冲区中追加行或行列表<br>indent（）缩进特定行<br>cindent（）缩进根据C缩进<br>lispindent（）缩进根据Lisp缩进<br>nextnonblank（）找到下一个非空行<br>prevnonblank（）找到上一个非空行<br>search（）找到一个模式的匹配<br>searchpos（）找到一个模式的匹配<br>searchpair（）找到另一端的开始/跳过/结束<br>searchpairpos（）找到开始/跳过/结束的另一端<br>searchdecl（）搜索名称的声明<br>getcharsearch（）返回字符搜索信息<br>setcharsearch（）设置字符搜索信息</p>
<h3 id="系统功能和文件操作"><a href="#系统功能和文件操作" class="headerlink" title="系统功能和文件操作"></a>系统功能和文件操作</h3><p>glob（）展开通配符<br>globpath（）在许多目录中展开通配符<br>glob2regpat（）将glob模式转换为搜索模式<br>findfile（）在目录列表中找到一个文件<br>finddir（）在目录列表中找到一个目录<br>resolve（）找出快捷方式指向的位置<br>fnamemodify（）修改文件名<br>pathshorten（）缩短路径中的目录名<br>simplify（）简化路径而不改变其含义<br>executable（）检查可执行程序是否存在<br>exepath（）可执行程序的完整路径<br>filereadable（）检查是否可以读取文件<br>filewritable（）检查是否可以写入文件<br>getfperm（）获取文件的权限<br>setfperm（）设置文件的权限<br>getftype（）获取文件的种类<br>isdirectory（）检查目录是否存在<br>getfsize（）获取文件的大小<br>getcwd（）获取当前工作目录<br>haslocaldir（）检查当前窗口是否使用|：lcd |<br>tempname（）获取临时文件的名称<br>mkdir（）创建一个新目录<br>delete（）删除文件<br>rename（）重命名文件<br>system（）获取shell命令的结果作为字符串<br>systemlist（）获取shell命令的结果作为列表<br>hostname（）系统的名称<br>readfile（）将一个文件读入一个List行<br>writefile（）将一行List写入一个文件</p>
<h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>getftime（）获取文件的最后修改时间<br>localtime（）获取当前时间（秒）<br>strftime（）将时间转换为字符串<br>reltime（）准确地获取当前或逝去的时间<br>reltimestr（）将reltime（）的结果转换为字符串<br>reltimefloat（）将reltime（）结果转换为Float</p>
<h3 id="缓冲区，窗口和参数列表"><a href="#缓冲区，窗口和参数列表" class="headerlink" title="缓冲区，窗口和参数列表"></a>缓冲区，窗口和参数列表</h3><p>argc（）参数列表中的条目数<br>argidx（）当前位置在参数列表中<br>arglistid（）获取参数列表的id<br>argv（）从参数列表中获取一个条目<br>bufexists（）检查是否存在缓冲区<br>buflisted（）检查是否存在并列出了缓冲区<br>bufloaded（）检查缓冲区是否存在并且已加载<br>bufname（）获取特定缓冲区的名称<br>bufnr（）获取特定缓冲区的缓冲区号<br>tabpagebuflist（）return标签页中的缓冲区列表<br>tabpagenr（）获取标签页的编号<br>tabpagewinnr（）像 winner（）用于特定标签页<br>winner（）获取当前窗口的窗口编号<br>bufwinid（）获取特定缓冲区的窗口ID<br>bufwinnr（）获取特定缓冲区的窗口编号<br>winbufnr（）获取特定窗口的缓冲区号<br>getbufline（）从指定的缓冲区中获取行的列表<br>win_findbuf（）查找包含缓冲区的窗口<br>win_getid（）获取窗口的窗口ID<br>win_gotoid（）转到带有ID的窗口<br>win_id2tabwin（）从窗口ID获取选项卡和窗口nr<br>win_id2win（）从窗口ID获取窗口nr<br>getbufinfo（）获取包含缓冲区信息的列表<br>gettabinfo（）获取带有标签页信息的列表<br>getwininfo（）获取带有窗口信息的列表</p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>getcmdline（）获取当前命令行<br>getcmdpos（）获取光标在命令行中的位置<br>setcmdpos（）设置光标在命令行中的位置<br>getcmdtype（）返回当前的命令行类型<br>getcmdwintype（）返回当前命令行窗口类型<br>getcompletion（）命令行完成匹配列表</p>
<h3 id="快速修复和位置列表"><a href="#快速修复和位置列表" class="headerlink" title="快速修复和位置列表"></a>快速修复和位置列表</h3><p>getqflist（）quickfix错误列表<br>setqflist（）修改quickfix列表<br>getloclist（）列出位置列表项<br>setloclist（）修改位置列表</p>
<h3 id="插入模式补全"><a href="#插入模式补全" class="headerlink" title="插入模式补全"></a>插入模式补全</h3><p>complete（）设置找到的匹配项<br>complete_add（）添加找到的匹配项<br>complete_check（）检查是否应该中止完成<br>pumvisible（）检查是否显示弹出菜单</p>
<h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><p>foldclosed（）检查特定行处的折叠<br>foldclosedend（）像 foldclosed（）但返回最后一行<br>foldlevel（）检查特定行的折叠级别<br>foldtext（）生成为封闭折叠显示的线<br>foldtextresult（）获取关闭折叠显示的文本</p>
<h3 id="语法和高亮"><a href="#语法和高亮" class="headerlink" title="语法和高亮"></a>语法和高亮</h3><p>clearmatches（）清除由| matchadd（）|定义的所有匹配 和 |：match | 命令<br>getmatches（）获取由| matchadd（）|定义的所有匹配 和 |：match | 命令<br>hlexists（）检查高亮组是否存在<br>hlID（）获取高亮组的ID<br>synID（）获取特定位置的语法ID<br>syndICate（）获取语法ID的特定属性<br>synIDtrans（）获取翻译的语法ID<br>synstack（）获取特定位置的语法ID列表<br>synconcealed（）获取有关隐藏的信息<br>diff_hlID（）获取位置处diff模式的高亮ID<br>mathcad（）定义一个模式来突出显示（“匹配”）<br>matchaddpos（）定义要突出显示的位置列表<br>matcharg（）获取有关|：match |的信息 参数<br>matchdelete（）删除由| matchadd（）|定义的匹配 或 |：match | 命令<br>setmatches（）恢复由保存的匹配列表 | getmatches（）|</p>
<h3 id="拼写"><a href="#拼写" class="headerlink" title="拼写"></a>拼写</h3><p>spellbadword（）定位在光标处或之后的拼写错误的单词<br>spellsuggest（）返回建议的拼写更正<br>soundfold（）返回一个词的声音a类似的等价物</p>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>histadd（）向历史添加项目<br>histdel（）从历史记录中删除项目<br>histget（）从历史记录中获取项目<br>histnr（）获取历史列表的最高索引</p>
<h3 id="互动"><a href="#互动" class="headerlink" title="互动"></a>互动</h3><p>browse（）放置一个文件请求者<br>browsedir（）放了一个目录请求者<br>confirm（）让用户做出选择<br>getchar（）从用户获取一个字符<br>getcharmod（）获取最后一个输入字符的修饰符<br>feedkeys（）将字符放在预先排队的队列中<br>input（）从用户获取一行<br>inputlist（）让用户从列表中选择一个条目<br>inputsecret（）从用户获取一行而不显示它<br>inputdialog（）在对话框中从用户获取一行<br>inputsave（）保存和清除typeahead<br>inputrestore（）恢复typeahead</p>
<h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>getfontname（）获取当前正在使用的字体的名称<br>getwinposx（）GUI Vim窗口的X位置<br>getwinposy（）Y GUI的Vim窗口的位置</p>
<h3 id="VIM服务器"><a href="#VIM服务器" class="headerlink" title="VIM服务器"></a>VIM服务器</h3><p>serverlist（）返回服务器名称的列表<br>remote_send（）向Vim服务器发送命令字符<br>remote_expr（）计算Vim服务器中的表达式<br>server2client（）向Vim服务器的客户端发送回复<br>remote_peek（）检查是否有来自Vim服务器的回复<br>remote_read（）从Vim服务器读取回复<br>foreground（）将Vim窗口移动到前台<br>remote_foreground（）将Vim服务器窗口移动到前台</p>
<h3 id="窗口大小和位置"><a href="#窗口大小和位置" class="headerlink" title="窗口大小和位置"></a>窗口大小和位置</h3><p>winheight（）获取特定窗口的高度<br>winwidth（）获取特定窗口的宽度<br>winrestcmd（）return命令恢复窗口大小<br>winsaveview（）获取当前窗口的视图<br>winrestview（）恢复当前窗口的保存视图</p>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>hasmapto（）检查是否存在映射<br>mapcheck（）检查是否存在匹配的映射<br>maparg（）获取映射的rhs<br>wildmenumode（）检查wildmode是否处于活动状态</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>assert_equal（）断言两个表达式的值相等<br>assert_notequal（）断言两个表达式的值不相等<br>assert_inrange（）断言表达式在范围内<br>assert_match（）断言模式匹配该值<br>assert_notmatch（）断言模式与值不匹配<br>assert_false（）断言表达式为false<br>assert_true（）断言表达式为true<br>assert_exception（）断言命令抛出异常<br>assert_fails（）断言函数调用失败<br>test_alloc_fail（）使内存分配失败<br>test_autochdir（）在启动期间启用’autochdir’<br>test_disable_char_avail（）测试没有typeahead<br>test_garbagecollect_now（）可用内存<br>test_null_channel（）返回一个null通道<br>test_null_dict（）返回一个空Dict<br>test_null_job（）返回一个空作业<br>test_null_list（）返回一个空列表<br>test_null_partial（）返回一个零部分函数<br>test_null_string（）返回一个空字符串</p>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>ch_open（）打开一个通道<br>ch_close（）关闭一个通道<br>ch_read（）从通道读取消息<br>ch_readraw（）从通道读取原始消息<br>ch_sendexpr（）通过通道发送JSON消息<br>ch_sendraw（）通过通道发送原始消息<br>ch_evalexpr（）通过通道评估表达式<br>ch_evalraw（）通过通道评估原始字符串<br>ch_status（）获取通道的状态<br>ch_getbufnr（）获取通道的缓冲区号<br>ch_getjob（）获取与通道相关联的作业<br>ch_info（）获取通道信息<br>ch_log（）在通道日志文件中写入一条消息<br>ch_logfile（）设置通道日志文件<br>ch_setoptions（）设置通道的选项<br>json_encode（）将表达式编码为JSON字符串<br>json_decode（）将JSON字符串解码为Vim类型<br>js_encode（）将表达式编码为JSON字符串<br>js_decode（）将JSON字符串解码为Vim类型</p>
<h3 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h3><p>job_start（）启动作业<br>job_stop（）停止作业<br>job_status（）获取作业的状态<br>job_getchannel（）获取作业使用的通道<br>job_info（）获取有关作业的信息<br>job_setoptions（）设置作业的选项</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>timer_start（）创建一个定时器<br>timer_pause（）暂停或取消暂停计时器<br>timer_stop（）停止定时器<br>timer_stopall（）停止所有计时器<br>timer_info（）获取有关计时器的信息</p>
<h3 id="各种"><a href="#各种" class="headerlink" title="各种"></a>各种</h3><p>mode（）获取当前编辑模式<br>visualmode（）最后使用的可视模式<br>exists（）检查是否存在变量，函数等<br>has（）检查Vim中是否支持特性<br>changenr（）返回最近更改的数字<br>cscope_connection（）检查cscope连接是否存在<br>did_filetype（）检查是否使用了FileType自动命令<br>eventhandler（）检查是否由事件处理程序调用<br>getpid（）获取Vim的进程ID<br>libcall（）调用外部库中的函数<br>lincoln（）idem，返回一个数字<br>undofile（）获取撤销文件的名称<br>undotree（）返回撤销树的状态<br>getreg（）获取寄存器的内容<br>getregtype（）获取寄存器的类型<br>setreg（）设置寄存器的内容和类型<br>shiftwidth（）有效值’shiftwidth’<br>wordcount（）获取缓冲区的字节/字/ char计数<br>taglist（）获取匹配标签的列表<br>tagfiles（）获取标签文件的列表<br>luaeval（）评估Lua表达式<br>mzeval（）evaluate | MzScheme | 表达<br>perleval（）计算Perl表达式（| + perl |）<br>py3eval（）评估Python表达式（| + python3 |）<br>pyeval（）求值Python表达式（| + python |）</p>
<h1 id="异常-Exceptions"><a href="#异常-Exceptions" class="headerlink" title="异常(Exceptions)"></a>异常(Exceptions)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:try</div><div class="line">: read ~/templates/pascal.tmpl</div><div class="line">:catch /E484:/</div><div class="line"> echo &quot;sorry, ...&quot;</div><div class="line">:endtry</div></pre></td></tr></table></figure>
<ul>
<li>异常是一个字符串，每个错误信息都有一个固定数值</li>
<li>通过匹配模式处理对应异常</li>
<li>匹配模式为空表示捕捉所有异常</li>
<li><code>:finally</code>机制，不管是否有错误或者退出都会执行到</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim7.4脚本相关帮助笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vim" scheme="http://x8087.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用publish发布草稿</title>
    <link href="http://x8087.github.io/2016/11/13/hexo%E4%BD%BF%E7%94%A8publish%E5%8F%91%E5%B8%83%E8%8D%89%E7%A8%BF/"/>
    <id>http://x8087.github.io/2016/11/13/hexo使用publish发布草稿/</id>
    <published>2016-11-13T06:38:02.000Z</published>
    <updated>2016-11-26T02:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>hexo使用publish发布草稿时报错FATAL Something’s wrong.</p>
<a id="more"></a>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Error: Draft &quot;笔记-vim自动命令事件-md&quot; does not exist.</div><div class="line">    at /Users/user/Documents/work/hexo/node_modules/hexo/lib/hexo/post.js:197:22</div><div class="line">    at tryCatcher (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/util.js:16:23)</div><div class="line">    at Promise._settlePromiseFromHandler (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:497:31)</div><div class="line">    at Promise._settlePromise (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:555:18)</div><div class="line">    at Promise._settlePromise0 (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:600:10)</div><div class="line">    at Promise._settlePromises (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:683:18)</div><div class="line">    at Promise._fulfill (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:624:18)</div><div class="line">    at Promise._resolveCallback (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:424:57)</div><div class="line">    at Promise._settlePromiseFromHandler (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:510:17)</div><div class="line">    at Promise._settlePromise (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:555:18)</div><div class="line">    at Promise._settlePromise0 (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:600:10)</div><div class="line">    at Promise._settlePromises (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:683:18)</div><div class="line">    at Promise._fulfill (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:624:18)</div><div class="line">    at Promise._resolveCallback (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:424:57)</div><div class="line">    at ReductionPromiseArray._resolve (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/reduce.js:51:19)</div><div class="line">    at Promise.completed [as _fulfillmentHandler0] (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/reduce.js:112:15)</div><div class="line">    at Promise._settlePromise (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:552:21)</div><div class="line">    at Promise._settlePromise0 (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:600:10)</div><div class="line">    at Promise._settlePromises (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/promise.js:683:18)</div><div class="line">    at Async._drainQueue (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/async.js:125:16)</div><div class="line">    at Async._drainQueues (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/async.js:135:10)</div><div class="line">    at Immediate.Async.drainQueues [as _onImmediate] (/Users/user/Documents/work/hexo/node_modules/hexo-fs/node_modules/bluebird/js/release/async.js:16:14)</div><div class="line">    at tryOnImmediate (timers.js:534:15)</div><div class="line">    at processImmediate [as _immediateCallback] (timers.js:514:5</div></pre></td></tr></table></figure>
<p>根据报错堆栈可以确认问题是由于找不到文件导致。仔细检查文件名发现后面加了<strong>-md</strong>的文件类型后缀，调用时去掉后缀改成<code>hexo publish &quot;笔记-vim自动命令事件&quot;</code>成功发布。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;hexo使用publish发布草稿时报错FATAL Something’s wrong.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://x8087.github.io/tags/hexo/"/>
    
      <category term="bug" scheme="http://x8087.github.io/tags/bug/"/>
    
      <category term="问题" scheme="http://x8087.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="publish" scheme="http://x8087.github.io/tags/publish/"/>
    
  </entry>
  
  <entry>
    <title>vim自动命令事件整理</title>
    <link href="http://x8087.github.io/2016/11/12/vim%E8%87%AA%E5%8A%A8%E5%91%BD%E4%BB%A4%E4%BA%8B%E4%BB%B6/"/>
    <id>http://x8087.github.io/2016/11/12/vim自动命令事件/</id>
    <published>2016-11-12T07:09:00.000Z</published>
    <updated>2016-12-22T16:49:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim参考文档内自动命令事件的翻译整理。</p>
<a id="more"></a>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="读取-Reading"><a href="#读取-Reading" class="headerlink" title="读取(Reading)"></a>读取(Reading)</h3><h4 id="BufNewFile"><a href="#BufNewFile" class="headerlink" title="BufNewFile"></a>BufNewFile</h4><p>starting to edit a file that doesn’t exist<br>开始编辑不存在的文件。<br>Can be used to read in a skeleton file.<br>能用在一个构架文件读取。</p>
<h4 id="BufReadPre"><a href="#BufReadPre" class="headerlink" title="BufReadPre"></a>BufReadPre</h4><p>starting to edit a new buffer, before reading the file<br>开始编辑一个新的缓存，读取文件之前。<br>Not used if the file doesn’t exist.<br>文件如果不存在不能使用</p>
<h4 id="BufRead-or-BufReadPost"><a href="#BufRead-or-BufReadPost" class="headerlink" title="BufRead or BufReadPost"></a>BufRead or BufReadPost</h4><p>starting to edit a new buffer, after reading the file<br>开始编辑一个新的缓存，读取文件之后。</p>
<p>When starting to edit a new buffer, after reading the file into the buffer, before executing the modelines.  See |BufWinEnter|<br>当开始编辑一个新的缓存，读取文件进入缓存之后，执行模式行之前。参考|BufWinEnter|<br>for when you need to do something after processing the modelines.<br>为了当你需要在处理模式行之后做操作。<br>This does NOT work for “:r file”.<br>变个对于”:r file”不工作<br>Not used when the file doesn’t exist.<br>当文件不存在时不可用。<br>Also used after successfully recovering a file.<br>也用在成功覆盖文件之后。<br>Also triggered for the filetypedetect group when executing “:filetype detect” and when writing an unnamed buffer in a way that the buffer gets a name.<br>同时当执行”:filetype detect”时作为文件类型检测组和当书写未命名缓存获取名字时触发。</p>
<h4 id="BufReadCmd"><a href="#BufReadCmd" class="headerlink" title="BufReadCmd"></a>BufReadCmd</h4><p>before starting to edit a new buffer |Cmd-event|<br>开始编辑新缓存之前|Cmd-event|<br>Should read the file into the buffer. |Cmd-event|<br>文件应已读入缓存。</p>
<h4 id="FileReadPre"><a href="#FileReadPre" class="headerlink" title="FileReadPre"></a>FileReadPre</h4><p>before reading a file with a “:read” command<br>通过”:read”命令读取文件之前。</p>
<h4 id="FileReadPost"><a href="#FileReadPost" class="headerlink" title="FileReadPost"></a>FileReadPost</h4><p>after reading a file with a “:read” command<br>通过”:read”命令读取文件之后。<br>Note that Vim sets the ‘[ and ‘] marks to the first and last line of the read.  This can be used to operate on the lines just read.<br>注意：vim在读取的首行和尾行设置’[和’]标记。这个能用来在只读行上操作。</p>
<h4 id="FileReadCmd"><a href="#FileReadCmd" class="headerlink" title="FileReadCmd"></a>FileReadCmd</h4><p>before reading a file with a “:read” command |Cmd-event|<br>通过”:read”命令读取文件之前。<br>Should do the reading of the file. |Cmd-event|<br>应作用在文件读取中。</p>
<h4 id="FilterReadPre"><a href="#FilterReadPre" class="headerlink" title="FilterReadPre"></a>FilterReadPre</h4><p>before reading a file from a filter command<br>过滤命令读取文件之前。<br>Vim checks the pattern against the name of the current buffer, not the name of the temporary file that is the output of the filter command.<br>Not triggered when ‘shelltemp’ is off.</p>
<h4 id="FilterReadPost"><a href="#FilterReadPost" class="headerlink" title="FilterReadPost"></a>FilterReadPost</h4><p>after reading a file from a filter command<br>过滤命令读取文件之后。<br>After reading a file from a filter command.<br>Vim checks the pattern against the name of the current buffer as with FilterReadPre.<br>Not triggered when ‘shelltemp’ is off.</p>
<h4 id="StdinReadPre"><a href="#StdinReadPre" class="headerlink" title="StdinReadPre"></a>StdinReadPre</h4><p>before reading from stdin into the buffer<br>从标准输入读取到缓存之前。<br>Before reading from stdin into the buffer.<br>Only used when the “-“ argument was used when Vim was started |–|.</p>
<h4 id="StdinReadPost"><a href="#StdinReadPost" class="headerlink" title="StdinReadPost"></a>StdinReadPost</h4><p>After reading from the stdin into the buffer<br>从标准输入读取到缓存之后。<br>After reading from the stdin into the buffer, before executing the modelines.<br>Only used when the “-“ argument was used when Vim was started |–|.</p>
<h3 id="写入-Writing"><a href="#写入-Writing" class="headerlink" title="写入(Writing)"></a>写入(Writing)</h3><h4 id="BufWrite"><a href="#BufWrite" class="headerlink" title="BufWrite"></a>BufWrite</h4><p>starting to write the whole buffer to a file<br>开始写整个缓存到文件。<br>Before writing the whole buffer to a file.</p>
<h4 id="BufWritePre"><a href="#BufWritePre" class="headerlink" title="BufWritePre"></a>BufWritePre</h4><p>starting to write the whole buffer to a file<br>开始写整个缓存到文件。<br>Before writing the whole buffer to a file.</p>
<h4 id="BufWritePost"><a href="#BufWritePost" class="headerlink" title="BufWritePost"></a>BufWritePost</h4><p>after writing the whole buffer to a file<br>写整个缓存到文件后。<br>(should undo the commands for BufWritePre).</p>
<h4 id="BufWriteCmd"><a href="#BufWriteCmd" class="headerlink" title="BufWriteCmd"></a>BufWriteCmd</h4><p>before writing the whole buffer to a file |Cmd-event|<br>写整个缓存到文件前。<br>Should do the writing of the file and reset ‘modified’ if successful, unless ‘+’ is in ‘cpo’ and writing to another file |cpo-+|.<br>The buffer contents should not be changed.<br>When the command resets ‘modified’ the undo information is adjusted to mark older undo states as ‘modified’, like |:write| does. |Cmd-event|</p>
<h4 id="FileWritePre"><a href="#FileWritePre" class="headerlink" title="FileWritePre"></a>FileWritePre</h4><p>starting to write part of a buffer to a file<br>开始写部分缓存到文件。<br>Before writing to a file, when not writing the whole buffer.<br>Use the ‘[ and ‘] marks for the range of lines.</p>
<h4 id="FileWritePost"><a href="#FileWritePost" class="headerlink" title="FileWritePost"></a>FileWritePost</h4><p>after writing part of a buffer to a file<br>写部分缓存到文件后。<br>After writing to a file, when not writing the whole buffer.</p>
<h4 id="FileWriteCmd"><a href="#FileWriteCmd" class="headerlink" title="FileWriteCmd"></a>FileWriteCmd</h4><p>before writing part of a buffer to a file |Cmd-event|<br>写部分缓存到文件前。<br>Before writing to a file, when not writing the whole buffer.<br>Should do the writing to the file.<br>Should not change the buffer.<br>Use the ‘[ and ‘] marks for the range of lines. |Cmd-event|</p>
<h4 id="FileAppendPre"><a href="#FileAppendPre" class="headerlink" title="FileAppendPre"></a>FileAppendPre</h4><p>starting to append to a file<br>开始附加到文件。<br>Before appending to a file.<br>Use the ‘[ and ‘] marks for the range of lines.</p>
<h4 id="FileAppendPost"><a href="#FileAppendPost" class="headerlink" title="FileAppendPost"></a>FileAppendPost</h4><p>after appending to a file<br>附加到文件后。</p>
<h4 id="FileAppendCmd"><a href="#FileAppendCmd" class="headerlink" title="FileAppendCmd"></a>FileAppendCmd</h4><p>before appending to a file |Cmd-event|<br>附加到文件前。<br>Should do the appending to the file.<br>Use the ‘[ and ‘] marks for the range of lines.|Cmd-event|</p>
<h4 id="FilterWritePre"><a href="#FilterWritePre" class="headerlink" title="FilterWritePre"></a>FilterWritePre</h4><p>starting to write a file for a filter command or diff<br>开始为过滤命令或diff写文件。<br>Before writing a file for a filter command or making a diff.<br>Vim checks the pattern against the name of the current buffer, not the name of the temporary file that is the output of the filter command.<br>Not triggered when ‘shelltemp’ is off.</p>
<h4 id="FilterWritePost"><a href="#FilterWritePost" class="headerlink" title="FilterWritePost"></a>FilterWritePost</h4><p>after writing a file for a filter command or diff<br>为过滤命令或diff写文件后。<br>After writing a file for a filter command or making a diff.<br>Vim checks the pattern against the name of the current buffer as with FilterWritePre.<br>Not triggered when ‘shelltemp’ is off.</p>
<h3 id="缓存-Buffers"><a href="#缓存-Buffers" class="headerlink" title="缓存(Buffers)"></a>缓存(Buffers)</h3><h4 id="BufAdd"><a href="#BufAdd" class="headerlink" title="BufAdd"></a>BufAdd</h4><p>just after adding a buffer to the buffer list<br>添加缓存到缓存列表后。</p>
<h4 id="BufCreate"><a href="#BufCreate" class="headerlink" title="BufCreate"></a>BufCreate</h4><p>just after adding a buffer to the buffer list<br>添加缓存到缓存列表后。<br>Just after creating a new buffer which is added to the buffer list, or adding a buffer to the buffer list.<br>Also used just after a buffer in the buffer list has been renamed.<br>The BufCreate event is for historic reasons.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being created “<afile>“.</afile></p>
<h4 id="BufDelete"><a href="#BufDelete" class="headerlink" title="BufDelete"></a>BufDelete</h4><p>before deleting a buffer from the buffer list<br>从缓存列表删除缓存前。<br>The BufUnload may be called first (if the buffer was loaded).<br>Also used just before a buffer in the buffer list is renamed.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being deleted “<afile>“ and “<abuf>“.<br>Don’t change to another buffer, it will cause problems. </abuf></afile></p>
<h4 id="BufWipeout"><a href="#BufWipeout" class="headerlink" title="BufWipeout"></a>BufWipeout</h4><p>before completely deleting a buffer<br>完全删除缓存前。<br>The BufUnload and BufDelete events may be called first (if the buffer was loaded and was in the buffer list).<br>Also used just before a buffer is renamed (also when it’s not in the buffer list).<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being deleted “<afile>“.<br>Don’t change to another buffer, it will cause problems.</afile></p>
<h4 id="BufFilePre"><a href="#BufFilePre" class="headerlink" title="BufFilePre"></a>BufFilePre</h4><p>before changing the name of the current buffer<br>更改当前缓存名字前。<br>with the “:file” or “:saveas” command.</p>
<h4 id="BufFilePost"><a href="#BufFilePost" class="headerlink" title="BufFilePost"></a>BufFilePost</h4><p>after changing the name of the current buffer<br>更改当前缓存名字后。<br>with the “:file” or “:saveas” command.</p>
<h4 id="BufEnter"><a href="#BufEnter" class="headerlink" title="BufEnter"></a>BufEnter</h4><p>after entering a buffer<br>进入缓存前。<br>Useful for setting options for a file type.<br>Also executed when starting to edit a buffer, after the BufReadPost autocommands.</p>
<h4 id="BufLeave"><a href="#BufLeave" class="headerlink" title="BufLeave"></a>BufLeave</h4><p>before leaving to another buffer<br>离开到另一个缓存前。<br>Also when leaving or closing the current window and the new current window is not for the same buffer.<br>Not used for “:qa” or “:q” when exiting Vim.</p>
<h4 id="BufWinEnter"><a href="#BufWinEnter" class="headerlink" title="BufWinEnter"></a>BufWinEnter</h4><p>after a buffer is displayed in a window<br>缓存在窗口显示后。<br>This can be when the buffer is loaded (after processing the modelines) or when a hidden buffer is displayed in a window (and is no longer hidden).<br>Does not happen for |:split| without arguments, since you keep editing the same buffer, or “:split” with a file that’s already open in a window, because it re-uses an existing buffer.<br>But it does happen for a “:split” with the name of the current buffer, since it reloads that buffer.</p>
<h4 id="BufWinLeave"><a href="#BufWinLeave" class="headerlink" title="BufWinLeave"></a>BufWinLeave</h4><p>before a buffer is removed from a window<br>缓存从窗口移除前。<br>Not when it’s still visible in another window.<br>Also triggered when exiting.<br>It’s triggered before BufUnload or BufHidden.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being unloaded “<afile>“.<br>When exiting and v:dying is 2 or more this event is not triggered.</afile></p>
<h4 id="BufUnload"><a href="#BufUnload" class="headerlink" title="BufUnload"></a>BufUnload</h4><p>before unloading a buffer<br>卸下缓存前。<br>This is when the text in the buffer is going to be freed.<br>This may be after a BufWritePost and before a BufDelete.<br>Also used for all buffers that are loaded when Vim is going to exit.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being unloaded “<afile>“.<br>Don’t change to another buffer, it will cause problems.<br>When exiting and v:dying is 2 or more this event is not triggered.</afile></p>
<h4 id="BufHidden"><a href="#BufHidden" class="headerlink" title="BufHidden"></a>BufHidden</h4><p>just after a buffer has become hidden<br>缓存变成隐藏后。<br>That is, when there are no longer windows that show the buffer, but the buffer is not unloaded or<br>deleted.<br>Not used for “:qa” or “:q” when exiting Vim.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being unloaded “<afile>“.</afile></p>
<h4 id="BufNew"><a href="#BufNew" class="headerlink" title="BufNew"></a>BufNew</h4><p>just after creating a new buffer<br>创建新的缓存后。<br>Also used just after a buffer has been renamed.<br>When the buffer is added to the buffer list BufAdd will be triggered too.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer being created “<afile>“.</afile></p>
<h4 id="SwapExists"><a href="#SwapExists" class="headerlink" title="SwapExists"></a>SwapExists</h4><p>detected an existing swap file<br>检测存在交换文件。<br>Detected an existing swap file when starting to edit a file.<br>Only when it is possible to select a way to handle the situation, when Vim would ask the user what to do.<br>The |v:swapname| variable holds the name of the swap file found, <afile> the file being edited.  |v:swapcommand| may contain a command to be executed in the opened file.<br>The commands should set the |v:swapchoice| variable to a string with one character to tell Vim what should be done next: ‘o’    open read-only ‘e’    edit the file anyway ‘r’    recover ‘d’    delete the swap file ‘q’    quit, don’t edit the file ‘a’    abort, like hitting CTRL-C When set to an empty string the user will be asked, as if there was no SwapExists autocmd.<br><em>E812</em> It is not allowed to change to another buffer, change a buffer name or change directory here.</afile></p>
<h3 id="选项-Options"><a href="#选项-Options" class="headerlink" title="选项(Options)"></a>选项(Options)</h3><h4 id="FileType"><a href="#FileType" class="headerlink" title="FileType"></a>FileType</h4><p>when the ‘filetype’ option has been set<br>当设置了’filetype’选项时。<br>The pattern is matched against the filetype.</p>
<p><afile> can be used for the name of the file where this option was set, and <amatch> for the new value of ‘filetype’. See |filetypes|.</amatch></afile></p>
<h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>when the ‘syntax’ option has been set<br>当设置了’syntax’选项时。<br>When the ‘syntax’ option has been set.<br>The pattern is matched against the syntax name. <afile> can be used for the name of the file where this option was set, and <amatch> for the new value of ‘syntax’.<br>See |:syn-on|.</amatch></afile></p>
<h4 id="EncodingChanged"><a href="#EncodingChanged" class="headerlink" title="EncodingChanged"></a>EncodingChanged</h4><p>after the ‘encoding’ option has been changed<br>当’encoding’选项改变时。<br>Fires off after the ‘encoding’ option has been changed.<br>Useful to set up fonts, for example.<br>FileEncoding<br>Obsolete.  It still works and is equivalent to |EncodingChanged|.</p>
<h4 id="TermChanged"><a href="#TermChanged" class="headerlink" title="TermChanged"></a>TermChanged</h4><p>after the value of ‘term’ has changed<br>当’term’选项值改变时。<br>After the value of ‘term’ has changed.<br>Useful for re-loading the syntax file to update the colors, fonts and other terminal-dependent settings.<br>Executed for all loaded buffers.</p>
<h4 id="OptionSet"><a href="#OptionSet" class="headerlink" title="OptionSet"></a>OptionSet</h4><p>after setting any option<br>设置任何选项后。<br>The pattern is matched against the long option name.<br>The |v:option_old| variable indicates the old option value, |v:option_new| variable indicates the newly set value, the |v:option_type| variable indicates whether it’s global or local scoped and |<amatch>| indicates what option has been set.<br>Is not triggered on startup and for the ‘key’ option for obvious reasons.<br>Usage example: Check for the existence of the directory in the ‘backupdir’ and ‘undodir’ options, create the directory if it doesn’t exist yet.<br>Note: It’s a bad idea to reset an option during this autocommand, this may break a plugin.<br>You can always use <code>:noa</code> to prevent triggering this autocommand.</amatch></p>
<h3 id="启动与退出-Startup-and-exit"><a href="#启动与退出-Startup-and-exit" class="headerlink" title="启动与退出(Startup and exit)"></a>启动与退出(Startup and exit)</h3><h4 id="VimEnter"><a href="#VimEnter" class="headerlink" title="VimEnter"></a>VimEnter</h4><p>after doing all the startup stuff<br>完成所有启动操作后。<br>After doing all the startup stuff, including loading .vimrc files, executing the “-c cmd” arguments, creating all windows and loading the buffers in them.<br>Just before this event is triggered the |v:vim_did_enter| variable is set, so that you can do: &gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if v:vim_did_enter</div><div class="line">call s:init()</div><div class="line">else</div><div class="line">au VimEnter * call s:init()</div><div class="line">endif</div></pre></td></tr></table></figure></p>
<h4 id="GUIEnter"><a href="#GUIEnter" class="headerlink" title="GUIEnter"></a>GUIEnter</h4><p>after starting the GUI successfully<br>成功打开GUI后。<br>After starting the GUI successfully, and after opening the window.<br>It is triggered before VimEnter when using gvim.<br>Can be used to position the window from a .gvimrc file: &gt;<br>:autocmd GUIEnter * winpos 100 50</p>
<h4 id="GUIFailed"><a href="#GUIFailed" class="headerlink" title="GUIFailed"></a>GUIFailed</h4><p>after starting the GUI failed<br>打开GUI失败后。<br>After starting the GUI failed.<br>Vim may continue to run in the terminal, if possible (only on Unix and alikes, when connecting the X server fails).<br>You may want to quit Vim: &gt; :autocmd GUIFailed * qall</p>
<h4 id="TermResponse"><a href="#TermResponse" class="headerlink" title="TermResponse"></a>TermResponse</h4><p>after the terminal response to |t_RV| is received<br>终端对|t_RV|的答复收到后。<br>After the response to |t_RV| is received from the terminal.<br>The value of |v:termresponse| can be used to do things depending on the terminal version.<br>Note that this event may be triggered halfway executing another event, especially if file I/O, a shell command or anything else that takes time is involved.</p>
<h4 id="QuitPre"><a href="#QuitPre" class="headerlink" title="QuitPre"></a>QuitPre</h4><p>when using <code>:quit</code>, before deciding whether to quit<br>当使用’:quit’，决定是否退出前。<br>When using <code>:quit</code>, <code>:wq</code> or <code>:qall</code>, before deciding whether it closes the current window or quits Vim.<br>Can be used to close any non-essential window if the current window is the last ordinary window.</p>
<h4 id="VimLeavePre"><a href="#VimLeavePre" class="headerlink" title="VimLeavePre"></a>VimLeavePre</h4><p>before exiting Vim, before writing the viminfo file<br>退出Vim前，写viminfo文件前。<br>Before exiting Vim, just before writing the .viminfo file.<br>This is executed only once, if there is a match with the name of what happens to be the current buffer when exiting.<br>Mostly useful with a “<em>“ pattern.<br>` :autocmd VimLeavePre </em> call CleanupStuff() `<br>To detect an abnormal exit use |v:dying|.<br>When v:dying is 2 or more this event is not triggered.</p>
<h4 id="VimLeave"><a href="#VimLeave" class="headerlink" title="VimLeave"></a>VimLeave</h4><p>before exiting Vim, after writing the viminfo file<br>退出Vim前，写viminfo文件前。<br>Before exiting Vim, just after writing the .viminfo file.<br>Executed only once, like VimLeavePre.<br>To detect an abnormal exit use |v:dying|.<br>When v:dying is 2 or more this event is not triggered.</p>
<h3 id="其他-Various"><a href="#其他-Various" class="headerlink" title="其他(Various)"></a>其他(Various)</h3><h4 id="FileChangedShell"><a href="#FileChangedShell" class="headerlink" title="FileChangedShell"></a>FileChangedShell</h4><p>Vim notices that a file changed since editing started<br>Vim通知文件自从编辑开始时的改变。<br>When Vim notices that the modification time of a file has changed since editing started.<br>Also when the file attributes of the file change or when the size of the file changes.<br>|timestamp|<br>Mostly triggered after executing a shell command, but also with a |:checktime| command or when Gvim regains input focus.<br>This autocommand is triggered for each changed file.<br>It is not used when ‘autoread’ is set and the buffer was not changed.<br>If a FileChangedShell autocommand is present the warning message and prompt is not given.<br>The |v:fcs_reason| variable is set to indicate what happened and |v:fcs_choice| can be used to tell Vim what to do next.<br>NOTE: When this autocommand is executed, the current buffer “%” may be different from the buffer that was changed “<afile>“.<br>NOTE: The commands must not change the current buffer, jump to another buffer or delete a buffer.<br><em>E246</em> <em>E811</em><br>NOTE: This event never nests, to avoid an endless loop.<br>This means that while executing commands for the FileChangedShell event no other FileChangedShell event will be triggered.</afile></p>
<h4 id="FileChangedShellPost"><a href="#FileChangedShellPost" class="headerlink" title="FileChangedShellPost"></a>FileChangedShellPost</h4><p>After handling a file changed since editing started<br>处理文件自从编辑开始时的改变后。<br>After handling a file that was changed outside of Vim.<br>Can be used to update the statusline.</p>
<h4 id="FileChangedRO"><a href="#FileChangedRO" class="headerlink" title="FileChangedRO"></a>FileChangedRO</h4><p>before making the first change to a read-only file<br>对只读文件做出首个改变前。<br>Before making the first change to a read-only file.<br>Can be used to check-out the file from a source control system.<br>Not triggered when the change was caused by an autocommand.<br>This event is triggered when making the first change in a buffer or the first change after ‘readonly’ was set, just before the change is applied to the text.<br>WARNING: If the autocommand moves the cursor the effect of the change is undefined.<br><em>E788</em><br>It is not allowed to change to another buffer here.<br>You can reload the buffer but not edit another one.<br><em>E881</em><br>If the number of lines changes saving for undo may fail and the change will be aborted.</p>
<h4 id="ShellCmdPost"><a href="#ShellCmdPost" class="headerlink" title="ShellCmdPost"></a>ShellCmdPost</h4><p>after executing a shell command<br>执行shell命令后。<br>After executing a shell command with |:!cmd|, |:shell|, |:make| and |:grep|.<br>Can be used to check for any changed files.</p>
<h4 id="ShellFilterPost"><a href="#ShellFilterPost" class="headerlink" title="ShellFilterPost"></a>ShellFilterPost</h4><p>after filtering with a shell command<br>用shell命令过滤后。<br>After executing a shell command with “:{range}!cmd”, “:w !cmd” or “:r !cmd”.<br>Can be used to check for any changed files.</p>
<h4 id="CmdUndefined"><a href="#CmdUndefined" class="headerlink" title="CmdUndefined"></a>CmdUndefined</h4><p>a user command is used but it isn’t defined<br>使用未定义的用户命令时。<br>Useful for defining a command only when it’s used.<br>The pattern is matched against the command name.  Both <amatch> and <afile> are set to the name of the command.<br>NOTE: Autocompletion won’t work until the command is defined.<br>An alternative is to always define the user command and have it invoke an autoloaded function.<br>See |autoload|.</afile></amatch></p>
<h4 id="FuncUndefined"><a href="#FuncUndefined" class="headerlink" title="FuncUndefined"></a>FuncUndefined</h4><p>a user function is used but it isn’t defined<br>使用未定义的用户函数时。<br>When a user function is used but it isn’t defined.<br>Useful for defining a function only when it’s used.<br>The pattern is matched against the function name.<br>Both <amatch> and <afile> are set to the name of the function.<br>NOTE: When writing Vim scripts a better alternative is to use an autoloaded function.<br>See |autoload-functions|.</afile></amatch></p>
<h4 id="SpellFileMissing"><a href="#SpellFileMissing" class="headerlink" title="SpellFileMissing"></a>SpellFileMissing</h4><p>a spell file is used but it can’t be found<br>使用一个拼写文件，但是找不到。<br>When trying to load a spell checking file and it can’t be found.<br>The pattern is matched against the language.  <amatch> is the language, ‘encoding’ also matters.<br>See |spell-SpellFileMissing|.</amatch></p>
<h4 id="SourcePre"><a href="#SourcePre" class="headerlink" title="SourcePre"></a>SourcePre</h4><p>before sourcing a Vim script<br>sourcing Vim脚本前。<br>|:source| <afile> is the name of the file being sourced.</afile></p>
<h4 id="SourceCmd"><a href="#SourceCmd" class="headerlink" title="SourceCmd"></a>SourceCmd</h4><p>before sourcing a Vim script |Cmd-event|<br>sourcing Vim脚本前。<br>When sourcing a Vim script. |:source|</p>
<p><afile> is the name of the file being sourced.<br>The autocommand must source this file.<br>|Cmd-event|</afile></p>
<h4 id="VimResized"><a href="#VimResized" class="headerlink" title="VimResized"></a>VimResized</h4><p>after the Vim window size changed<br>Vim窗口尺寸改变后。<br>After the Vim window was resized, thus ‘lines’ and/or ‘columns’ changed.<br>Not when starting up though.</p>
<h4 id="FocusGained"><a href="#FocusGained" class="headerlink" title="FocusGained"></a>FocusGained</h4><p>Vim got input focus<br>Vim得到输入焦点时。<br>When Vim got input focus.<br>Only for the GUI version and a few console versions where this can be detected.</p>
<h4 id="FocusLost"><a href="#FocusLost" class="headerlink" title="FocusLost"></a>FocusLost</h4><p>Vim lost input focus<br>Vim失去输入焦点时。<br>When Vim lost input focus.  Only for the GUI version and a few console versions where this can be detected.<br>May also happen when a dialog pops up.</p>
<h4 id="CursorHold"><a href="#CursorHold" class="headerlink" title="CursorHold"></a>CursorHold</h4><p>the user doesn’t press a key for a while<br>用户不按按键一会儿后。<br>When the user doesn’t press a key for the time specified with ‘updatetime’.<br>Not re-triggered until the user has pressed a key (i.e. doesn’t fire every ‘updatetime’ ms if you leave Vim to make some coffee. :)  See |CursorHold-example| for previewing tags.<br>This event is only triggered in Normal mode.<br>It is not triggered when waiting for a command argument to be typed, or a movement after an operator.<br>While recording the CursorHold event is not triggered. |q| <em><cursorhold></cursorhold></em><br>Internally the autocommand is triggered by the <cursorhold> key.<br>In an expression mapping |getchar()| may see this character.</cursorhold></p>
<p>Note: Interactive commands cannot be used for this event.  There is no hit-enter prompt, the screen is updated directly (when needed).<br>Note: In the future there will probably be another option to set the time.<br>Hint: to force an update of the status lines use: <code>:let &amp;ro = &amp;ro</code><br>{only on Amiga, Unix, Win32, MSDOS and all GUI versions}</p>
<h4 id="CursorHoldI"><a href="#CursorHoldI" class="headerlink" title="CursorHoldI"></a>CursorHoldI</h4><p>the user doesn’t press a key for a while in Insert mode<br>用户在插入模式不按按键一会儿后。<br>Just like CursorHold, but in Insert mode.<br>Not triggered when waiting for another key, e.g. after CTRL-V, and not when in CTRL-X mode |insert_expand|.</p>
<h4 id="CursorMoved"><a href="#CursorMoved" class="headerlink" title="CursorMoved"></a>CursorMoved</h4><p>the cursor was moved in Normal mode<br>在普通模式光标移动。<br>After the cursor was moved in Normal or Visual mode.<br>Also when the text of the cursor line has been changed, e.g., with “x”, “rx” or “p”.<br>Not triggered when there is typeahead or when an operator is pending.<br>For an example see |match-parens|.<br>Careful: This is triggered very often, don’t do anything that the user does not expect or that is slow.</p>
<h4 id="CursorMovedI"><a href="#CursorMovedI" class="headerlink" title="CursorMovedI"></a>CursorMovedI</h4><p>the cursor was moved in Insert mode<br>在插入模式光标移动。<br>After the cursor was moved in Insert mode.<br>Not triggered when the popup menu is visible.<br>Otherwise the same as CursorMoved.</p>
<h4 id="WinNew"><a href="#WinNew" class="headerlink" title="WinNew"></a>WinNew</h4><p>after creating a new window<br>创建一个新窗口后。<br>When a new window was created.<br>Not done for the fist window, when Vim has just started.<br>Before a WinEnter event.</p>
<h4 id="TabNew"><a href="#TabNew" class="headerlink" title="TabNew"></a>TabNew</h4><p>after creating a new tab page<br>创建一个新标签页后。<br>When a tab page was created. |tab-page|<br>A WinEnter event will have been triggered first, TabEnter follows.</p>
<h4 id="TabClosed"><a href="#TabClosed" class="headerlink" title="TabClosed"></a>TabClosed</h4><p>after closing a tab page<br>关闭一个标签页后。</p>
<h4 id="WinEnter"><a href="#WinEnter" class="headerlink" title="WinEnter"></a>WinEnter</h4><p>after entering another window<br>进入另一个窗口后。<br>After entering another window.<br>Not done for the first window, when Vim has just started.<br>Useful for setting the window height.<br>If the window is for another buffer, Vim executes the BufEnter autocommands after the WinEnter autocommands.<br>Note: When using “:split fname” the WinEnter event is triggered after the split but before the file “fname” is loaded.</p>
<h4 id="WinLeave"><a href="#WinLeave" class="headerlink" title="WinLeave"></a>WinLeave</h4><p>before leaving a window<br>离开一个窗口前。<br>Before leaving a window.<br>If the window to be entered next is for a different buffer, Vim executes the BufLeave autocommands before the WinLeave autocommands (but not for “:new”).<br>Not used for “:qa” or “:q” when exiting Vim.</p>
<h4 id="TabEnter"><a href="#TabEnter" class="headerlink" title="TabEnter"></a>TabEnter</h4><p>after entering another tab page<br>进入另一个标签页后。<br>Just after entering a tab page. |tab-page|<br>After triggering the WinEnter and before triggering the BufEnter event.</p>
<h4 id="TabLeave"><a href="#TabLeave" class="headerlink" title="TabLeave"></a>TabLeave</h4><p>before leaving a tab page<br>离开一个标签页前。<br>Just before leaving a tab page. |tab-page|<br>A WinLeave event will have been triggered first.</p>
<h4 id="CmdwinEnter"><a href="#CmdwinEnter" class="headerlink" title="CmdwinEnter"></a>CmdwinEnter</h4><p>after entering the command-line window<br>进入命令行窗口后。<br>Useful for setting options specifically for this special type of window.<br>This is triggered <em>instead</em> of BufEnter and WinEnter.</p>
<p><afile> is set to a single character, indicating the type of command-line. |cmdwin-char|</afile></p>
<h4 id="CmdwinLeave"><a href="#CmdwinLeave" class="headerlink" title="CmdwinLeave"></a>CmdwinLeave</h4><p>before leaving the command-line window<br>离开命令行窗口前。<br>Useful to clean up any global setting done with CmdwinEnter.<br>This is triggered <em>instead</em> of BufLeave and WinLeave.</p>
<p><afile> is set to a single character, indicating the type of command-line. |cmdwin-char|</afile></p>
<h4 id="InsertEnter"><a href="#InsertEnter" class="headerlink" title="InsertEnter"></a>InsertEnter</h4><p>starting Insert mode<br>开始插入模式。<br>Just before starting Insert mode.<br>Also for Replace mode and Virtual Replace mode.<br>The |v:insertmode| variable indicates the mode.<br>Be careful not to do anything else that the user does not expect.<br>The cursor is restored afterwards.<br>If you do not want that set |v:char| to a non-empty string.</p>
<h4 id="InsertChange"><a href="#InsertChange" class="headerlink" title="InsertChange"></a>InsertChange</h4><p>when typing <insert> while in Insert or Replace mode<br>当在插入或替换模式时键入<insert>。<br>The |v:insertmode| variable indicates the new mode.<br>Be careful not to move the cursor or do anything else that the user does not expect.</insert></insert></p>
<h4 id="InsertLeave"><a href="#InsertLeave" class="headerlink" title="InsertLeave"></a>InsertLeave</h4><p>when leaving Insert mode<br>当离开插入模式时。<br>When leaving Insert mode.<br>Also when using CTRL-O |i_CTRL-O|.<br>But not for |i_CTRL-C|.</p>
<h4 id="InsertCharPre"><a href="#InsertCharPre" class="headerlink" title="InsertCharPre"></a>InsertCharPre</h4><p>when a character was typed in Insert mode, before inserting it<br>当在插入模式键入字符时，插入它之前。<br>When a character is typed in Insert mode, before inserting the char.<br>The |v:char| variable indicates the char typed and can be changed during the event to insert a different character.<br>When |v:char| is set to more than one character this text is inserted literally.<br>It is not allowed to change the text |textlock|.<br>The event is not triggered when ‘paste’ is set.</p>
<h4 id="TextChanged"><a href="#TextChanged" class="headerlink" title="TextChanged"></a>TextChanged</h4><p>after a change was made to the text in Normal mode<br>在普通模式更改文本后。<br>After a change was made to the text in the current buffer in Normal mode.<br>That is when |b:changedtick| has changed.<br>Not triggered when there is typeahead or when an operator is pending.<br>Careful: This is triggered very often, don’t do anything that the user does not expect or that is slow.</p>
<h4 id="TextChangedI"><a href="#TextChangedI" class="headerlink" title="TextChangedI"></a>TextChangedI</h4><p>after a change was made to the text in Insert mode<br>在插入模式更改文本后。<br>After a change was made to the text in the current buffer in Insert mode.<br>Not triggered when the popup menu is visible.<br>Otherwise the same as TextChanged.</p>
<h4 id="ColorScheme"><a href="#ColorScheme" class="headerlink" title="ColorScheme"></a>ColorScheme</h4><p>after loading a color scheme<br>加载一个颜色方案后。<br>|:colorscheme|<br>The pattern is matched against the colorscheme name.</p>
<p><afile> can be used for the name of the actual file where this option was set, and <amatch> for the new colorscheme name.</amatch></afile></p>
<h4 id="RemoteReply"><a href="#RemoteReply" class="headerlink" title="RemoteReply"></a>RemoteReply</h4><p>a reply from a server Vim was received<br>Vim收到来自服务器的回应时。<br>When a reply from a Vim that functions as server was received |server2client()|.<br>The pattern is matched against the {serverid}. <amatch> is equal to the {serverid} from which the reply was sent, and <afile> is the actual reply string.<br>Note that even if an autocommand is defined, the reply should be read with |remote_read()| to consume it.</afile></amatch></p>
<h4 id="QuickFixCmdPre"><a href="#QuickFixCmdPre" class="headerlink" title="QuickFixCmdPre"></a>QuickFixCmdPre</h4><p>before a quickfix command is run<br>quickfix命令运行前。<br>Before a quickfix command is run (|:make|, |:lmake|, |:grep|, |:lgrep|, |:grepadd|, |:lgrepadd|, |:vimgrep|, |:lvimgrep|, |:vimgrepadd|, |:lvimgrepadd|, |:cscope|, |:cfile|, |:cgetfile|, |:caddfile|, |:lfile|, |:lgetfile|, |:laddfile|, |:helpgrep|, |:lhelpgrep|).<br>The pattern is matched against the command being run.<br>When |:grep| is used but ‘grepprg’ is set to “internal” it still matches “grep”.<br>This command cannot be used to set the ‘makeprg’ and ‘grepprg’ variables.<br>If this command causes an error, the quickfix command is not executed.</p>
<h4 id="QuickFixCmdPost"><a href="#QuickFixCmdPost" class="headerlink" title="QuickFixCmdPost"></a>QuickFixCmdPost</h4><p>after a quickfix command is run<br>quickfix命令运行后。<br>Like QuickFixCmdPre, but after a quickfix command is run, before jumping to the first location.<br>For |:cfile| and |:lfile| commands it is run after error file is read and before moving to the first error.<br>See |QuickFixCmdPost-example|.</p>
<h4 id="SessionLoadPost"><a href="#SessionLoadPost" class="headerlink" title="SessionLoadPost"></a>SessionLoadPost</h4><p>after loading a session file<br>加载一个会话文件后。<br>After loading the session file created using the |:mksession| command.</p>
<h4 id="MenuPopup"><a href="#MenuPopup" class="headerlink" title="MenuPopup"></a>MenuPopup</h4><p>just before showing the popup menu<br>显示弹出菜单前。<br>Just before showing the popup menu (under the right mouse button).<br>Useful for adjusting the menu for what is under the cursor or mouse pointer.<br>The pattern is matched against a single character representing the mode:<br>n    Normal<br>v    Visual<br>o    Operator-pending<br>i    Insert<br>c    Command line</p>
<h4 id="CompleteDone"><a href="#CompleteDone" class="headerlink" title="CompleteDone"></a>CompleteDone</h4><p>after Insert mode completion is done<br>插入模式自动补全作用后。<br>Either when something was completed or abandoning completion. |ins-completion|<br>The |v:completed_item| variable contains information about the completed item.</p>
<h4 id="User"><a href="#User" class="headerlink" title="User"></a>User</h4><p>to be used in combination with “:doautocmd”<br>用”:doautocmd”使用组合。<br>Never executed automatically.<br>To be used for autocommands that are only executed with “:doautocmd”.</p>
<h4 id="UserGettingBored"><a href="#UserGettingBored" class="headerlink" title="UserGettingBored"></a>UserGettingBored</h4><p>When the user presses the same key 42 times. Just kidding! :-)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim参考文档内自动命令事件的翻译整理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vim" scheme="http://x8087.github.io/tags/vim/"/>
    
      <category term="技巧" scheme="http://x8087.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="帮助" scheme="http://x8087.github.io/tags/%E5%B8%AE%E5%8A%A9/"/>
    
  </entry>
  
  <entry>
    <title>AVM2概述</title>
    <link href="http://x8087.github.io/2016/09/22/AVM2%E6%A6%82%E8%BF%B0/"/>
    <id>http://x8087.github.io/2016/09/22/AVM2概述/</id>
    <published>2016-09-22T15:38:36.000Z</published>
    <updated>2016-11-26T02:47:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="虚拟机结构"><a href="#虚拟机结构" class="headerlink" title="虚拟机结构"></a>虚拟机结构</h3><h4 id="常量值"><a href="#常量值" class="headerlink" title="常量值"></a>常量值</h4><p>这些值直接出现在ABC文件或者指令编码里。<br>这些类型的重要特征：</p>
<h5 id="int"><a href="#int" class="headerlink" title="int"></a>int</h5><p>这种类型是用来表示一个整数值数。32位符号二进制补码整数值的范围是-2,147,483,648~2,147,483,647(-2^31~2^31-1)，全包含。</p>
<h5 id="uint"><a href="#uint" class="headerlink" title="uint"></a>uint</h5><p>32位无符号二进制补码整数。0~4,294,967,296(2^32)，全包含。</p>
<h5 id="double"><a href="#double" class="headerlink" title="double"></a>double</h5><p>64位双精度浮点数IEEE754中指定的值作为二进制浮点运算IEEE标准。</p>
<h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><p>Unicode字符序列。用UTF-8表示且能只要2^30-1字节长。</p>
<h5 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h5><p>名称空间绑定URI（内部代表一个字符串）特征。单向关系，即只包含一个URI命名空间数据类型。每个命名空间都是一种特殊类型，且是关于特征和类型之间关系的限制。</p>
<h5 id="null"><a href="#null" class="headerlink" title="null"></a>null</h5><p>一个单值表示“没有对象”。</p>
<h5 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h5><p>一个单值表示“没有意义的值”。这个常数值只允许在特定环境。</p>
<p>AVM2利用几个表征值在指令编码和ABC文件为了提供所需尽可能紧凑的编码。<br><a id="more"></a></p>
<h4 id="虚拟机概述"><a href="#虚拟机概述" class="headerlink" title="虚拟机概述"></a>虚拟机概述</h4><p>AVM2中计算是基于执行方法数据环境里的方法体代码，一个本地数据区， 一个常量池，一个针对运行时创建的非基础数据对象的堆，和一个运行时环境。许多数据元素是静态且从ABC文件在启动时读取。</p>
<ul>
<li>方法体代码由指令组成，每条指令用一些方式修改机器状态，或会依靠输入或输出影响外部环境。</li>
<li>方法数据决定怎么使用方法。例如，当方法调用时，默认参数如何替代缺失参数。</li>
<li>方法的本地数据区包括操作数堆栈，范围堆栈和本地寄存器。<ul>
<li>操作数堆栈包含操作数的指令和接收他们的结果。参数被压入堆栈顶部或从栈顶弹出。顶部元素地址总为0，它下面的地址为1，依此类推。堆栈地址不使用除非作为一个明确说明机制。</li>
<li>范围堆栈是运行时环境的一部分，且持有对象当调用名字查找指令执行时被AVM2搜索。指令把元素压进范围堆栈作为异常处理实现的一部分，闭合创建和ActionScript3.0的with声明。</li>
<li>本地寄存器持有参数值，某些情况本地变量和临时变量。</li>
</ul>
</li>
<li>常量池拥有常量值最终由指令流引用：数字，字符串和各种各样的名字。</li>
<li>指令和AVM2能在运行时创建新对象，这些对象分配在堆中。访问堆唯一的方法是通过分配在里面的一个对象。在堆中不再需要的对象最终由AVM2收回。</li>
<li>运行时环境逻辑上包含的对象链与命名这些对象的属性是在运行时查找名字期间发现的位置。名字查找延伸自最里面（最近压入）范围前进到最外层（全局）范围。<br>创建方法闭合会导致当前创建的时候运行时环境在闭合里被捕获；当调用之后闭合，当前产生的范围，将由方法体内的代码扩展。</li>
</ul>
<h4 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h4><p>名字在AVM相当于一个绝对名字和一个或多个命名空间的组合。这些统称为multinames。Multiname条目通常包含一个名字索引和一个命名空间或者命名空间集索引。一些multiname可以有名字和/或命名空间部分在运行时解析。有许多不同类型的multiname如下所述。对象属性总是命名为简单的QName（一对名称和命名空间）。其他类型的multiname用于解析运行时属性。<br>RTQName，RTQNameL和MultinameL被统称为运行时multiname。</p>
<h5 id="QName（Qualified-Name）"><a href="#QName（Qualified-Name）" class="headerlink" title="QName（Qualified Name）"></a>QName（Qualified Name）</h5><p>这是multiname的最简单形式。带有确切一个命名空间的名称，因此QName作为保留名称。QName条目会有一个名称索引，后跟一个命名空间索引。名称索引是字符串常量池里的一个索引，而命名空间索引是命名空间常量池里的一个索引。<br>QName通常用于表示变量名称和类型声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public var s:String;</div></pre></td></tr></table></figure></p>
<p>这段代码将产生两个QName条目，一个用于变量s（public命名空间，名称”s”），一个用于字符串类型（public命名空间，名称”String”）。</p>
<h5 id="RTQName-Runtime-Qualified-Name"><a href="#RTQName-Runtime-Qualified-Name" class="headerlink" title="RTQName(Runtime Qualified Name)"></a>RTQName(Runtime Qualified Name)</h5><p>这是一个运行时QName，命名空间直到运行时才解析。RTQName条目只有名称索引，索引到字符串常量池。命名空间是在运行时确定的。当RTQName的操作数是一个操作码，应该有一个命名空间值在堆栈上。所以当使用RTQName，堆栈顶部的值将弹出作为RTQName的命名空间。RTQName通常用于命名空间在编译时未知的限定名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var ns = getANamespace();</div><div class="line">x = ns::r;</div></pre></td></tr></table></figure></p>
<p>这个代码将为ns::r产生RTQName条目。它将有一个名称“r”和代码产生ns的值压入堆栈。</p>
<h5 id="RTQNameL-Runtime-Qualified-Name-Late"><a href="#RTQNameL-Runtime-Qualified-Name-Late" class="headerlink" title="RTQNameL(Runtime Qualified Name Late)"></a>RTQNameL(Runtime Qualified Name Late)</h5><p>这是一个运行时QName，在运行时解析名称和命名空间。当RTQNameL是一个操作码的操作数，将会有一个名称和命名空间的值在堆栈。这个名称在堆栈上必须为字符串类型，且命名空间在堆栈上必须为命名空间类型。RTQNameL通常用在编译时名称和命名空间两个都不知道的限定名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var x = getAName();</div><div class="line">var ns = getANamespace();</div><div class="line">w = ns::[x];</div></pre></td></tr></table></figure></p>
<p>这个代码将为ns::[x]在常量池里产生RTQNameL条目。它既没有名称也没有命名空间，代码将生成ns和x的值压入堆栈。</p>
<h5 id="Multiname（Multiple-Namespace-Name"><a href="#Multiname（Multiple-Namespace-Name" class="headerlink" title="Multiname（Multiple Namespace Name)"></a>Multiname（Multiple Namespace Name)</h5><p>这是一个带有名称和命名空间集的multiname，命名空间集用来表示命名空间集合，Multiname条目将有一个名称索引紧跟一个命名空间集索引。名称索引是字符串常量池里的一个索引，命名空间集索引是命名空间集常量池里的一个索引。<br>Multiname通常用于非限定名称。在这些情况所有打开命名空间为multiname所用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use namespace t;</div><div class="line">trace(f);</div></pre></td></tr></table></figure></p>
<p>这个代码将为f生成Multiname条目，它将有一个名称“f”和一个所有打开的命名空间的命名空间集（公共命名空间，命名空间t和在环境中打开的任何私有或者内部命名空间）。在运行时f可以解析成任何multiname指定的命名空间。</p>
<h5 id="MultinameL-Multiple-Namespace-Name-Late"><a href="#MultinameL-Multiple-Namespace-Name-Late" class="headerlink" title="MultinameL(Multiple Namespace Name Late)"></a>MultinameL(Multiple Namespace Name Late)</h5><p>这是一个名称在运行时解析的运行时multiname。命名空间集用于表示命名空间集合。MultinameL条目有一个命名空间集索引。命名空间集索引是命名空间集常量池里的一个索引。当MultinameL是一个操作码的操作数时将会有一个名称值在堆栈上。堆栈上的名称值必须为字符串类型。<br>MultinameL通常用于名称在编译时未知的非限定名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use namespace t;</div><div class="line">trace(o[x]);</div></pre></td></tr></table></figure></p>
<p>这个代码将产生一个MultinameL条目。它没有名称，将有一个对环境里所有打开的命名空间的命名空间集。代码将生成x的值压入堆栈，这个值将用作名称。</p>
<h5 id="解析Multiname"><a href="#解析Multiname" class="headerlink" title="解析Multiname"></a>解析Multiname</h5><p>通常，解析multiname的搜索排序是对象的声明特征，它的动态属性与最终原型链。动态属性和原型链搜索只发生在multiname包含公共命名空间（在AS3里动态属性总是在公共命名空间里；如果尝试增加非公有属性会示意一个运行时错误）。如果一个搜索不包括一个或多个这些位置，在接下来的章节文本中指出。否则你可以在排序中假设三个搜索来解析multiname。<br>如果multiname是任何类型的QName，那么QName将解析成相同名称和命名空间的属性的QName。如果没有属性有相同名称和命名空间的QName，QName解析不了。<br>如果multiname有一个命名空间集，那么对象搜索任何名称和multiname名称相同且命名空间匹配multiname命名空间集里的任何命名空间的属性。由于multiname可能有超过一个的命名空间，可以有多个匹配multiname的属性。如果多个属性匹配，由于multiname引用的属性歧义抛出一个TypeError。如果没有属性匹配，那么这对象的multiname解析不了。</p>
<h4 id="方法调用注意"><a href="#方法调用注意" class="headerlink" title="方法调用注意"></a>方法调用注意</h4><p>AVM2中调用一个方法时，第一个参数总是方法中使用的“this”值。所有方法都至少需要1个参数（“this”值），其次是任意声明的参数。<br>当请用[call]属性时，不同类型的闭包行为不同。一个闭包是一个包含方法引用的对象，[call]属性动作不同取决于它是一个函数，方法或者类闭包。一个函数闭包是一个全局方法，不与任何一个类的实例相关联。一个方法闭包包含一个类的实例方法，而且永远记住它的原始“this”值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function f()&#123;&#125;</div><div class="line">var a=f; //a is a function closure</div><div class="line">class C&#123;</div><div class="line">  function m()&#123;&#125;</div><div class="line">  &#125;</div><div class="line">var q = new C();</div><div class="line">var a = q.m; //a is a method closure</div></pre></td></tr></table></figure></p>
<p>如果闭包是一个函数闭包，那么第一个参数传递给[call]是传递给方法并被用作“this”值。如果第一个参数是null或者undefined，那么全局对象将被用作方法的“this”值。<br>如果闭包是一个方法闭包，那么第一个参数传递给[call]将被忽略，方法闭包保存的“this”值将传递给方法作为第一个参数。一个方法闭包记录它的原始“this”值是什么并总是用来代替[call]的第一个参数。</p>
<p>如果闭包是类闭包，且1个参数传递给[call]（除了“this”参数），那么调用被作为类型转换对待，参数将被强制作为闭包所代表的类型。</p>
<h4 id="指令集概要"><a href="#指令集概要" class="headerlink" title="指令集概要"></a>指令集概要</h4><p>本节提供AVM2指令集概述。按照惯例，指令具体数据类型细节被命名带一个后缀，指出操作的数据类型。具体来说，使用下面的后缀：_b(Boolean),_a(any),_i(int),_d(double),_s(string),_u(unsigned),_o(object)。</p>
<h5 id="加载并存储指令"><a href="#加载并存储指令" class="headerlink" title="加载并存储指令"></a>加载并存储指令</h5><p>本地寄存器能使用下面指令访问：<strong>getlocal</strong>,<strong>getlocal0</strong>,getlocal1,getlocal2,getlocal3,setlocal,setlocal0,setlocal1,setlocal2,setlocal3。</p>
<h5 id="自述指令"><a href="#自述指令" class="headerlink" title="自述指令"></a>自述指令</h5><p>算术指令提供完整的数学运算目录。零个，一个或多个通常两个操作数从栈顶移除并将操作结果压回操作栈。<br>加法使用下面之一运行：increment,increament_i,inclocal,inclocal_i,add,add_i。<br>减法使用下面达成：decrement,decrement_i,declocal,declocal_i,subtract,subtract_i。<br>乘法和除法用multiply,multiply_i,divide和modulo实现。为了反转值的符号，可以用negate或者negate_i指令。<br>这里也存在指令集执行栈顶两个条目值比较，用true或者false替代他们。这些包括equals,strictequals,lessthen,lessequals,greaterthan,greaterequals,istype,istypelate和in。</p>
<h5 id="位操作指令"><a href="#位操作指令" class="headerlink" title="位操作指令"></a>位操作指令</h5><p>指令允许值的位操作包括bitnot,bitand,bitor,bitxor,lshift,rshift,urshift。<br>优先执行这些指令，要操作的值转换为一个整数，如果必要的。</p>
<h5 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h5><p>as语言是弱类型语言，对象自由转换成要求完成一个操作所需的任何类型。在某些情况需要明确的转换，这种实例提供coerce指令。这些包括coerce,convert_b,coerce_a,convert_i,convert_d,coerce_s,convert_s,convert_u,convert_o。</p>
<h5 id="对象创建与控制指令"><a href="#对象创建与控制指令" class="headerlink" title="对象创建与控制指令"></a>对象创建与控制指令</h5><p>实体使用下面指令之一创建：newclass,newobject,newarray,newactivation。<br>要求调用一个对象构造指令使用construct,constructsuper,constructprop。</p>
<p>命名空间能使用dxns和dxnslate动态构造。</p>
<h5 id="栈管理指令"><a href="#栈管理指令" class="headerlink" title="栈管理指令"></a>栈管理指令</h5><p>多数指令提供直接访问操作放在堆栈的值。直接压入值的指令包括pushnull,pushundefined,pushtrue,pushfalse,pushnan,pushbyte,pushshort,pushstring,pushint,pushdouble,pushscope,pushnamespace。<br>一个值能使用pop从栈移除，同时dup复制栈顶的值，类似的swap交换栈顶的两个值。</p>
<h5 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h5><p>控制转移指令转移执行一个指令除了立即跟在转移指令后的一个。转移能无条件或者指令基于一个隐式比较操作。<br>条件分支指令包括iflt,ifle,ifnlt,ifnle,ifgt,ifge,ifngt,ifnge,ifeq,ifne,ifstricteq,ifstrictne,iftrue,iffalse。这些指令为了实现比较运行任何所需的类型转换；转换规则在ECMA-262概述。<br>label指令用来标记向后分支指令的目标位置点。因此每个向后分支指令的目标位置应基于label指令。<br>lookupswitch指令提供简洁形式编码多种方法比较表达式。</p>
<h5 id="函数调用与return指令"><a href="#函数调用与return指令" class="headerlink" title="函数调用与return指令"></a>函数调用与return指令</h5><p>这里有多个指令调用函数和方法。call指令实现完全符合ECMA-262规范演绎Function.prototype.call。调用对象实例方法可用callmethod指令。同样的调用类，也知道静态方法，存在callstatic。要调用不在对象上而在它的基类的实例方法使用callsuper。对于作为方法调用并as编译器可以认可这种用例的名称元素，callproperty和callproplex可用。后者是针对属性被调用存在栈上的对象。对于调用的返回值从不使用的情况，callpropvoid和callsupervoid能各自被使用在callproperty和callsuper的地方。</p>
<h5 id="异常指令"><a href="#异常指令" class="headerlink" title="异常指令"></a>异常指令</h5><p>一个异常以编程方式抛出使用throw指令。当碰到一个异常的条件时异常也能由各种AVM指令抛出。<br>try/catch语句在as语言被翻译进一个间隔表与在abc文件指定方法体部分的目标指令。这个表定义了指令遍及的范围，哪些给定的异常类型可能被捕获。因此如果在运行给定的指令集期间一个异常抛出且在异常表里有相关的条目，程序执行将在表里指定的目标指令继续。</p>
<h5 id="调试指令"><a href="#调试指令" class="headerlink" title="调试指令"></a>调试指令</h5><p>不像大多传统运行环境，AVM2的调试场所与直接放在运行流里的一系列指令紧紧相关联。跟踪当前文件名和行号信息debugfile和debugline在指令流的合适点发出。在需要额外的调试细节的情况下，使用调试指令。例如，本地变量的名称由这个机制提供。</p>
<h3 id="AS字节码格式"><a href="#AS字节码格式" class="headerlink" title="AS字节码格式"></a>AS字节码格式</h3><p>as代码语法完整部分由编译器处理进as字节码片段。这些片段由下面定义的abc文件结构描述。abc文件结构由AVM2加载和运行单元使用。abc文件结构描述8位字节块解释。尽管abc文件的名字，内容不需要从文件系统里的文件读取；它能由运行时编译器或者其他工具动态生成。“文件”这个词的使用是历史的。<br>abc文件结构包含原始数据，结构化数据和原始与结构化数据数组。以下部分描述所有数据格式。原始数据以各种方式包括整数和浮点数编码。结构数据，包括abc文件本身，在这里使用一个c结构符号，与单独的命名字段。字段在结构里实际上只是根据它们类型解释的字节序列。顺序存储的字段没有任何填充或对齐。</p>
<h4 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h4><p>多字节原始数据用little-endian顺序存储（较小的有效位先于更大的有效位）。负的整数用二进制补码表示。</p>
<ul>
<li>u8类型表示单字节无符号整数值。</li>
<li>u16类型表示双字节无符号整数值。</li>
<li>s24类型表示3字节符号整数值。</li>
<li>u30类型表示变长编码30位无符号整数值。</li>
<li>u32和s32各自表示变长编码32位无符号和符号整数值。</li>
<li>d64类型定义一个8位IEEE-754浮点值。double值的高位包含符号和上层指数，低位包含有效位最小有效位。</li>
</ul>
<p>变长编码对于u30,u32和s32使用1到5字节，依据值编码大小。每个字节贡献它的低7位给值。如果字节高位（第八）设置了，那么abc文件的下个字节也是值的一部分。在s32的情况，应用符号扩展：编码的最后字节第七位是传送填充编码值的32位。</p>
<h4 id="abcFile"><a href="#abcFile" class="headerlink" title="abcFile"></a>abcFile</h4><p>abcFile结构描述一个运行代码块带有所有它的常量数据，类型描述，代码和元数据。由以下字段构成。<br>minor_version，major_version<br>major_version和minor_version的值是abcFile格式的主要和次要版本号。次要版本号改变表示文件格式改变向后兼容，意义在于一个AVM2的实现还能用于一个旧版本文件。一个主要版本号改变表示一个不兼容对文件格式的调整。<br>当这个概述出版时，主要版本号是46，次要版本号是16.</p>
<p>constant_pool<br>constant_pool是一个变长结构由整数，双精度浮点数，字符串，命名空间，命名空间集和multiname构成。这些常量引用自abcFile结构的其他部分。</p>
<p>method_count, method<br>method_count的值是在method数组里条目的数量。method数组的每个条目是一个变长method_info结构。数组持有这个abcFile里关于每个方法的信息。方法体代码在method_body数组里分开保存。在方法里的一些条目可能没有方法体——这是本地方法的情况，如例。</p>
<p>metadata_count, metadata<br>metadata_count的值是metadata数组里的条目数量。每个元数据条目是一个关联名称到字符串值集的metadata_info结构。</p>
<p>class_count, instance, class<br>class_count的值是在instance和class数组里的条目数量。<br>每个实例条目是一个变长instance_info结构，详细说明由特定类创建的对象实例的特征。<br>每个class条目定义一个类的特征。它被用在结合instance字段获得一个AS类的完整描述。</p>
<p>script_count, script<br>script_count的值是Script数组条件的数量。每个script条目是一个script_info结构，定义这个文件单个脚本的特征。作为上个章节的解释，这个数组最后的条目是abcFile运行的入口点。</p>
<p>method_body_count, method_body<br>method_body_count的值是method_body数组里条目的数量。每个method_body条目含有一个变长method_body_info结构，包含一个单独的方法或函数的指令。</p>
<h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>常量池是一个基于数组条目的块，反射由所有方法使用的常量。每个计算条目（例如，int_count）必须超过对应数组条目数量，且数组的首个条目是元素“1”。对于所有常量池，索引“0”拥有特殊的意义，典型的一个实用的默认值。例如，“0”条目被用来表示空字符串（””），任何命名空间或者任何类型（<em>）依据使用的环境。当“0”拥有一个特殊的意思，在下面的文本描述。<br>如果对于相同实体在这些数组中有多个条目，例如一个名字，AVM可能会或者可能不会认为这是两个相同的条目。当前AVM保证名称标记为属于“private”命名空间被作为唯一的对待。<br>int_count, integer<br>int_count值是在interger数组里的条目数量，加一个。interger数组持有整数常量由字节码的引用。interger数组的“0”条目在abcFile是不存在的；它为了给可选参数和字段初始化提供值的目的表达为0值。<br>unit_count, uinterger<br>同上<br>double_count,double<br>同上，但表达为NaN(Not-a-Number)<br>string_count,string<br>string_count值是在String数组里的条目数量，加一个。string数组持有由编译代码和abcFile的多个其他部分引用的UTF-8编码字符串。除了在程序里描述字符串常量，常量池里的字符串数据被用于多种的名称的描述。string数组的“0”条目在abcFile里是不存在的；在大多数环境它相当于空字符串，但是在其他环境也用来表示“any”名称（在as里作为“</em>”）。<br>namespace_count,namespace<br>同上，“0”不存在，表示“any”<br>ns_set_count,ns_set<br>同上，“0”不存在。<br>nultiname_count,multiname<br>同上，“0”不存在。</p>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>string_info元素以长度和数据格式编码一个16位字符的字符串。每个字符的含义通常被当作是16位Unicode代码点。数据是UTF-8编码。对于Unicode的更多信息，查看unicode.org。</p>
<h5 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h5><p>namespace_info条目定义一个命名空间。命名空间有由字符串数组索引表示的字符串名称和类型。自定义命名空间有类型CONSTANT_Namespace或者CONSTANT_ExplicitNamespace和一个非空名称。系统命名空间有空名称和其他类型之一，且为加载器提供一个意思映射引用到内部实体的这些命名空间。</p>
<p>一个单字节定义以下条目的类型，因此由加载器识别name字段应该怎么解释。name字段是常量池的字符串部分里的一个索引。一个0值表示一个空字符串。下面的表格列出合法的类型值。</p>
<h5 id="Namespace-set"><a href="#Namespace-set" class="headerlink" title="Namespace set"></a>Namespace set</h5><p>一个ns_set_info条目定义一个命名空间集，允许集合作为multiname的定义里的一个单元使用。<br>count字段定义这个条目多少ns被标识，然而每个ns是一个整数，索引常量池内的namespace数组。ns数组里没有条目可能是0。</p>
<h5 id="Multiname"><a href="#Multiname" class="headerlink" title="Multiname"></a>Multiname</h5><p>一个multiname_info条目是一个变长项，用来定义由字节码使用的multiname实体。这里有multiname的多种类型。kind字段当作一个标签：它的值决定加载器怎么查看变长data字段。data字段的内容设计基于独有的kind是下面描述的multiname<em>kind</em>结构。</p>
<p>以“A”结尾的常量（如CONSTANT_QNameA）表示名称的属性</p>
<h6 id="QName"><a href="#QName" class="headerlink" title="QName"></a>QName</h6><p>multiname_kind_QName格式用于CONSTANT_QName和CONSTANT_QNameA类型。</p>
<p>ns和name字段被各自索引到constant_pool条目的namespace和string数组。ns字段为零值指示任何（“<em>”）命名空间，且name字段为零值指示任何（“</em>”）名称。</p>
<h6 id="RTQName"><a href="#RTQName" class="headerlink" title="RTQName"></a>RTQName</h6><p>nultiname_kind_RTQName格式用于CONSTANT_RTQName和CONSTANT_RTQNameA类型。</p>
<p>单个字段，name，是常量池的string数组里的一个索引。一个零值表示任何（“*”）名称。</p>
<h6 id="RTQNameL"><a href="#RTQNameL" class="headerlink" title="RTQNameL"></a>RTQNameL</h6><p>multiname_kind_RTQNameL格式用于CONSTANT_RTQNameL和CONSTANT_RTQNameLA类型。</p>
<p>类型没有关联数据。</p>
<h6 id="Multiname-1"><a href="#Multiname-1" class="headerlink" title="Multiname"></a>Multiname</h6><p>multiname_kind_Multiname格式用于CONSTANT_Multiname和CONSTANT_MultinameA类型。</p>
<p>name字段是string数组里的一个索引，ns_set字段是ns_set数组里的一个索引。name字段为0值指示任何（“*”）名称。ns_set的值不能为0。</p>
<h6 id="MultinameL"><a href="#MultinameL" class="headerlink" title="MultinameL"></a>MultinameL</h6><p>multiname_kind_MultinameL格式用于CONSTANT_MultinameL和CONSTANT_MultinameLA类型。</p>
<p>ns_set字段是常量池ns_set数组里的一个索引。ns_set的值不能为0。</p>
<h4 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h4><p>method_info条目定义单一方法的签名。</p>
<p>param_count, param_type<br>param_count字段是方法支持的正式参数数量；它也表示param_type数组的长度。param_type数组的每个条目是常量池的multiname数组里的一个索引；条目的名称提供相应正式参数的类型的名称。0值表示任何（“*”）类型。</p>
<p>return_type<br>return_type字段是常量池的multiname数组里的一个索引；条目的名称提供方法返回类型的名称。0值表示任何（“*”）类型。</p>
<p>name<br>name字段是常量池的string数组里的一个索引；条目的字符串提供这个方法的名称。如果索引为0，方法没有名字。</p>
<p>flags<br>flag字段是一个位向量，提供方法相关的额外信息。这个位由下面的表格描述。（表格里没有描述的位都设置为0）</p>
<p>options<br>条目只有在flags里设置了HAS_OPTIONAL标志时出现。</p>
<p>param_names<br>条目只有在flags里设置了HAS_PARAM_NAMES标志时出现。</p>
<h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h5><p>option_info参数用来定义方法可选参数的默认值。可选参数数目由option_count获取，必须不为零也不大于闭合的method_info结构的parameter_count字段<br>每个可选值由kind字段构成，表示值表现的类型，val字段是一个常量池的数组条目之一的索引。正确的数组是基于类型的选择。</p>
<h5 id="参数名字"><a href="#参数名字" class="headerlink" title="参数名字"></a>参数名字</h5><p>param_name条目只有当在flags里设置了HAS_PARAM_NAMES位时可用。每个param_info的数组元素是一个常量池的string数组的索引。参数名字条目对外部工具使用单独存在且不由AVM2使用。</p>
<h4 id="metadata-info"><a href="#metadata-info" class="headerlink" title="metadata_info"></a>metadata_info</h4><p>metadata_info条目提供一个嵌入任意键/值对到ABC文件的方法。AVM2将忽略所有这种条目。</p>
<p>name字段是常量池string数组里的一个索引；它为元数据条目提供一个名称。名称字段的值必须不为0。0或更多的项可能与条目相关联；item_count表示按照items数组的项目数。</p>
<p>item_info条目由item_count元素构成，作为索引到常量池string表的键/值对解释。如果key的值为0，这是一个无键的条目且只传递一个值。</p>
<h4 id="Instance"><a href="#Instance" class="headerlink" title="Instance"></a>Instance</h4><p>instance_info条目是用于定义AVM2里一个运行时对象（类实例）的特征。相应的class_info条目用于完整定义一个as3类。</p>
<p>name<br>name字段是常量池的multiname数组里的一个索引；它为类提供一个名称。指定的条目必须为QName。</p>
<p>super_name<br>super_name字段是常量池的multiname数组里的一个索引；它提供这个类的基类的名称，如果有的话。一个零值表示这个类没有基类。</p>
<p>flags<br>flags字段是用于当解释instance_info条目时定义各种选项。它是位向量；定义以下条目。其他位和必须为0。</p>
<p>protectedNs<br>字段只有在flags的CONSTANT_ProtectedNs位设置时出现。它是常量池的namespace数组的一个索引且作为这个类的保护命名空间识别命名空间。</p>
<p>intrf_count, interface<br>intrf_count字段的值是interfac数组里的条目数。interface数组包含常量池里的multiname数组的目录；引用名称指定这个类的接口实现。没有索引可能为0。</p>
<p>iinit<br>这是abcFile的method数组里的一个索引；它引用方法无论何时这个类对构造调用。这个方法有时被称为初始化一个实例。</p>
<p>trait_count, trait<br>trait_count值是在trait数组里的元素数。trait数组定义类实例的特征集。下一部分定义traits_info结构的方法。</p>
<h4 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h4><p>一个特征是一个对象或类的确定属性；它拥有一个名称，类型和一些关联数据。traits_info结构绑定这些数据</p>
<p>name<br>名称字段是常量池的multiname数组的一个索引；它为特征提供一个名称。值不能为0，且multiname条目指定必须为一个QName。</p>
<p>kind<br>kind字段包含两个4位字段。低4位决定这个特征的类型。高4位由一个位向量构成提供特征的属性。参见以下表格和完整描述部分。</p>
<p>data<br>data字段的解释取决于特征的类型，由kind字段的低4位提供。参考以下完整描述。</p>
<p>metadata_count, metadata</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;虚拟机结构&quot;&gt;&lt;a href=&quot;#虚拟机结构&quot; class=&quot;headerlink&quot; title=&quot;虚拟机结构&quot;&gt;&lt;/a&gt;虚拟机结构&lt;/h3&gt;&lt;h4 id=&quot;常量值&quot;&gt;&lt;a href=&quot;#常量值&quot; class=&quot;headerlink&quot; title=&quot;常量值&quot;&gt;&lt;/a&gt;常量值&lt;/h4&gt;&lt;p&gt;这些值直接出现在ABC文件或者指令编码里。&lt;br&gt;这些类型的重要特征：&lt;/p&gt;
&lt;h5 id=&quot;int&quot;&gt;&lt;a href=&quot;#int&quot; class=&quot;headerlink&quot; title=&quot;int&quot;&gt;&lt;/a&gt;int&lt;/h5&gt;&lt;p&gt;这种类型是用来表示一个整数值数。32位符号二进制补码整数值的范围是-2,147,483,648~2,147,483,647(-2^31~2^31-1)，全包含。&lt;/p&gt;
&lt;h5 id=&quot;uint&quot;&gt;&lt;a href=&quot;#uint&quot; class=&quot;headerlink&quot; title=&quot;uint&quot;&gt;&lt;/a&gt;uint&lt;/h5&gt;&lt;p&gt;32位无符号二进制补码整数。0~4,294,967,296(2^32)，全包含。&lt;/p&gt;
&lt;h5 id=&quot;double&quot;&gt;&lt;a href=&quot;#double&quot; class=&quot;headerlink&quot; title=&quot;double&quot;&gt;&lt;/a&gt;double&lt;/h5&gt;&lt;p&gt;64位双精度浮点数IEEE754中指定的值作为二进制浮点运算IEEE标准。&lt;/p&gt;
&lt;h5 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; class=&quot;headerlink&quot; title=&quot;string&quot;&gt;&lt;/a&gt;string&lt;/h5&gt;&lt;p&gt;Unicode字符序列。用UTF-8表示且能只要2^30-1字节长。&lt;/p&gt;
&lt;h5 id=&quot;namespace&quot;&gt;&lt;a href=&quot;#namespace&quot; class=&quot;headerlink&quot; title=&quot;namespace&quot;&gt;&lt;/a&gt;namespace&lt;/h5&gt;&lt;p&gt;名称空间绑定URI（内部代表一个字符串）特征。单向关系，即只包含一个URI命名空间数据类型。每个命名空间都是一种特殊类型，且是关于特征和类型之间关系的限制。&lt;/p&gt;
&lt;h5 id=&quot;null&quot;&gt;&lt;a href=&quot;#null&quot; class=&quot;headerlink&quot; title=&quot;null&quot;&gt;&lt;/a&gt;null&lt;/h5&gt;&lt;p&gt;一个单值表示“没有对象”。&lt;/p&gt;
&lt;h5 id=&quot;undefined&quot;&gt;&lt;a href=&quot;#undefined&quot; class=&quot;headerlink&quot; title=&quot;undefined&quot;&gt;&lt;/a&gt;undefined&lt;/h5&gt;&lt;p&gt;一个单值表示“没有意义的值”。这个常数值只允许在特定环境。&lt;/p&gt;
&lt;p&gt;AVM2利用几个表征值在指令编码和ABC文件为了提供所需尽可能紧凑的编码。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x8087.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>man Wget</title>
    <link href="http://x8087.github.io/2015/11/27/man-Wget/"/>
    <id>http://x8087.github.io/2015/11/27/man-Wget/</id>
    <published>2015-11-27T06:20:40.000Z</published>
    <updated>2016-11-26T03:07:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Wget命令"><a href="#Wget命令" class="headerlink" title="Wget命令"></a>Wget命令</h3><p>wget [option]… [URL]…</p>
<p>wget命令用来从指定的URL下载文件。<br>wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，<br>如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。<br>如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。<br>这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>
<p>Wget能根据HTML,XHTML和CSS页面，创建远程网站的本地版本，完整重建原始站点的目录结构。这个有时候称为“递归下载”。</p>
<a id="more"></a>
<h4 id="基本启动选项"><a href="#基本启动选项" class="headerlink" title="基本启动选项"></a>基本启动选项</h4><h5 id="V"><a href="#V" class="headerlink" title="-V"></a>-V</h5><h6 id="–version"><a href="#–version" class="headerlink" title="–version"></a>–version</h6><p>显示Wget版本</p>
<h5 id="h"><a href="#h" class="headerlink" title="-h"></a>-h</h5><h6 id="–help"><a href="#–help" class="headerlink" title="–help"></a>–help</h6><p>打印所有Wget命令行选项帮助信息描述</p>
<h5 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h5><h6 id="–background"><a href="#–background" class="headerlink" title="–background"></a>–background</h6><p>启动后立即转到后台。如果没有经由-o选项指定输出文件，输出重新调配到wget-log。</p>
<h5 id="e-command"><a href="#e-command" class="headerlink" title="-e command"></a>-e command</h5><p>–execute command<br>把命令作为.wgetrc的一部分执行。这样的命令将在.wgetrc的命令后执行，因而优先于它们。如果需要指定更多wgetrc命令，使用多个-e实例。</p>
<h4 id="记录和输入文件选项"><a href="#记录和输入文件选项" class="headerlink" title="记录和输入文件选项"></a>记录和输入文件选项</h4><h5 id="o-logfile"><a href="#o-logfile" class="headerlink" title="-o logfile"></a>-o logfile</h5><p>–output-file=logfile<br>记录所有信息到logfile。信息通常向标准错误报告。</p>
<h5 id="a-logfile"><a href="#a-logfile" class="headerlink" title="-a logfile"></a>-a logfile</h5><p>–append-output=logfile<br>添加到logfile。和-o一样，只不过它附加到logfile替代重写旧的记录文件。如果logfile不存在，创建新文件。</p>
<h5 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h5><p>–debug<br>打开调试输出，意味许多对Wget开发者重要的消息如果没有正确地工作。你的系统管理员可能选择编译Wget没有调试支持，使-d不能工作。请注意：带调试支持编译总是安全的——Wget带调试支持编译不打印任何调试信息除非使用-d请求。</p>
<h5 id="q"><a href="#q" class="headerlink" title="-q"></a>-q</h5><p>–quiet<br>关闭Wget输出。</p>
<h5 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h5><p>–verbose<br>打开详细输出，带所有可获取的数据。默认输出是详细。</p>
<h5 id="nv"><a href="#nv" class="headerlink" title="-nv"></a>-nv</h5><p>–no-verbose<br>关闭详细，不变成完全沉默（使用-q）。意味错误信息和基本消息仍然打印。</p>
<h5 id="–report-speed-type"><a href="#–report-speed-type" class="headerlink" title="–report-speed=type"></a>–report-speed=type</h5><p>作为type的输出带宽。只接受值bits。</p>
<h5 id="i-file"><a href="#i-file" class="headerlink" title="-i file"></a>-i file</h5><p>–input-file=file<br>从本地或者外部file读取URL。如果-指定作为file，从标准输入读取URL。（使用./-从字面上命名为-的文件读取。）</p>
<p>如果使用这个功能，没有URL需要呈现在命令行。如果URL在命令行和输入文件上两个都有，命令行将首先读取。如果–force-html未指定，则文件应该由一系列URL组成，每行一个。</p>
<p>然而，如果你指定–force-html，文档将作为html看待。这种情况你可能存在相对链接的问题，你可以通过添加“<base href="url">”到文档或者在命令行指定–base=url指定来解决问题。</p>
<p>如果文件是外部的，如果文档的Content-Type匹配text/html将自动地作为html对待。此外，文件路径将默认作为基础href如果没有指定。</p>
<h5 id="F"><a href="#F" class="headerlink" title="-F"></a>-F</h5><p>–force-html<br>当输入从文件读取时，强制它当作html文件对待。这允许你从本地磁盘存在的html文件检索相对链接，添加“<base href="url">”到HTML，或者使用–base命令行选项。</p>
<h5 id="B-URL"><a href="#B-URL" class="headerlink" title="-B URL"></a>-B URL</h5><p>–base=URL<br>解决相对链接使用URL作为参考点，当从HTML文件读取链接通过-i/–input-file选项时（与–force-html，或者当输入文件是从服务器远程取得描述成HTML）。这相当于在HTML输入文件里存在“BASE”标签，用URL作为“href”属性的值。</p>
<p>例如，如果指定<a href="http://foo/bar/a.html为URL，Wget从输入文件读取../baz/b.html，将解析成http://foo/baz/b.html。" target="_blank" rel="external">http://foo/bar/a.html为URL，Wget从输入文件读取../baz/b.html，将解析成http://foo/baz/b.html。</a></p>
<h5 id="–config-FILE"><a href="#–config-FILE" class="headerlink" title="–config=FILE"></a>–config=FILE</h5><p>指定你希望使用的启动文件路径。</p>
<h4 id="下载选项"><a href="#下载选项" class="headerlink" title="下载选项"></a>下载选项</h4><h5 id="–bind-address-ADDRESS"><a href="#–bind-address-ADDRESS" class="headerlink" title="–bind-address=ADDRESS"></a>–bind-address=ADDRESS</h5><p>当制作客户端TCP/IP连接时，绑定到在本地机器上的ADDRESS。ADDRESS可以指定为主机名或者IP地址。如果你的机器被限制多个IP这个选项非常有用。</p>
<h5 id="t-number"><a href="#t-number" class="headerlink" title="-t number"></a>-t number</h5><p>–tries=number<br>设置尝试次数为number。指定0或者inf为无限尝试。默认是尝试20次，除非遇到致命错误像“connection refused”或者“not found”（404）则不尝试。</p>
<h5 id="O-file"><a href="#O-file" class="headerlink" title="-O file"></a>-O file</h5><p>–output-document=file<br>文档将不会写到相应的文件，但是所有将串联一起并写到file。如果-作为file使用，文档将打印到标准输出，停用链接转换。（使用./-打印字面上命名为-的文件）<br>使用-O不是简单意味“使用file名字替代URL中的一个；”当然，它类似于shell重定向：wget -O file <a href="http://foo是打算工作像wget" target="_blank" rel="external">http://foo是打算工作像wget</a> -O - <a href="http://foo&gt;file；file将立即缩短，所有下载内容将被写进那里。" target="_blank" rel="external">http://foo&gt;file；file将立即缩短，所有下载内容将被写进那里。</a></p>
<p>为些，-N（时间戳检查）不支持与-O组合：因为file总是最近创建，它将总是有最新的时间戳。如果使用这个组合会发布警告。</p>
<p>类似的，使用-r或者-p与-O可能不会如你期望的工作：Wget不会只下载第一个文件归档然后下载其他他们的普通名字：所有下载内容将放入file。这个在1.11版本信用，但是在1.11.2版本恢复（带警告），在某些情况下这个行为实际上有一些用处。</p>
<p>注意这个与-k组合只允许在下载单个文档时，在这种情况它将只转换所有相对URI为外部的；-k使对多个URI当他们所有被下载到单个文件时没有作用；-k仅当输出是一个正则文件能被用。</p>
<h5 id="nc"><a href="#nc" class="headerlink" title="-nc"></a>-nc</h5><p>–no-clobber<br>如果文件被下载超过一次到相同的目录，Wget的行为取决于几个选项，包含-nc。在某些情况，本地文件将被重写，或者覆盖，根据重复下载。另一些情况它将被保存。</p>
<p>当运行Wget没有-N，-nc，-r或者-p，下载相同文件到相同目录将导致原始file副本被保存且第二个副本被命名为file.1。如果文件被再下载，第三个副本将被命名为file.2，等等。（这也是用-nd的行为，甚至在-r或者-p作用下。）当-nc指定，这个行为被抑止，且Wget将拒绝下载新的file副本。因此，“no-clobber”在这个模式实际上是误称——它没有重写而是防止（如数字后缀就已经是防止重写），而宁可说是多个版本保存来防止。</p>
<p>当运行Wget带-r或者-p，但是没有-N，-nd或者-nc，重新下载文件将导致新的副本简单地覆盖旧的。添加-nc将防止这种行为，反而引起原始版本被保存，而其他服务器上新的副本被忽略。</p>
<p>当运行Wget带-N，带或者没有-r或者-p，决定是否下载新的文件副本取决于本地与远程文件的时间戳和大小。-nc可能不被指定在-N的同时。</p>
<p>注意当-nc指定，文件带后缀.html或者.htm将被从本地磁盘加载并解析如他们从网络检索到。</p>
<h5 id="–backups-backups"><a href="#–backups-backups" class="headerlink" title="–backups=backups"></a>–backups=backups</h5><p>写文件前，通过添加一个.1后缀到文件名备份存在的文件。这样的备份文件循环为.2，.3等等，一直到backups（并且丢失那边）。</p>
<h5 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h5><p>–continue</p>
<p>继续获取部分下载文件。当你需要完成上个Wget实例，或者另一个程序开始的下载时是有用的。例如：<br>wget -c ftp://sunsite.doc.ic.ac.uk/ls-lR.Z<br>如果当前目录有文件命名为ls-lR.z，Wget将假定它是远程文件的第一部分，询问服务器从等于本地文件长度偏移数继续恢复。</p>
<p>注意如果你只想当前Wget调用重新尝试下载连接中途丢失的文件不需要指定选项。这个是默认行为。-c只影响下载恢复开始在Wget调用之前的，本地文件仍然闲置的。</p>
<p>没有-c，先前的例子将只下载远程文件到ls-lR.z.1，保留截断的ls-lR.z文件。</p>
<p>Wget1.7开始，如果你在非空文件上用-c，它的结果是服务器不支持继续下载，Wget将拒绝从暂时开始下载，那个将有效地破坏存在内容。如果你真的需要从暂时开始下载，移除文件。</p>
<p>也是Wget1.7开始，如果你在一个文件大小和服务器上大小相等的文件上用-c，Wget将拒绝下载并打印解释的信息。同样的当服务器上的文件比本地的小时（大概因为它自从你的上次下载尝试后在服务器上被改变）——因为“继续”没有意义，没有下载发生。</p>
<p>另一方面，在使用-c时，任何文件服务器上比本地大会被认为是不安全下载并下载合适的（length(remote)-length(local)）字节附加到本地文件的尾端。这个行为在某些情况能令人满意的——例如，你能用wget -c下载恰好添加到数据集合或者记录文件的新部分。</p>
<p>然而，如果文件在服务器上变大是因为改变了，与附加正好相对，你将以一个混乱的文件结束。Wget没有办法核实核实本地文件是真的远程文件的有效前缀。你需要特别小心当-c与-r结合使用时，因为每个文件将被认为是“不安全下载”候选。</p>
<p>另一个会得到混乱的文件的例子是你尝试用-c，如果有一个差劲的HTTP代理插入一段“transfer interrupted”字符串到本地文件。将来可能添加一个“rollback”选项处理这种情况。</p>
<p>注意-c只工作在支持“Range”头的FTP服务器和HTTP服务器。</p>
<h5 id="–start-pos-OFFSET"><a href="#–start-pos-OFFSET" class="headerlink" title="–start-pos=OFFSET"></a>–start-pos=OFFSET</h5><p>在从零开始的位置OFFSET开始下载。偏移可能用字节表示，千字节带“k”后缀，兆字节带“m”后缀，等等。</p>
<p>–start-pos有更高的优先级超过–continue。当–start-pos和–continue两个指定时，wget发出一个警告并当作缺少–continue处理。</p>
<p>服务器必需支持继续下载，否则–start-pos不能超作用。详细参考-c。</p>
<h5 id="–progress-type"><a href="#–progress-type" class="headerlink" title="–progress=type"></a>–progress=type</h5><p>选择你希望使用的进度指示器类型。合法的指示器是“dot”和“bar”。<br>默认使用“bar”指示器。画一个ASCII进度条图形（a.k.a “thermometer”(温度计)display）指示检索状态。如果输出不是TTY，默认使用“dot”条。</p>
<p>用–progress=dot切换到“dot”显示。在屏幕上打印点来跟踪检索，每个点表示确定数量的下载数据。</p>
<p>进度类型type也能带一到多个参数。参数基于选择的类型改变。type的参数传递添加到类型用冒号（:）分隔像这样：–progress=type:parameter1:parameter2。</p>
<p>当使用点检索，你可以设定指定类型的样式如dot:style。不同样式对一个点分配不同意义。默认样式每个点表示1K，一组10点且一行50个点。”binary”样式更加“可算（Computer）”——像定向——8<br>k点，16点串48点每行（384k行）。“mega”样式适合下载大文件——每点表示64k检索，8点一串，48点每行（每行含3M）。如果“mega”不够则使用“giga”样式——每点表示1M检索，8点一串，32点每行（每行含32M）。</p>
<p>用–progress=bar，有两个可能参数，force与noscroll。</p>
<p>当输出不是TTY，进度条总是回退到“点”，甚至调用wget时传入–progress=bar。这个行为能被覆盖强制“bar”输出使用“force”参数如–progress=bar::force。</p>
<p>默认，如果条样式进度条被下载的文件文件名超出分配它显示的最大长度，文件名从左向右滚动。在某些情况，像–progress=bar:force，可能不需要进度条滚动文件名。传入“noscroll”参数，wget能强制显示尽可能多地显示文件名而不滚动。</p>
<p>注意你能在.wgetrc使用“grogress”命令设置默认样式。这个设定能被命令行覆盖。例如，例如强制条输出不滚动，使用–progress=bar:force:noscroll。</p>
<h5 id="–show-progress"><a href="#–show-progress" class="headerlink" title="–show-progress"></a>–show-progress</h5><p>强制wget在任何冗长里显示进度条。</p>
<p>默认，wget只在冗长模式显示进度条。然而你可能，需要wget在屏幕上结合其他模式显示进度条像–no-verbose或–quiet。这常常是一个要求属性当调用wget下载几个小/大文件时。在这种情况，wget能简单调用参数在屏幕上获取更加干净的输出。</p>
<p>当这个选项和–logfile选项一起使用时也强制进度条打印到标准错误（stderr）</p>
<h5 id="N"><a href="#N" class="headerlink" title="-N"></a>-N</h5><p>–timestamping<br>开启时间戳。</p>
<p>–no-use-server-timestamps<br>不设置本地文件服务器上的时间戳。</p>
<p>默认，当下载一个文件时，它的时间戳是设置为匹配远程文件。这允许在wget子序列调用上使用–timestamping。然而，它有时是有用的，根据本地文件时间戳判断它实际什么时候下载。由此目的，提供–no-use-server-timestamps选项</p>
<h5 id="S"><a href="#S" class="headerlink" title="-S"></a>-S</h5><h6 id="–server-response"><a href="#–server-response" class="headerlink" title="–server-response"></a>–server-response</h6><p>打印HTTP服务器发送的头部和FTP服务器发送的答复。</p>
<h6 id="–spider"><a href="#–spider" class="headerlink" title="–spider"></a>–spider</h6><p>当使用这个选项调用时，wget表示为网络爬虫，意味着不下载页面，只是检查它们。例如，你能使用Wget检查你的书签：<br>wget –spider –force-html -i bookmarks.html<br>Wget的这个功能需要做更多接近实用的真实网络爬虫。</p>
<h5 id="T-seconds"><a href="#T-seconds" class="headerlink" title="-T seconds"></a>-T seconds</h5><p>–timeout=seconds<br>设置网络超时为seconds秒。这等于指定–dns-timeout，–connect-timeout与–read-timeout所有同时。</p>
<p>当与网络交互时，Wget能检查超时并当花费太长时间时终止操作。这样防止像读取挂起与无限连接的异常。默认唯一可行的超时是900秒超时读取。设置超时为0完全禁止它。除非你知道你要做什么，最好不要改变默认超时设置。</p>
<p>所有超时相关选项接受小数值，和微秒值一样。例如，0.1秒是合法的（虽然不明智）超时选项。微秒超时对检查服务器响应时间或测试潜在的网络是有用的。</p>
<p>–dns-timeout=seconds<br>设置DNS检查超时为seconds秒。DNS检查没有在指定时间完成将失败。默认，DNS检查不会超时，除了系统库实现。</p>
<p>–connect-timeout=seconds<br>设置连接超时为seconds秒。TCP建立连接时间太长将终止。默认，没有连接超时，除了系统库实现。</p>
<p>–read-timeout=seconds<br>设置读取（写入）超时为seconds秒。这个超时“时间”参考空闲时间：如果，在下载的任何点，没有数据接收超过指定数目的秒数，读取失败且下载重新开始。这个选项不直接影响整个下载的持续。</p>
<p>当然，远程服务器可能选择早于这个选项所需时间终止连接。默认读取超时是900秒。</p>
<p>–limit-rate=amount<br>限制下载速度这amount字节每秒。总数可能用字节，千字节带k后缀，或者兆字节带m后缀表达。例如，–limit-rate=20k将限制检索速度为20KB/s。当你不需要Wget耗尽整个可获得的带宽时，无论什么原因，这是有用的。</p>
<p>这个选项允许使用小数，通常结合强大的后缀；例如，–limit-rate=2.5k是合法值。</p>
<p>注意Wget通过睡眠合适的数量的时间实现网络读取后比特定速率花费更少的时间。最终这个策略引起TCP传输减速到接近于指定速率。然而，它达到平衡可能花费一些时间，所以不要惊奇非常小的文件限制速率没有工作好。</p>
<p>-w seconds<br>–wait=seconds<br>在检索时等待指定秒数。推荐使用这个选项，它较少频繁地制造请求减轻服务器加载。代替秒，时间能使用“m”后缀指定分钟，“h”后缀指定小时，或者“d”指定天数。</p>
<p>如果网络或者目标主机停机，为其指定一个大的值是有用的，以便Wget能等待足够长合理地期待网络错误在重试之前被修正。这个功能指定的等待时间间隔受“–random-wait”影响，参见。</p>
<p>–waitretry=seconds<br>如果你不需要Wget在每个检索之间等待，但是只在失败下载重试之间，你能用这个选项。Wget将用线性补偿，在给定的文件首次失败后等待1秒，接着第二次失败后等待2秒，直到你指定的最大秒数。</p>
<p>默认，Wget将采用值10秒。</p>
<p>–random-wait<br>一些网站能通过记录来分析定义像Wget的检索程序，寻找在请求之间的时间统计上象征的相似之处。这选项引起请求之间的时间在0.5到1.5*wait秒之间变化，wait是使用–wait选项指定的，为了从这样的分析屏蔽Wget的存在。</p>
<p>–no-proxy<br>不使用代理，甚至合适的*_proxy环境变量定义了。</p>
<h5 id="Q-quota"><a href="#Q-quota" class="headerlink" title="-Q quota"></a>-Q quota</h5><h6 id="–quota-quota"><a href="#–quota-quota" class="headerlink" title="–quota=quota"></a>–quota=quota</h6><p>指定自动检索的下载配额。值可以用字节（默认），千字节（后缀k），或者兆字节（后缀m）。</p>
<p>注意配额从不影响下载单个文件。所以如果你指定wget -Q10k ftp://wuarchive.wustl.edu/ls-lR.gz, 所有ls-lR.gz被下载。同样即使几个命令行上指定的URL。然而，配额是受遵守的当递归检索或者从输入文件。因此你可以安全地输入wget -Q2m -i sites—下载当配额超过时中止。</p>
<p>设置配额为0或者inf不限制下载配额。</p>
<h6 id="–no-dns-cache"><a href="#–no-dns-cache" class="headerlink" title="–no-dns-cache"></a>–no-dns-cache</h6><p>关闭DNS缓存检查。通常，Wget记得它从DNS查找的IP地址，所以它不必重复地联系DNS服务器同样的（通常很小的）主机设置它所检索的。这个缓存只存在在内存里；新的Wget运行将再次联系DNS。</p>
<p>然而，它已被报告，在某些情况下，它缓存主机名字是不可取的，即使一个简短运行程序持续时间，像Wget。使用此选项wget发布一个新的DNS查找（更准确地说，一个新的调用“gethostbyname”或“getaddrinfo”）每次做一个新的连接</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Wget命令&quot;&gt;&lt;a href=&quot;#Wget命令&quot; class=&quot;headerlink&quot; title=&quot;Wget命令&quot;&gt;&lt;/a&gt;Wget命令&lt;/h3&gt;&lt;p&gt;wget [option]… [URL]…&lt;/p&gt;
&lt;p&gt;wget命令用来从指定的URL下载文件。&lt;br&gt;wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，&lt;br&gt;如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。&lt;br&gt;如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。&lt;br&gt;这对从那些限定了链接时间的服务器上下载大文件非常有用。&lt;/p&gt;
&lt;p&gt;Wget能根据HTML,XHTML和CSS页面，创建远程网站的本地版本，完整重建原始站点的目录结构。这个有时候称为“递归下载”。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x8087.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Wget" scheme="http://x8087.github.io/tags/Wget/"/>
    
      <category term="unix" scheme="http://x8087.github.io/tags/unix/"/>
    
      <category term="linux" scheme="http://x8087.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>图解式学习法</title>
    <link href="http://x8087.github.io/2015/09/14/%E5%9B%BE%E8%A7%A3%E5%BC%8F%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
    <id>http://x8087.github.io/2015/09/14/图解式学习法/</id>
    <published>2015-09-14T13:07:58.000Z</published>
    <updated>2016-11-23T15:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="5-提高“自身实力”的个人习惯"><a href="#5-提高“自身实力”的个人习惯" class="headerlink" title="5. 提高“自身实力”的个人习惯"></a>5. 提高“自身实力”的个人习惯</h4><a id="more"></a>
<h5 id="5-1-目标明确"><a href="#5-1-目标明确" class="headerlink" title="5.1 目标明确"></a>5.1 目标明确</h5><h6 id="5-1-1-强烈的动机"><a href="#5-1-1-强烈的动机" class="headerlink" title="5.1.1 强烈的动机"></a>5.1.1 强烈的动机</h6><ul>
<li>有具体期望</li>
</ul>
<h6 id="5-1-2-目标再大也不嫌大"><a href="#5-1-2-目标再大也不嫌大" class="headerlink" title="5.1.2 目标再大也不嫌大"></a>5.1.2 目标再大也不嫌大</h6><ul>
<li>热爱学习，钻研属于自己的学习法</li>
</ul>
<h5 id="5-2-从失败中学到些什么"><a href="#5-2-从失败中学到些什么" class="headerlink" title="5.2 从失败中学到些什么"></a>5.2 从失败中学到些什么</h5><h6 id="5-2-1-是谁创立了谷歌"><a href="#5-2-1-是谁创立了谷歌" class="headerlink" title="5.2.1 是谁创立了谷歌"></a>5.2.1 是谁创立了谷歌</h6><ul>
<li>方案没有成功，后补方案成功的例子非常多</li>
</ul>
<h6 id="5-2-2-失败次数的增加，等于成功几率的提高"><a href="#5-2-2-失败次数的增加，等于成功几率的提高" class="headerlink" title="5.2.2 失败次数的增加，等于成功几率的提高"></a>5.2.2 失败次数的增加，等于成功几率的提高</h6><ul>
<li>越失败，之后成功的几率就越大</li>
</ul>
<h6 id="5-2-3-摆脱萎靡不振最有效的方法"><a href="#5-2-3-摆脱萎靡不振最有效的方法" class="headerlink" title="5.2.3 摆脱萎靡不振最有效的方法"></a>5.2.3 摆脱萎靡不振最有效的方法</h6><ul>
<li>从失败中不断学习、不断积累的结果。</li>
</ul>
<h5 id="5-3-“听”比“说”更重要"><a href="#5-3-“听”比“说”更重要" class="headerlink" title="5.3 “听”比“说”更重要"></a>5.3 “听”比“说”更重要</h5><h6 id="5-3-1-揣测出题者的意图"><a href="#5-3-1-揣测出题者的意图" class="headerlink" title="5.3.1 揣测出题者的意图"></a>5.3.1 揣测出题者的意图</h6><h6 id="5-3-2-考试是一次沟通交流"><a href="#5-3-2-考试是一次沟通交流" class="headerlink" title="5.3.2 考试是一次沟通交流"></a>5.3.2 考试是一次沟通交流</h6><ul>
<li>把握对方意图的能力，是寻找隐藏在对方问题中的不安和疑问，对方话语背后的感情、需求的能力。</li>
</ul>
<h6 id="5-3-3-为何成功者多善聆听"><a href="#5-3-3-为何成功者多善聆听" class="headerlink" title="5.3.3 为何成功者多善聆听"></a>5.3.3 为何成功者多善聆听</h6><ul>
<li>提问者的意图何在？</li>
</ul>
<h5 id="5-4-觉得不错就马上行动"><a href="#5-4-觉得不错就马上行动" class="headerlink" title="5.4 觉得不错就马上行动"></a>5.4 觉得不错就马上行动</h5><h6 id="5-4-1-尽快投入“实战”"><a href="#5-4-1-尽快投入“实战”" class="headerlink" title="5.4.1 尽快投入“实战”"></a>5.4.1 尽快投入“实战”</h6><ul>
<li>发现好榜样、好思路，一定会学着做。</li>
</ul>
<h6 id="5-4-2-制订计划后，试试才知道行不行"><a href="#5-4-2-制订计划后，试试才知道行不行" class="headerlink" title="5.4.2 制订计划后，试试才知道行不行"></a>5.4.2 制订计划后，试试才知道行不行</h6><ul>
<li>“再好的想法，不付诸实践就没有成功，也没有失败”</li>
<li>与其劳心劳力去守着那个想法，不如尽快把想法付诸实践。</li>
</ul>
<h5 id="5-5-积极质疑“常识”"><a href="#5-5-积极质疑“常识”" class="headerlink" title="5.5 积极质疑“常识”"></a>5.5 积极质疑“常识”</h5><h6 id="5-5-1-有时候需要大胆一些"><a href="#5-5-1-有时候需要大胆一些" class="headerlink" title="5.5.1 有时候需要大胆一些"></a>5.5.1 有时候需要大胆一些</h6><ul>
<li>越是周围反对的、大胆的想法，可能才是这个世界上最有价值的想法。</li>
<li>大家都去反对，可能就是最值得去做的事。</li>
</ul>
<h6 id="5-5-2-从其他视角看总是的态度"><a href="#5-5-2-从其他视角看总是的态度" class="headerlink" title="5.5.2 从其他视角看总是的态度"></a>5.5.2 从其他视角看总是的态度</h6><ul>
<li>不要小看大胆和与众不同的人，质疑一下自己的固有观念，然后从其他视角出发，寻找各种可能性。</li>
</ul>
<h5 id="5-6-知道自己擅长什么，不擅长什么"><a href="#5-6-知道自己擅长什么，不擅长什么" class="headerlink" title="5.6 知道自己擅长什么，不擅长什么"></a>5.6 知道自己擅长什么，不擅长什么</h5><h6 id="5-6-1-成功策略第一步"><a href="#5-6-1-成功策略第一步" class="headerlink" title="5.6.1 成功策略第一步"></a>5.6.1 成功策略第一步</h6><ul>
<li>站在旁观者的角度看自己。</li>
<li>拥有审视自我的眼光，有利于提高自我管理。</li>
</ul>
<h6 id="5-6-2-改变他人不如改变自己"><a href="#5-6-2-改变他人不如改变自己" class="headerlink" title="5.6.2 改变他人不如改变自己"></a>5.6.2 改变他人不如改变自己</h6><ul>
<li>改变不了他人，而自己的想法和行动却可以改变</li>
</ul>
<h5 id="5-7-一点一点完善自己"><a href="#5-7-一点一点完善自己" class="headerlink" title="5.7 一点一点完善自己"></a>5.7 一点一点完善自己</h5><h6 id="5-7-1-改善自己的知识生产力"><a href="#5-7-1-改善自己的知识生产力" class="headerlink" title="5.7.1 改善自己的知识生产力"></a>5.7.1 改善自己的知识生产力</h6><ul>
<li>能够依靠的只有自己的知识生产力。</li>
</ul>
<h6 id="5-7-2-“改善力”不会背叛你"><a href="#5-7-2-“改善力”不会背叛你" class="headerlink" title="5.7.2 “改善力”不会背叛你"></a>5.7.2 “改善力”不会背叛你</h6><ul>
<li>PDCA Plan（计划）、Do（实行）、Check（验证）、Act（改正）</li>
</ul>
<h6 id="5-7-3-日行一善"><a href="#5-7-3-日行一善" class="headerlink" title="5.7.3 日行一善"></a>5.7.3 日行一善</h6><ul>
<li>对于知识生产力的改善来说，时间越长收效越大。</li>
</ul>
<h5 id="5-8-倒着计算时间"><a href="#5-8-倒着计算时间" class="headerlink" title="5.8 倒着计算时间"></a>5.8 倒着计算时间</h5><h6 id="5-8-1-事情不管多小，都要给它一个完成的期限"><a href="#5-8-1-事情不管多小，都要给它一个完成的期限" class="headerlink" title="5.8.1 事情不管多小，都要给它一个完成的期限"></a>5.8.1 事情不管多小，都要给它一个完成的期限</h6><ul>
<li>从截止日期到现在，倒着计算时间，找出自己该做的事。</li>
</ul>
<h6 id="5-8-2-一定要预留“调整时间”"><a href="#5-8-2-一定要预留“调整时间”" class="headerlink" title="5.8.2 一定要预留“调整时间”"></a>5.8.2 一定要预留“调整时间”</h6><ul>
<li>一定要制订出有可行性的计划。</li>
</ul>
<h5 id="5-9-没有情报，还可以“推断”"><a href="#5-9-没有情报，还可以“推断”" class="headerlink" title="5.9 没有情报，还可以“推断”"></a>5.9 没有情报，还可以“推断”</h5><h6 id="5-9-1-假设，有时候能够帮助我们发现答案"><a href="#5-9-1-假设，有时候能够帮助我们发现答案" class="headerlink" title="5.9.1 假设，有时候能够帮助我们发现答案"></a>5.9.1 假设，有时候能够帮助我们发现答案</h6><ul>
<li>从有限的信息中进行假设验证的能力，也就是“假想思考”。</li>
</ul>
<h6 id="5-9-2-稍微改变一下转脑子的方法"><a href="#5-9-2-稍微改变一下转脑子的方法" class="headerlink" title="5.9.2 稍微改变一下转脑子的方法"></a>5.9.2 稍微改变一下转脑子的方法</h6><ul>
<li>基于自己假说的行动</li>
</ul>
<h5 id="5-10-不追求完美"><a href="#5-10-不追求完美" class="headerlink" title="5.10 不追求完美"></a>5.10 不追求完美</h5><h6 id="5-10-1-用尽全力，不要等到最后一刻"><a href="#5-10-1-用尽全力，不要等到最后一刻" class="headerlink" title="5.10.1 用尽全力，不要等到最后一刻"></a>5.10.1 用尽全力，不要等到最后一刻</h6><ul>
<li>为了事情顺利发展，不要一开始就追求完美。</li>
<li>“帕累托法则”</li>
<li>将整个任务的八成安排在最初的两成时间内</li>
</ul>
<h6 id="5-10-2-先粗糙，再仔细"><a href="#5-10-2-先粗糙，再仔细" class="headerlink" title="5.10.2 先粗糙，再仔细"></a>5.10.2 先粗糙，再仔细</h6><ul>
<li>有了对整体的把握，之后有充分的时间来修正</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;5-提高“自身实力”的个人习惯&quot;&gt;&lt;a href=&quot;#5-提高“自身实力”的个人习惯&quot; class=&quot;headerlink&quot; title=&quot;5. 提高“自身实力”的个人习惯&quot;&gt;&lt;/a&gt;5. 提高“自身实力”的个人习惯&lt;/h4&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://x8087.github.io/categories/note/"/>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="图解" scheme="http://x8087.github.io/tags/%E5%9B%BE%E8%A7%A3/"/>
    
      <category term="学习" scheme="http://x8087.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="方法" scheme="http://x8087.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ftp命令帮助</title>
    <link href="http://x8087.github.io/2015/09/14/ftp%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9/"/>
    <id>http://x8087.github.io/2015/09/14/ftp命令帮助/</id>
    <published>2015-09-14T07:29:29.000Z</published>
    <updated>2016-11-26T02:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ftp</strong>网络文件传输程序<br>ftp [-46AadefginpRtvV] [-N netrc] [-o output] [-p port] [-q quittime] [ -s srcaddr] [-r retry] [-T dir,max[,inc]] [[user@]host [port]] [[user@]host:[path][/]] [file://path] [ftp://[user[:password]@]host[:port]/path[/][;type=X]][<a href="http://[user[:password]@]host[:port]/path" target="_blank" rel="external">http://[user[:password]@]host[:port]/path</a>] […]<br>ftp -u URL file […]</p>
<a id="more"></a>
<h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>ftp是网络标准传输协议的用户接口。程序允许用户与远程网络站点传输文件。<br>选项可指定给命令行或者命令解释器。<br>-4 强制ftp只使用IPv4地址<br>-6 强制ftp只使用IPv6地址<br>-A 强制使用主动模式ftp。默认情况，ftp尝试使用被动模式ftp且当服务器不支持被动模式时回退到主动模式。这个选项使ftp总是使用主动连接。这只是对连接非常老可能没有实现被动模式的服务器有用。<br>-a 使ftp绕过普通登录程序，并替换为使用匿名登录。<br>-d 开启调试<br>-e 关闭命令行编辑。这对Emacs ange-ftp模式有用。<br>-f 强制经过ftp或者http代理的传输缓存重载。<br>-g 关闭文件名扩展。<br>-i 在多文件传输时关闭交互提示。<br>-n 阻止ftp在初始化非”auto-fetch”传输连接时尝试”auto-login”。如果允许自动登录，ftp会检查用户Home目录里的.netrc文件获取描述远程端账户的入口。如果入口不存在，ftp会提示远程端登录名（默认是用户本地机器上定义的）且如果有需要时提示登录账号的密码。覆盖”auto-fetch”传输的自动登录，指定合适的用户名（和可选的，密码）。<br>-N netrc 使用netrc替代~/.netrc。更多信息请参阅.netrc文件。<br>-o output 当自动获取文件时，保存内容到<code>output</code>。<code>output</code>根据下面的文件命名规则解析。如果<code>output</code>没有’-‘或者不是以’|’开头，那只有指定的第一个文件在<code>output</code>中检索到。所有其他文件在他们远程名字的basename里检索到。<br>-p 启用被动模式操作，用于在连接过滤防火墙后面使用。Ftp现在默认尝试使用被动模式已不推荐使用此选项，如果服务器不支持被动连接则回退到主动模式。<br>-P port 设置端口号为<code>port</code>。<br>-q quittime 在连接停滞<code>quitime</code>秒后退出。<br>-r wait 如果连接失败，暂停<code>wait</code>秒尝试重新连接。<br>-R 重新启动所有非代理的自动提取<br>-s srcaddr 使用srcaddr作为所有连接的本地IP地址<br>-t 启用数据包跟踪<br>-T direction,maximum[,increment] 为<code>direction</code>设置最大传输速度到<code>maximum</code>字节/秒，如果指定，则增量为<code>increment</code>字节/秒。更多信息参考<code>rate</code>。<br>-u URL file […] 在命令行上传文件到<code>URL</code>，<code>URL</code>是支持<code>auto-fetch</code>的ftp URL类型之一（对单个文件的上传附加一个可选目标文件名)，<code>file</code>是即将上传的一个或多个文件。<br>-v 启用详情和进度。如果输出是输出到终端这是默认的（对于进度，ftp是前台程序）。强制ftp显示所有来自远程服务端的响应，以及对数据传输的统计报告。<br>-V 禁用详情和进度，如果输出是输出到终端，覆盖默认的启用。</p>
<p>与ftp通讯的客户端主机可以在命令行中指定。如果这样的话，ftp会立即试图在主机上建立一个与ftp服务器的连接；否则，ftp会进入它的命令解释器并等待来自用户的指令。当等待来自用户的命令时，ftp提供给用户<code>ftp&gt;</code>的提示。下面是ftp认可的命令：</p>
<p>! [command [args]]<br>在本地机器上调用一个交互式的shell。如果有参数，第一个是直接执行的命令，其余的参数作为其参数。</p>
<p>$ macro-name [args]<br>执行macdef命令定义的宏<code>macro-name</code>。参数传递到宏unglobbed。</p>
<p>account [passwd]<br>一旦登录用于访问资源的远程系统成功完成，提供所需的补充密码。如果没有包含任何参数，将提示用户在无回响输入模式输入用户密码。</p>
<p>append local-file [remote-file]<br>将本地文件附加到远程计算机上的文件。如果未指定<code>remote-file</code>，本地文件名被用来命名被任何ntrans或者nmap设置改变后的远程文件。文件传输使用当前的类型，格式，模式，结构配置。</p>
<p>ascii<br>设置文件网络传输类型ASCII。这是默认类型。</p>
<p>bell<br>设定在每个文件传输命令完成后响铃提示。</p>
<p>binary<br>设置文件传输类型支持二进制图像传输。</p>
<p>bye<br>终止与远程服务器的FTP会话并退出ftp。文件结尾也会终止会话并退出。</p>
<p>case<br>切换远程计算机文件名大小写在<code>get</code>，<code>mget</code>，和<code>mput</code>命令时的映射。当<code>case</code>开启（默认关闭），远程计算机文件名所有大写字母映射成小写写进本地目录。</p>
<p>cd remote-directory<br>将远程机器上的工作目录更改为<code>remote-directory</code>。</p>
<p>cdup<br>将远程机器上的工作目录更改为当前远程机器工作目录的父目录。</p>
<p>chmod mode remote-file<br>更改远程系统上的<code>remote-file</code>文件权限模式为<code>mode</code>。</p>
<p>close<br>终止与远程服务器的FTP会话，并返回到命令解释器。任何定义的宏被擦除。</p>
<p>cr<br>切换在ascii类型文件检索时回车提取。记录是记在ascii类型文件传输时的回车/换行序列。当<code>cr</code>开启（默认），回车从序列中去除，以符合UNIX单换行记录定界符。在非UNIX远程系统上的记录可能包含单换行符；当有一个ascii类型传输时，这些换行只有当<code>cr</code>关闭时才可能与记录定界符区分。</p>
<p>ftp_debug [ftp_debug-value]<br>切换调试模式。如果可选<code>ftp_debug-value</code>指定，可以用来设置调试等级。当调试开启时，ftp打印每条发往远程机器的命令，以<code>--&gt;</code>字符串开始。</p>
<p>delete remote-file<br>删除在远程机器上的文件<code>remote-file</code></p>
<p>dir [remote-path [local-file]]<br>打印远程机器上的目录内容清单。清单包括服务器指定的任何系统相关信息；例如，大多数UNIX系统通过<code>ls -l</code>产生的输出。如果没有指定<code>remote-path</code>，使用当前工作目录。如果交互提示开启，ftp会提示用户确认最后一个参数是接收<code>dir</code>输出的目标本地文件。如果没有指定本地文件，或者如果<code>local-file</code>是<code>-</code>，输出发送到终端。</p>
<p>disconnect<br>与close相同</p>
<p>edit<br>切换命令行编辑，上下文相关命令和文件补全。从终端输入时自动开启，否则禁用。</p>
<p>epsv4<br>切换在IPv4连接时使用扩展EPSV和EPRT命令。首先尝试EPSV/EPRT，然后PASV/PORT。默认开启。如果扩展命令失败，选项会在当前连接期间临时禁用，或者直到epsv4再次执行。</p>
<p>exit<br>与bye相同。</p>
<p>features<br>显示远程服务器支持什么功能（使用FEAT命令）。</p>
<p>fget localfile<br>检索<code>localfile</code>列出的文件，每个文件名占一行。</p>
<p>form format<br>将文件传输格式设置成<code>format</code>。默认（只支持）格式<code>non-print</code>。</p>
<p>ftp host [port]<br>与open相同</p>
<p>gate [host [post]]<br>切换到<code>gate-ftp</code>模式，通过<code>TIS FWTK</code>和<code>Gauntlet ftp proxies</code>连接。如果gate-ftp服务器还没设置这将不被允许（由用户显示声明，或者来自<code>FTPSERVER</code>环境变量）。如果<code>host</code>给定，那么<code>gate-ftp</code>模式开启，且<code>gate-ftp</code>服务器将设置为<code>host</code>。如果<code>port</code>也给定，将使用作为在gate-ftp服务器上连接的端口。</p>
<p>get remote-file [local-file]<br>检索<code>remote-file</code>并在本地机器上保存。如果没有指定本地文件名，给予在远程机器上相同的名字，受当前case，ntrans和nmap设置变更影响。当传输文件时使用当前类型，方式，模式和结构设置。</p>
<p>glob<br>切换对<code>mdelete</code>，<code>mget</code>，<code>mput</code>和<code>mreget</code>的文件名扩展。如果使用<code>glob</code>关闭匹配，文件名参数按字面意思理解且不扩展。<code>mput</code>的匹配和在<code>csh</code>下是一样的。对于<code>mdelete</code>，<code>mget</code>和<code>mreget</code>，每个远程文件名在远程机器上分别扩展且不合并列表。目录名扩展多半和普通文件名不相同：确切的结果取决于外来的操作系统和ftp服务器，能通过<code>mls remote-files -</code>预览。注意：<code>mget</code>，<code>mput</code>和<code>mreget</code>并不意味传输文件的整个目录树。这可以通过传输目录树的<code>tar</code>归档实现（使用二进制模式）。</p>
<p>hash [size]<br>切换<code>hash-sign</code>（<code>#</code>）对每个数据块传输的打印。默认的数据块大小为1024字节。这能通过使用字节为单位指定<code>size</code>改变。启用hash会禁用进度progress。</p>
<p>help [command]<br>打印关于<code>command</code>含义的关键信息。如果没有指定参数，ftp打印已知命令列表。</p>
<p>idle [seconds]<br>设置在远程服务器上的闲置定时为<code>seconds</code>秒。如果<code>seconds</code>省略，打印当前闲置定时。</p>
<p>image<br>与<code>binary</code>相同。</p>
<p>lcd [directory]<br>更改在本地机器上的工作目录。如果未指定<code>directory</code>，使用用户的<code>home</code>目录。</p>
<p>less file<br>与<code>page</code>相同。</p>
<p>lpage local-file<br>使用<code>pager</code>选项设置的指定程序显示<code>local-file</code>。</p>
<p>lpwd<br>打印在本地机器上的工作目录。</p>
<p>ls [remote-path] [local-file]<br>与<code>dir</code>相同。</p>
<p>macdef macro-name<br>定义一个宏。后续行存储为宏<code>macro-name</code>；一个空行（文件里的连续换行字符或者终端中输入回车）终止宏输入模式。所有定义的宏有16个宏和4096个总字符的限制。宏名称最多8个字符。宏只适用于当前它们定义的会话内（或者在外部定义的会话中定义的会话调用下一个打开的命令），并保持定义直到执行关闭命令。要调用宏，请使用<code>$</code>命令（请看上面）。<br>宏处理器将<code>$</code>和<code>\\</code>作为特殊字符解释。<code>$</code>后面带一个数字被替换为宏调用命令行相应的参数。<code>$</code>后面带一个<code>i</code>指示宏处理器循环执行宏。传进来的第一个<code>$i</code>被替换成宏调用命令行的第一个参数，第二个传递的替换为第二个参数，等等。<code>\\</code>后带任何字符替换为该字符。使用<code>\\</code>可以防止<code>$</code>特殊处理。</p>
<p>mdelete [remote-files]<br>删除远程机器上的<code>remote-files</code></p>
<p>mdir remote-files local-file<br>像<code>dir</code>，除了可以指定多个远程文件。如果交互提示开启，ftp会提示用户确认最后一个参数确实是接收<code>mdir</code>输出的目标本地文件。</p>
<p>mget remote-files<br>扩展在远程机器上的<code>remote-files</code>并获取每个因此产生的文件名。在文件名扩展上的细节查看<code>glob</code>。结果文件名随后将经过<code>case</code>，<code>ntrans</code>和<code>nmap</code>设置处理。文件被转移到本地工作目录，本地工作目录能由<code>lcd directory</code>改变；新的本地目录能使用<code>! mkdir directory</code>创建。</p>
<p>mkdir directory-name<br>在远程机器上创建目录</p>
<p>mls remote-files local-file<br>像<code>ls</code>，除了可以指定多个远程文件和必须指定<code>local-file</code>。如果交互提示开启，ftp会提示用户确认最后一个参数确实是接收<code>mls</code>输出的目标本地文件。</p>
<p>mlsd [remote-path]<br>以机器解析(machine-parsable)形式，使用<code>MLSD</code>显示<code>remote-path</code>的内容（如果没给应该默认当前目录）。显示格式能用<code>remopts mlst ...</code>更改。</p>
<p>mlst [remote-path]<br>以机器解析(machine-parsable)形式，使用<code>MLST</code>显示<code>remote-pat</code>的相关详细。（如果没给应该默认当前目录）。显示格式能用<code>remopts mlst ...</code>更改。</p>
<p>mode mode-name<br>设置文件传输模式为<code>mode-name</code>。默认（只支持）模式是<code>stream</code>。</p>
<p>modtime remote-file<br>显示在远程机器上的文件最后修改时间，使用RFC2822格式。</p>
<p>more file<br>与page相同。</p>
<p>mput local-file<br>扩展搭配作为参数给定的本地文件列表并放置结果列表中的每个文件。文件名扩展详细查看<code>glob</code>。结果文件名随后经过<code>ntrans</code>和<code>nmap</code>设置处理。</p>
<p>mreget remote-file<br>当作每个<code>mget</code>，但执行<code>reget</code>替代<code>get</code>。</p>
<p>msend local-files<br>与<code>mput</code>相同。</p>
<p>newer remote-file [local-file]<br>只有当远程文件的修改时间比当前系统文件更新，才获取文件。如果文件在当前系统不存在，则该远程文件被认为更加新。否则，这个命令等同于<code>get</code>。</p>
<p>nlist [remote-path [local-file]]<br>与<code>ls</code>相同。</p>
<p>nmap [inpattern outpattern]<br>设置或撤消文件名映射机制。如果没有指定参数，文件名映射机制撤消。如果指定参数，远程文件名在<code>mput</code>命令和<code>put</code>命令未生成远程目标文件名时被映射。如果指定参数，本地文件名在<code>mget</code>命令和<code>get</code>命令未生成指定本地目标文件名时映射。这个命令在使用不同的文件命名规则或惯例连接非UNIX远程计算机时相当有用。映射遵循<code>inpattern</code>和<code>outpattern</code>的模式设置。[<code>Inpattern</code>]是传入的文件名模板（可能已经经过<code>ntrans</code>和<code>case</code>设置处理)。可变模板由包含在<code>inpattern</code>内的序列<code>$1</code>,<code>$2</code>,…<code>$9</code>实现。使用<code>\\</code>防止<code>$</code>字符特殊处理。所有其他字符按字面意思对待，并用于确定<code>nmap [inpattern]</code>变量值。例如，给定<code>inpattern</code> $1.$2且远程文件名”mydata.data”，$1将获得值”mydata”，$2获得值”data”。<code>outpattern</code>确定映射文件名结果。序列<code>$1</code>,<code>$2</code>,…<code>$9</code>替换为来自<code>inpattern</code>模板的任何结果值。序列<code>$0</code>替换为原始文件名。此外，序列<code>[seq1,seq2]</code>如果<code>seq1</code>不是空字符串替换为<code>[seq1]</code>，否则替换为<code>seq2</code>。例如，命令<code>nmap $1.$2.$3 [$1,$2].[$2.file]</code>输入文件名”myfile.data”和”myfile.data.old”产生输出文件名”myfile.data”，输入文件名”myfile”产生”myfile.file”，输入文件名”.myfile”产生”myfile.myfile”。空格可以包含在<code>outpattern</code>，例如：<code>nmap $1 sed s/   *$// &gt;$1</code><br>使用<code>\\</code>防止字符’$’,’[‘,’]’和’,’特殊处理。</p>
<p>ntrans [inchars [outchars]]<br>设置或撤消文件名字符转换机制。如果没有指定参数，文件名字符转换机制撤消。如果指定参数，远程文件名字符在<code>mput</code>命令和<code>put</code>命令未生成指定远程目标文件名时被转换。如果指定参数，本地文件名字符在<code>mget</code>命令和<code>get</code>命令未生成指定本地目标文件名时被转换。这个命令在使用不同的文件命名规则或惯例连接非UNIX远程计算机时相当有用。文件名内的字符匹配<code>inchars</code>内的字符被替换为<code>outchars</code>内相应的字符。如果<code>inchars</code>内的字符位置比<code>outchars</code>的长度长，那么字符从文件名删除。</p>
<p>open host [port]<br>与指定的<code>host</code>FTP服务器建立连接。可提供可选端口号，这种情况下，ftp将尝试在该端口联系FTP服务器。如果<code>auto-login</code>选项开启（默认），ftp同时尝试自动登录FTP服务器账户（见下文）。</p>
<p>page file<br>检索文件并用<code>pager</code>选项设定的指定程序显示。</p>
<p>passive [auto]<br>切换被动模式（如果没有给定参数）。如果给定<code>auto</code>，像<code>FTPMODE</code>设置为<code>auto</code>一样动作。如果被动模式开启（默认），ftp将为所有数据连接发送PASV命令替代PORT命令。PASV命令请求远程服务器为数据连接打开端口并返回端口地址。远程服务器监听与客户端连接的该端口。当使用更传统的的PROT命令，客户端监听端口并发送地址给远程服务器连接回来。被动模式在使用ftp经过控制交通方向的网关路由或者主机时非常有用。（注意：虽然FTP服务器需要支持RFC1123 PASV命令，但是有些没有。）</p>
<p>pdir [remote-path]<br>执行<code>dir [remote-path]</code>，并用<code>pager</code>选项指定的程序显示结果。</p>
<p>pls [remote-path]<br>执行<code>ls [remote-path]</code>，并用<code>pager</code>选项指定的程序显示结果。</p>
<p>pmlsd [remote-path]<br>执行<code>mlsd [remote-path]</code>，并用<code>pager</code>选项指定的程序显示结果。</p>
<p>preserve<br>切换在检索文件时保持修改时间。</p>
<p>progress<br>切换显示传输进度条。对于含有<code>-</code>的<code>local-file</code>或者命令以<code>|</code>开始的传送会禁用进度条。更多信息参考<code>文件命名规则``File NAMING CONVERTIONS</code>。开启<code>progress</code>会禁用<code>hash</code>。</p>
<p>prompt<br>切换交互式提示。交互式提示发生在多文件传输时允许用户选择性地检索或者存储文件。如果提示关闭（默认是开启），任何<code>mget</code>或者<code>mput</code>会传输所有文件，<code>mdelete</code>会删除所有文件。<br>当提示开启，下面的命令在提示可用：<br>a 当前文件回复<code>yes</code>，当前命令剩下的所有文件自动回复<code>yes</code>。<br>n 回复<code>no</code>，不传输文件。<br>p 当前文件回复<code>yes</code>，并关闭提示模式（类似给定<code>prompt off</code>）。<br>q 终止当前操作。<br>y 回复<code>yes</code>，传输文件。<br>？显示帮助消息。<br>任何其他回复相当于当前文件回复<code>yes</code>。</p>
<p>proxy ftp-command<br>在间接控制连接上运行ftp命令。这个命令允许同时连接两个远程ftp服务器在两个服务器之间传输文件。首先代理命令应该打开，用来建立间接控制连接。输入命令”proxy ?”查看在间接连接上其他可运行的ftp命令。下面的命令在<code>proxy</code>开端时表现不同：<code>open</code>在自动登录过程中不定义新的宏，<code>close</code>不擦除存在的宏定义，<code>get</code>和<code>mget</code>从主控制连接的主机往间接连接的主机传输文件，<code>put</code>和<code>mput</code>从间接控制连接主机往主控制连接主机附加传输文件。第三方文件传输依赖于间接控制连接服务器的FTP协议PASV命令支持。</p>
<p>put local-file [remote-file]<br>在远程机器保存本地文件。如果<code>remote-file</code>未指定，使用通过<code>ntrans</code>或者<code>nmap</code>设置处理后的本地文件名命名远程文件。文件传输使用当前的类型，格式，模式和结构设置。</p>
<p>pwd<br>打印远程机器上的当前工作目录名字。</p>
<p>quit<br>与<code>bye</code>相同。</p>
<p>quote arg1 arg2 …<br>指定参数逐字发送到远程FTP服务器。</p>
<p>rate direction [maximum [increment]]<br>压制最大传输速率为<code>maximum</code>字节/秒。如果<code>maximum</code>为0，禁用压制。<br><code>direction</code>可能是其中的：<br>all 两个目录。<br>get 输入传输。<br>put 输出传输。<br><code>maximum</code>在飘荡中每次给定的信号被接收可改动<code>increment</code>字节（默认：1024）：<br>SIGUSR1 <code>increment</code>字节<code>maximum</code>增量。<br>SIGUSR2 <code>increment</code>字节<code>maximum</code>减量。结果必须是正整数。<br>如果没有提供<code>maximum</code>，显示当前压制速率。<br>注意：速率还没实现ascii模式的传输。</p>
<p>rcvbuf size<br>设置socket接收缓存大小为<code>size</code>。</p>
<p>recv remote-file [local-file]<br>与<code>get</code>相同。</p>
<p>reget remote-file [local-file]<br><code>reget</code>动作像<code>get</code>，除了如果<code>local-file</code>存在并比<code>remote-file</code>小，<code>local-file</code>被假定为部分转移<code>remote-file</code>拷贝并从明显的失败点继续转移。这命令当传输非常大的文件经过容易断开连接的网络时是有用的。</p>
<p>remopts command [command-option]<br>设置<code>command</code>到<code>command-options</code>（缺省以特定命令基准处理）在远程FTP服务器上的选项。远程FTP命令所知支持选项包括：<code>MLST</code>（用于<code>MLSD</code>和<code>MLST</code>）。</p>
<p>rename [from [to]]<br>在远程机器上重命名文件<code>from</code>为文件<code>to</code>。</p>
<p>reset<br>清除应答队列。这个命令重新同步命令/应答的远程FTP服务器的排序。同步可能需要由远程服务器违反FTP协议。</p>
<p>restart marker<br>在指定的<code>marker</code>重新开始立即接着<code>get</code>或者<code>put</code>。在UNIX系统，标记通常是文件的字节偏移。</p>
<p>rhelp [command-name]<br>向远程FTP服务器请求帮助。如果指定<code>command-name</code>，则提供给服务器。</p>
<p>rmdir directory-name<br>删除远程机器上的目录。</p>
<p>restatus [remote-file]<br>不带参数，显示远程机器状态。如果指定<code>remote-file</code>，显示远程机器上的<code>remote-file</code>状态。</p>
<p>runique<br>切换在本地系统用唯一文件名存储文件。如果文件已经存在，与<code>get</code>或者<code>mget</code>命令的目标本地文件名名称相同，名称附加“.1”。如果结果名字匹配另一个存在的文件，在原本的名称附加“.2”。如果这个过程继续到“.99”，打印一个错误消息，并且不发生转移。生成的唯一文件名将被报告。注意<code>runique</code>不影响来自shell命令的本地文件生成（看下文）。默认值是关闭off。</p>
<p>send local-file [remote-file]<br>与<code>put</code>相同。</p>
<p>sendport<br>切换使用<code>PORT</code>命令。默认，ftp当建立连接时为每个数据传输尝试使用<code>PORT</code>命令。使用<code>PORT</code>命令能在执行多文件传输时防止延时。如果<code>PORT</code>命令失败，如果<code>PORT</code>命令失败，ftp使用默认数据端口。当禁用<code>PORT</code>命令，不会尝试每个数据传输使用<code>PORT</code>命令。这对于某些忽略<code>PORT</code>命令实现的FTP是有不正确，但有用的，表明他们已经接受。</p>
<p>set [option value]<br>设置<code>option</code>为<code>value</code>。如果<code>option</code>和<code>value</code>没有给定，显示所有选项和他们的值。当前支持的选项有：<br>anonpass 默认为$FTPANONPASS<br>ftp_proxy 默认为$ftp_proxy。<br>http_proxy 默认为$http_proxy。<br>no_proxy 默认为$no_proxy。<br>pager 默认为$PAGER。<br>prompt 默认为$FTPPROMPT。<br>rprompt 默认为$FTPRPROMPT。</p>
<p>site arg1 arg2 …<br>作为<code>SITE</code>命令逐字发送的指定参数到远程FTP服务器。</p>
<p>size remote-file<br>返回远程机器的<code>remote-file</code>大小。</p>
<p>sndbuf size<br>设置socket发送缓存大小为<code>size</code>。</p>
<p>status<br>显示当前ftp状态。</p>
<p>struct struct-name<br>设置文件传输结构为<code>struct-name</code>。默认（只支持）结构<code>file</code>。</p>
<p>sunique<br>切换在远程机器用唯一文件名存储文件。要成功完成，远程FTP服务器必须支持FTP协议STOU命令。远程服务器会报告唯一名字。默认值是关闭off。</p>
<p>system<br>显示在远程机器上运行的保作系统类型。</p>
<p>tenex<br>设置需要告诉<code>TENEX</code>机器的文件传输类型。</p>
<p>throttle<br>与rate相同。</p>
<p>trace<br>切换包跟踪。</p>
<p>type [type-name]<br>设置文件传输类型为<code>type-name</code>。如果没有指定类型，打印当前类型。默认类型是网络ASCII。</p>
<p>umask [newmask]<br>设置在远程服务器上的默认<code>umask</code>为<code>newmask</code>。如果<code>newmask</code>省略，打印当前<code>umask</code>。</p>
<p>unset option<br>撤消<code>option</code>。更多信息参考<code>set</code>。</p>
<p>usage command<br>打印<code>command</code>的用例消息。</p>
<p>user user-name [password] [account]]<br>确定自己的远程FTP服务器。如果<code>password</code>未指定且服务请求它，ftp将向用户提示它（禁止本地回响后）。如果<code>account</code>字段未指定，且FTP服务器请求它，将向用户提示。如果<code>account</code>字段指定，如果远程服务器没有用<code>account</code>命令请求登入，登录序列完成后，将接替远程服务器。除非ftp调用<code>auto-login</code>失效，这个过程在初始化到FTP服务器的连接自动完成。</p>
<p>verbose<br>切换详情模式。在详情模式，所有来自FTP服务器的响应都显示给用户。此外，如果<code>verbose</code>开启，当文件传输完成，报告传输效率统计关系。默认为开启。</p>
<p>xferbuf size<br>设置socket发送和接收的缓存大小为<code>size</code>。</p>
<p>? [command]<br>与<code>help</code>相同。</p>
<p>带有嵌入空格的命令参数可以用<code>&quot;</code>引用。<br>切换设置命令能采用明确的<code>on</code>或者<code>off</code>参数强制合适地设置。<br>以字节数作为参数的命令（例如<code>hash</code>,<code>rate</code>,<code>xferbuf</code>）支持参数可选后缀，改变参数的解释。支持的后缀有：<br>  b 不引起改变。（可选）<br>  k Kilo；参数乘以1024<br>  m Mega；参数乘以1048576<br>  g Gige；参数乘以1073741824<br>如果ftp接收<code>SIGINFO</code>（查看stty(1) <code>status</code>参数）或者<code>SIGQUIT</code>信号同时一个传输在进行中，当前的传输速率统计将被写到标准错误输出，以相同的标准完成消息格式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ftp&lt;/strong&gt;网络文件传输程序&lt;br&gt;ftp [-46AadefginpRtvV] [-N netrc] [-o output] [-p port] [-q quittime] [ -s srcaddr] [-r retry] [-T dir,max[,inc]] [[user@]host [port]] [[user@]host:[path][/]] [file://path] [ftp://[user[:password]@]host[:port]/path[/][;type=X]][&lt;a href=&quot;http://[user[:password]@]host[:port]/path&quot;&gt;http://[user[:password]@]host[:port]/path&lt;/a&gt;] […]&lt;br&gt;ftp -u URL file […]&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://x8087.github.io/tags/shell/"/>
    
      <category term="zsh" scheme="http://x8087.github.io/tags/zsh/"/>
    
      <category term="ftp" scheme="http://x8087.github.io/tags/ftp/"/>
    
      <category term="mac" scheme="http://x8087.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>zparseopts的使用帮助</title>
    <link href="http://x8087.github.io/2015/09/10/zparseopts%E7%9A%84%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>http://x8087.github.io/2015/09/10/zparseopts的使用帮助/</id>
    <published>2015-09-10T01:44:06.000Z</published>
    <updated>2016-11-26T03:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>zparseopts [ -DKME ] [ -a array ] [ -A assoc ] spec ...</code></p>
<hr>
<p>这个内部命令简化位置参数$<em>的分析。每个spec描述一个选项，且必须使用<code>opt[=array]</code>的格式。如果位置参数中包含<code>opt</code>描述的选项，该选项将复制到<code>-a array</code>指定和<code>opt</code>后<code>=array</code>指定的<code>array</code>中。<br><strong>注意：</strong>如果没用使用<code>-a</code>或<code>-A</code>选项指定<code>array</code>，且<code>spec</code>中也没有使用<code>=array</code>，命令会报错。<br>除非设置<code>-E</code>选项，分析中遇到任何一个不是描述<code>spec</code>的字符串都会停止。就算使用<code>-E</code>，分析中遇到<code>-</code>或者<code>--</code>的位置参数也会停止。<br><code>opt</code>描述必须下面中的一个。特殊字符能在前面加反斜杠显示在提供的选项名中。<br><code>name</code> <code>name+</code><br><code>name</code>是选项名去掉前缀<code>-</code>。GNU样式的长选项是特殊情况，<code>name</code>包含<code>--</code>中的一个；例如，<code>--file</code>选项的<code>name</code>相当于<code>-file</code>。<br>如果<code>name</code>后带<code>+</code>，位置参数中每次发现该选项都会添加到<code>array</code>，没有带<code>+</code>则只保存最后一个出现的选项。<br>使用这种格式，选项不带参数，所以分析时如果下一个位置参数不是以<code>-</code>开头将自动停止（除非使用<code>-E</code>选项）。<br><code>name:</code> <code>name:-</code> <code>name::</code><br>如果有<code>:</code>或者<code>::</code>，则选项带参数。一个冒号表示参数强制，两个冒号表示参数可选。<br><code>array</code>的第一个值是选项名，参数添加到选项名后。<br>可选参数和选项名放在同一个数组项（ <em>*注意</em></em> 这使得空字符串参数难以区分）。强制参数则添加到单独的数组项，除非使用<code>:-</code>才能和选项名放在同一个数组项。<br>上面描述的<code>+</code>可以出现在<code>name</code>和第一个冒号<code>:</code>中间。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p><strong>zparseopts选项:</strong><br><code>-a array</code><br>如上所述，指定默认数组名，保存识别出的选项。</p>
<p><code>-A assoc</code><br>使用该选项可以把选项和值以选项名为键选项参数为值放到关联数组内。</p>
<p><code>-D</code><br>使用该选项可以把所有找到的调用shell和shell方法的位置参数删除。最多但是不包括任何<code>spec</code>没描述的。这和使用内部命令<code>shift</code>类似。</p>
<p><code>-K</code><br>使用该选项可以使<code>-a</code>选项指定和<code>=array</code>格式的数组在没有<code>spec</code>使用到时保持不变。另一方面，当任何<code>spec</code>使用到时替换整个数组。通过<code>-A</code>选项指定的关联数组单独项使用<code>-K</code>保存。这使得可以在调用<code>zparseopts</code>前指派默认值到数组里。</p>
<p><code>-M</code><br>实现相同选项名之间映射的指派规则变化。任何使用<code>=array</code>格式来选择值保存在哪里的<code>spec</code>，字符串<code>array</code>被解释为另一个<code>spec</code>的名字。如果没有找到其他<code>spec</code>，选项值按往常保存。这只是选项值保存方法的变化，不是<code>$*</code>被解析的方法，所以如果<code>name+</code>指定不一致结果将不可预知。</p>
<p><code>-E</code><br>这改变了分析规则，在遇到首个字符串不是按<code>spec</code>中的一个描述时不停止。它可用于测试或（如果和<code>-D</code>配合使用时）提取选项和他们的参数，忽略位置参数中的其他所有选项和参数。例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set -- -a -bx -c y -cz baz -cend</div><div class="line">zparseopts a=foo b:=bar c+:=bar</div><div class="line">//结果：</div><div class="line">foo=(-a)</div><div class="line">bar=(-b x -c y -c z)</div></pre></td></tr></table></figure>
<p>‘baz’后的参数将不会用到。</p>
<p>使用<code>-E</code>选项后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set -- -a x -b y -c z arg1 arg2</div><div class="line">zparseopts -E -D b:=bar</div><div class="line">//结果：</div><div class="line">bar=(-b y)</div><div class="line">set -- -a x -c z arg1 arg2</div></pre></td></tr></table></figure></p>
<p>这就是说，选项<code>-b</code>和它的参数从位置参数提取到数组<code>bar</code>。</p>
<p><code>-M</code>选项可以这样使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set -- -a -bx -c y -cz baz -cend</div><div class="line">zparseopts -A bar -M a=foo b+: c:=b</div><div class="line">//结果：</div><div class="line">foo=(-a)</div><div class="line">bar=(-a &apos;&apos; -b xyz)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;zparseopts [ -DKME ] [ -a array ] [ -A assoc ] spec ...&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这个内部命令简化位置参数$&lt;em&gt;的分析。每个spec描述一个选项，且必须使用&lt;code&gt;opt[=array]&lt;/code&gt;的格式。如果位置参数中包含&lt;code&gt;opt&lt;/code&gt;描述的选项，该选项将复制到&lt;code&gt;-a array&lt;/code&gt;指定和&lt;code&gt;opt&lt;/code&gt;后&lt;code&gt;=array&lt;/code&gt;指定的&lt;code&gt;array&lt;/code&gt;中。&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果没用使用&lt;code&gt;-a&lt;/code&gt;或&lt;code&gt;-A&lt;/code&gt;选项指定&lt;code&gt;array&lt;/code&gt;，且&lt;code&gt;spec&lt;/code&gt;中也没有使用&lt;code&gt;=array&lt;/code&gt;，命令会报错。&lt;br&gt;除非设置&lt;code&gt;-E&lt;/code&gt;选项，分析中遇到任何一个不是描述&lt;code&gt;spec&lt;/code&gt;的字符串都会停止。就算使用&lt;code&gt;-E&lt;/code&gt;，分析中遇到&lt;code&gt;-&lt;/code&gt;或者&lt;code&gt;--&lt;/code&gt;的位置参数也会停止。&lt;br&gt;&lt;code&gt;opt&lt;/code&gt;描述必须下面中的一个。特殊字符能在前面加反斜杠显示在提供的选项名中。&lt;br&gt;&lt;code&gt;name&lt;/code&gt; &lt;code&gt;name+&lt;/code&gt;&lt;br&gt;&lt;code&gt;name&lt;/code&gt;是选项名去掉前缀&lt;code&gt;-&lt;/code&gt;。GNU样式的长选项是特殊情况，&lt;code&gt;name&lt;/code&gt;包含&lt;code&gt;--&lt;/code&gt;中的一个；例如，&lt;code&gt;--file&lt;/code&gt;选项的&lt;code&gt;name&lt;/code&gt;相当于&lt;code&gt;-file&lt;/code&gt;。&lt;br&gt;如果&lt;code&gt;name&lt;/code&gt;后带&lt;code&gt;+&lt;/code&gt;，位置参数中每次发现该选项都会添加到&lt;code&gt;array&lt;/code&gt;，没有带&lt;code&gt;+&lt;/code&gt;则只保存最后一个出现的选项。&lt;br&gt;使用这种格式，选项不带参数，所以分析时如果下一个位置参数不是以&lt;code&gt;-&lt;/code&gt;开头将自动停止（除非使用&lt;code&gt;-E&lt;/code&gt;选项）。&lt;br&gt;&lt;code&gt;name:&lt;/code&gt; &lt;code&gt;name:-&lt;/code&gt; &lt;code&gt;name::&lt;/code&gt;&lt;br&gt;如果有&lt;code&gt;:&lt;/code&gt;或者&lt;code&gt;::&lt;/code&gt;，则选项带参数。一个冒号表示参数强制，两个冒号表示参数可选。&lt;br&gt;&lt;code&gt;array&lt;/code&gt;的第一个值是选项名，参数添加到选项名后。&lt;br&gt;可选参数和选项名放在同一个数组项（ &lt;em&gt;*注意&lt;/em&gt;&lt;/em&gt; 这使得空字符串参数难以区分）。强制参数则添加到单独的数组项，除非使用&lt;code&gt;:-&lt;/code&gt;才能和选项名放在同一个数组项。&lt;br&gt;上面描述的&lt;code&gt;+&lt;/code&gt;可以出现在&lt;code&gt;name&lt;/code&gt;和第一个冒号&lt;code&gt;:&lt;/code&gt;中间。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="zsh" scheme="http://x8087.github.io/tags/zsh/"/>
    
      <category term="zparseopts" scheme="http://x8087.github.io/tags/zparseopts/"/>
    
      <category term="getopts" scheme="http://x8087.github.io/tags/getopts/"/>
    
  </entry>
  
  <entry>
    <title>vim常用插件介绍</title>
    <link href="http://x8087.github.io/2015/08/17/vim%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://x8087.github.io/2015/08/17/vim常用插件介绍/</id>
    <published>2015-08-17T03:45:18.000Z</published>
    <updated>2016-12-07T14:50:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍Spf13vim配置里用到以及常用的插件。涉及插件的用途以及插件的一般使用方法。<br><a id="more"></a></p>
<h3 id="Deps"><a href="#Deps" class="headerlink" title="Deps"></a>Deps</h3><h4 id="Plugin-‘gmarik-vundle’"><a href="#Plugin-‘gmarik-vundle’" class="headerlink" title="Plugin ‘gmarik/vundle’"></a>Plugin ‘gmarik/vundle’</h4><p>Vundle是Vim bundle的缩写， 它是一个Vim插件管理器。<br>功能：</p>
<ul>
<li>直接在.vimrc中跟踪和配置你的插件。</li>
<li>安装已配置的脚本（a.k.a. bundle）</li>
<li>更新已配置的脚本</li>
<li>按名称搜索所有可用的Vim脚本</li>
<li>清理未使用的插件</li>
<li>使用交互模式在单个按键中运行上述操作</li>
</ul>
<ul>
<li>管理已安装脚本的运行时路径</li>
<li>在安装和更新后重新生成帮助标签</li>
</ul>
<p>Vundle的搜索使用<a href="http://vim-scripts.org提供所有可用的Vim脚本列表。" target="_blank" rel="external">http://vim-scripts.org提供所有可用的Vim脚本列表。</a></p>
<h5 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h5><p>Vundle跟踪你想要通过<code>Plugin</code>命令在<em>.vimrc</em>里配置的插件。每个<code>Plugin</code>命令告诉Vundle在启动时激活脚本将它添加到你的<strong>runtimepath</strong>。注释或者移除行将禁用插件。<br>每个<code>Plugin</code>命令都有一个指向脚本的URI。没有注释跟在命令的同一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin &apos;git_URI&apos;</div></pre></td></tr></table></figure></p>
<p><code>Plugin</code>命令可以选择在URI之后采用第二个参数。它必须是一个字典，用逗号与URI隔开。每个键值对在字典中是一个配置选项。</p>
<p>以下脚本配置选项可用。</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">介绍</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">rtp</td>
<td style="text-align:left">指定在存储库里Vim插件所在位置的目录（从存储库的根目录相对路径）。它确定将要添加到<strong>runtimepath</strong>的路径。</td>
<td style="text-align:left">Plug ‘git_URI’,{‘rtp’: ‘some/subdir/‘}</td>
</tr>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">所配置脚本即将保存的本地克隆目录名称</td>
<td style="text-align:left">Plgin ‘git_URI’,{‘name’:’newPluginName’}</td>
</tr>
<tr>
<td style="text-align:left">pinned</td>
<td style="text-align:left">一个标志，当值设置为1时，告诉Vundle不要在插件上执行任何git操作，同时仍然添加<code>bundles</code>目录下现有插件到<strong>runtimepath</strong></td>
<td style="text-align:left">Plugin ‘mylocalplugin’,{‘pinned’:1}</td>
</tr>
</tbody>
</table>
<h5 id="支持的URI"><a href="#支持的URI" class="headerlink" title="支持的URI"></a>支持的URI</h5><table>
<thead>
<tr>
<th style="text-align:left">URI</th>
<th style="text-align:left">例子</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GitHub</td>
<td style="text-align:left">Plugin ‘VundleVim/vundle.vim’ =&gt; <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">https://github.com/VundleVim/Vundle.vim</a></td>
<td style="text-align:left">当<code>user/repo</code>传给<code>Plugin</code>时使用GitHub</td>
</tr>
<tr>
<td style="text-align:left">Vim Script</td>
<td style="text-align:left">Plugin ‘ctrlp.vim’ =&gt; <a href="https://github.com/vim-scripts/ctrlp.vim" target="_blank" rel="external">https://github.com/vim-scripts/ctrlp.vim</a></td>
<td style="text-align:left">不带斜杠的任意单个单词被当作来自Vim Scripts</td>
</tr>
<tr>
<td style="text-align:left">Other Git URI</td>
<td style="text-align:left">Plugin ‘git://git.wincent.com/command-t.git’</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">本地插件</td>
<td style="text-align:left">Plugin ‘file:///path/from/root/to/plugin’</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:PluginInstall &quot;安装.vimrc里配置的所有插件。最新安装的插件将自动启用。某些插件可能需要额外的步骤如编译或者外部程序，请参阅它们的文档。</div><div class="line">:PluginInstall unite.vim &quot;安装并激活插件unite.vim</div><div class="line">:PluginInstall tpope/vim-surround tpope/vim-fugitive &quot;安装多个插件，用空格隔开</div><div class="line">&quot;可以用**Tab**自动补全已知的名称</div></pre></td></tr></table></figure>
<p><strong>Note</strong>:<br>  安装操作不是永久的。要完成，必须在.vimrc的合适位置放置<code>Plugin &#39;unite.vim&#39;</code>告诉Vundle启动时加载插件。<br>  安装完后可以按<code>l</code>查看命令的日志。</p>
<h5 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:PluginInstall!</div><div class="line">:PluginUpdate &quot;安装或者更新已配置的插件。可更新多个，用空格隔开。</div></pre></td></tr></table></figure>
<p><strong>Note</strong>:<br>  更新完成后按<code>u</code>查看所有已更新插件的改变日志。按<code>l</code>查看命令的日志。</p>
<h5 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:PluginSearch foo &quot;在Vim脚本库搜索相关插件，显示在新的分隔窗口。</div><div class="line">:PluginSearch! foo &quot;在搜索前刷新脚本列表</div><div class="line">:PluginSearch! &quot;不带参数搜索所有插件</div></pre></td></tr></table></figure>
<p><a href="http://vim-scripts.org/vim/scripts.html" target="_blank" rel="external">Vim Scripts</a><br>需要’curl’在系统上可用。</p>
<h5 id="列出插件"><a href="#列出插件" class="headerlink" title="列出插件"></a>列出插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:PluginList &quot;显示已安装插件列表</div></pre></td></tr></table></figure>
<h5 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:PluginClean &quot;请求确认删除所有.vimrc文件未配置但是存在于bundle安装目录的插件</div><div class="line">:PluginClean! &quot;自动确认删除没用过的插件</div></pre></td></tr></table></figure>
<h5 id="交互模式按键映射"><a href="#交互模式按键映射" class="headerlink" title="交互模式按键映射"></a>交互模式按键映射</h5><table>
<thead>
<tr>
<th>KEY</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td> i</td>
<td>run :PluginInstall with name taken from line cursor is positioned on</td>
</tr>
<tr>
<td> I</td>
<td>same as i, but runs :PluginInstall! to update bundle</td>
</tr>
<tr>
<td> D</td>
<td>delete selected bundle (be careful not to remove local modifications)</td>
</tr>
<tr>
<td> c</td>
<td>run :PluginClean</td>
</tr>
<tr>
<td> s</td>
<td>run :PluginSearch</td>
</tr>
<tr>
<td> R</td>
<td>fetch fresh script list from server</td>
</tr>
</tbody>
</table>
<h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let g:vundle_default_git_proto = &apos;git&apos; &quot;使Vundle使用git替代https</div></pre></td></tr></table></figure>
<h5 id="旧版本接口改变"><a href="#旧版本接口改变" class="headerlink" title="旧版本接口改变"></a>旧版本接口改变</h5><table>
<thead>
<tr>
<th>Deprecated Names</th>
<th>New Names</th>
</tr>
</thead>
<tbody>
<tr>
<td>  Bundle</td>
<td>Plugin</td>
</tr>
<tr>
<td>  BundleInstall(!)</td>
<td>PluginInstall(!), VundleInstall(!)</td>
</tr>
<tr>
<td>  BundleUpdate</td>
<td>PluginUpdate, VundleUpdate</td>
</tr>
<tr>
<td>  BundleSearch(!)</td>
<td>PluginSearch(!), VundleSearch(!)</td>
</tr>
<tr>
<td>  BundleClean</td>
<td>PluginClean(!), VundleClean(!)</td>
</tr>
<tr>
<td>  BundleList</td>
<td>PluginList</td>
</tr>
</tbody>
</table>
<h4 id="Plugin-‘MarcWeber-vim-addon-mw-utils’"><a href="#Plugin-‘MarcWeber-vim-addon-mw-utils’" class="headerlink" title="Plugin ‘MarcWeber/vim-addon-mw-utils’"></a>Plugin ‘MarcWeber/vim-addon-mw-utils’</h4><h4 id="Plugin-‘tomtom-tlib-vim’"><a href="#Plugin-‘tomtom-tlib-vim’" class="headerlink" title="Plugin ‘tomtom/tlib_vim’"></a>Plugin ‘tomtom/tlib_vim’</h4><h4 id="Plugin-‘mileszs-ack-vim’"><a href="#Plugin-‘mileszs-ack-vim’" class="headerlink" title="Plugin ‘mileszs/ack.vim’"></a>Plugin ‘mileszs/ack.vim’</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>Ack全局搜索插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:Ack[!] [options] &#123;pattern&#125; [&#123;directory&#125;]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>用<code>{pattern}</code>递归搜索目录<code>{directory}</code>(默认为当前目录)并打开<em>quickfix</em>窗口显示匹配项。如果没有<code>[!]</code>自动跳转到第一个匹配项。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:AckAdd [options] &#123;pattern&#125; [&#123;directory&#125;]</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:Ack</code>类似，不过搜索到的匹配项添加到当前的<em>quickfix</em>列表。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:AckFromSearch [&#123;directory&#125;]</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:Ack</code>类似，不过使用上一次搜索的模式。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:LAck [options] &#123;pattern&#125; [&#123;directory&#125;]</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:Ack</code>类似，不过匹配项放到<em>location-list</em>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:LAckAdd [options] &#123;pattern&#125; [&#123;directory&#125;]</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:AckAdd</code>类似，不过匹配项放到<em>location-list</em>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:AckFile [options] &#123;pattern&#125; [&#123;directory&#125;]</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:Ack</code>类似，不过只搜索文件名。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:AckHelp[!] [options] &#123;pattern&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:Ack</code>类似，不过只搜索vim帮助文档。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:LAckHelp [options] &#123;pattern&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:AckHelp</code>类似，不过匹配项放到<em>location-list</em>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:AckWindow[!] [options] &#123;pattern&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>{pattern}</code>模式对屏幕中当前标签页可见的所有缓存搜索。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:LAckWindow [options] &#123;pattern&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>与<code>:AckWindow</code>类似，不过匹配项放到<em>location-list</em>。</p>
</blockquote>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">介绍</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">g:ackprg</td>
<td style="text-align:left">指定搜索命令</td>
<td style="text-align:left">ack</td>
<td style="text-align:left">let g:ackprg=”ag –vimgrep”</td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_default_options</code></td>
<td style="text-align:left">指定传递的默认参数。只用在<code>g:ackprg</code>没有自定义配置时。</td>
<td style="text-align:left">-s -H –nocolor –column</td>
<td style="text-align:left">let g:ack_default_options = “ -s -H –nocolor –nogroup –column –smart-case –follow”</td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_apply_qmappings</code></td>
<td style="text-align:left">在<em>quickfix</em>窗口启用映射</td>
<td style="text-align:left">1</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_apply_lmappings</code></td>
<td style="text-align:left">在<em>location-list</em>窗口启用映射</td>
<td style="text-align:left">1</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_mappings</code></td>
<td style="text-align:left">列出在<em>quickfix</em>/<em>location-list</em>窗口创建的所有映射</td>
<td style="text-align:left">{“t”: “<c-w><cr><c-w>T”,”T”: “<c-w><cr><c-w>TgT<c-w>j”,”o”: “<cr>“,”O”: “<cr><c-w><c-w>:ccl<cr>“,”go”: “<cr><c-w>j”,”h”: “<c-w><cr><c-w>K”,”H”: “<c-w><cr><c-w>K<c-w>b”,”v”: “<c-w><cr><c-w>H<c-w>b<c-w>J<c-w>t”,”gv”: “<c-w><cr><c-w>H<c-w>b<c-w>J” }</c-w></c-w></c-w></cr></c-w></c-w></c-w></c-w></c-w></cr></c-w></c-w></c-w></cr></c-w></c-w></cr></c-w></c-w></cr></cr></c-w></c-w></cr></cr></c-w></c-w></cr></c-w></c-w></cr></c-w></td>
<td style="text-align:left">let g:ack_mappings={“o”: “<cr>zz”}</cr></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_qhandler</code></td>
<td style="text-align:left">打开<em>quickfix</em>窗口的命令</td>
<td style="text-align:left">“botright copen”</td>
<td style="text-align:left">letg:ack_qhandler = “botright copen 30”</td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_lhandler</code></td>
<td style="text-align:left">打开<em>location-list</em>窗口的命令</td>
<td style="text-align:left">“botright lopen”</td>
<td style="text-align:left"><code>let g:ack_lhandler = &quot;botright lopen 30&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ackhightlight</code></td>
<td style="text-align:left">使用此选项突出显示搜索的字词</td>
<td style="text-align:left">0</td>
<td style="text-align:left"><code>let g:ackhightlight = 1</code></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_autoclose</code></td>
<td style="text-align:left">使用此选项指定是否在使用快捷键后关闭<em>quickfix</em>窗口</td>
<td style="text-align:left">0</td>
<td style="text-align:left"><code>let g:ack_autoclose = 1</code></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_autofold_results</code></td>
<td style="text-align:left">使用此选项通过名字折叠在<em>quickfix</em>里的结果。默认只有当前折叠打开且当按‘j’和’k‘在结果之间移动时，如果碰到折叠的最后一项时关闭并打开下一个折叠。</td>
<td style="text-align:left">0</td>
<td style="text-align:left"><code>let g:ack_qutofold_results = 1</code></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ackpreview</code></td>
<td style="text-align:left">使用此选项用’j’或者‘k’自动打开文件</td>
<td style="text-align:left">0</td>
<td style="text-align:left"><code>let g:ackpreview = 1</code></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_use_dispatch</code></td>
<td style="text-align:left">使用此选项用<em>vim-dispatch</em>在后台运行搜索，并为不同系统执行不同的后端。由于此时在<em>Dispatch</em>的限制，不支持<em>location-list</em>且结果窗口将出现在结果准备好之前。但是，这些可能对于那些搜索缓慢的大型项目是可接受的折衷方案。</td>
<td style="text-align:left">0</td>
<td style="text-align:left"><code>let g:ack_use_dispatch = 1</code></td>
</tr>
<tr>
<td style="text-align:left"><code>g:ack_use_cword_for_empty_search</code></td>
<td style="text-align:left">使用此选项启用空白搜索针对光标下单词运行。当此选项未设置，空白搜索将只输入错误信息。</td>
<td style="text-align:left">1</td>
<td style="text-align:left"><code>let g:ack_use_cword_for_empty_search = 0</code></td>
</tr>
</tbody>
</table>
<h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h5><blockquote>
<p>在<em>quickfix</em>与<em>location-list</em>窗口的快捷键</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">按键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">？</td>
<td style="text-align:left">显示这些映射的快速摘要</td>
</tr>
<tr>
<td style="text-align:left">o</td>
<td style="text-align:left">打开文件（如<code>Enter</code>）</td>
</tr>
<tr>
<td style="text-align:left">O</td>
<td style="text-align:left">打开文件且关闭<em>quickfix</em>窗口</td>
</tr>
<tr>
<td style="text-align:left">go</td>
<td style="text-align:left">预览文件（打开但保持焦点在ack.vim结果上）</td>
</tr>
<tr>
<td style="text-align:left">t</td>
<td style="text-align:left">在新的标签打开</td>
</tr>
<tr>
<td style="text-align:left">T</td>
<td style="text-align:left">在新的标签打开但不移动到新标签</td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:left">在水平分屏打开</td>
</tr>
<tr>
<td style="text-align:left">H</td>
<td style="text-align:left">在水平分屏打开，保持焦点在结果上</td>
</tr>
<tr>
<td style="text-align:left">v</td>
<td style="text-align:left">在垂直分屏打开</td>
</tr>
<tr>
<td style="text-align:left">gv</td>
<td style="text-align:left">在垂直分屏打开，保持焦点在结果上</td>
</tr>
<tr>
<td style="text-align:left">q</td>
<td style="text-align:left">关闭<em>quickfix</em>窗口</td>
</tr>
</tbody>
</table>
<h5 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h5><ul>
<li>.gitignore 和 .hgignore</li>
<li>.agignore</li>
</ul>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><h4 id="Plugin-‘scrooloose-nerdtree’"><a href="#Plugin-‘scrooloose-nerdtree’" class="headerlink" title="Plugin ‘scrooloose/nerdtree’"></a>Plugin ‘scrooloose/nerdtree’</h4><h4 id="Plugin-‘spf13-vim-colors’"><a href="#Plugin-‘spf13-vim-colors’" class="headerlink" title="Plugin ‘spf13/vim-colors’"></a>Plugin ‘spf13/vim-colors’</h4><h4 id="Plugin-‘tpope-vim-surround’"><a href="#Plugin-‘tpope-vim-surround’" class="headerlink" title="Plugin ‘tpope/vim-surround’"></a>Plugin ‘tpope/vim-surround’</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>移除，修改和添加成对符号的工具，包括括号，引号和标签。</p>
<h5 id="映射-1"><a href="#映射-1" class="headerlink" title="映射"></a>映射</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ds &#123;TARGET&#125; //删除。</div><div class="line"></div><div class="line">cs &#123;TARGET&#125; &#123;REPLACEMENT&#125; //修改。</div><div class="line">cS &#123;TARGET&#125; &#123;REPLACEMENT&#125; //修改，把围绕文本放在单独的行。</div><div class="line"></div><div class="line">ys &#123;MOTION or TEXTOBJECT&#125; &#123;REPLACEMENT&#125; //添加。</div><div class="line">yss &#123;REPLACEMENT&#125; //当前行添加，忽略前导空白。</div><div class="line">ySS &#123;REPLACEMENT&#125; //当前行添加，缩进并将围绕文本放在单独的行。</div><div class="line">yS &#123;MOTION or TEXTOBJECT&#125; &#123;REPLACEMENT&#125; //添加，缩进并将围绕文本放在单独的行。</div><div class="line"></div><div class="line">vS &#123;REPLACEMENT&#125; //可视模式下添加</div><div class="line">//行可视模式，围绕放在分开的行并缩进。</div><div class="line">//块可视模式，每一行分开围绕。</div><div class="line"></div><div class="line">vgS &#123;REPLACEMENT&#125; //可视模式下的&quot;gS“</div><div class="line">//行可视模式，阻止自动缩进。</div><div class="line">//块可视模式，允许围绕根据&apos;virtualedit&apos;设置超过行的结束</div><div class="line"></div><div class="line">//插入模式下</div><div class="line">//插入成对符号，并把光标放在中间</div><div class="line">&lt;C-G&gt;s &#123;REPLACEMENT&#125;</div><div class="line">&lt;C-G&gt;S &#123;REPLACEMENT&#125;</div><div class="line">&lt;C-S&gt; &#123;REPLACEMENT&#125;</div></pre></td></tr></table></figure>
<h5 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h5><p>单个字符，基于Vim提供的<code>text-object</code>。</p>
<ul>
<li>8个括号标记。<code>(</code> <code>)</code> <code>{</code> <code>}</code> <code>[</code> <code>]</code> <code>&lt;</code> <code>&gt;</code>对于<code>ds</code>和<code>cs</code>使用开括号时，包含的空白也会除去。<code>b</code> <code>B</code> <code>r</code> <code>a</code>作为<code>)</code> <code>}</code> <code>]</code> <code>&gt;</code>的别名。</li>
<li>3个引号标记。<code>&#39;</code> <code>&quot;</code> ``` 只在当前行搜索。</li>
<li><code>t</code>是一对<em>HTML</em>或者<em>XML</em>标签。默认对光标所在最内层标签处理，指定数字可以针对其他标签。</li>
<li><code>w</code> <code>W</code> <code>s</code>相当于<code>word</code> <code>WORD</code> <code>sentence</code>。这些没有什么可以删除，且使用<code>ds</code>没有操作。对于<code>cs</code>可以当作轻量的<code>ysi</code>(<code>cswb</code> == <code>ysiwb</code>, 多或者少)。</li>
<li><code>p</code>表示<code>paragraph</code>。类似于<code>w</code> <code>W</code>和<code>s</code>；不过会添加或者删除新行。</li>
</ul>
<h5 id="替换对象"><a href="#替换对象" class="headerlink" title="替换对象"></a>替换对象</h5><p>单个字符。未定义的字符默认直接使用该字符。</p>
<ul>
<li>使用<code>)</code> <code>}</code> <code>]</code> <code>&gt;</code>添加适当的成对符号。<code>(</code> <code>{</code> <code>[</code>与其类似，不过会添加额外的空白字符在里面。<code>b</code> <code>B</code> <code>r</code> <code>a</code>对应<code>)</code> <code>}</code> <code>]</code> <code>&gt;</code>。为实现在C风格语言对于代码块的通用需要，<code>&lt;C-}&gt;</code>添加花括号到与内容隔开的行(貌似按键冲突)。</li>
<li>使用<code>t</code>或者<code>&lt;</code>， Vim提示作为一个HTML/XML标签插入。可以指定属性，标签会自动闭合。如果替换标签，属性会保留在新的标签里。用<code>&gt;</code>结束你的输入抛弃那些属性。如果使用<code>&lt;C-T&gt;</code>，标签将自己显示在行上。</li>
<li>使用<code>s</code>， 添加一个前导但不包括尾部的空白。这对于来自csbs的方法调用移除圆括号是有用的。</li>
</ul>
<h5 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h5><ul>
<li>针对特定文件，<code>autocmd FileType php let b:surround_45 = &quot;&lt;?php \r ?&gt;&quot;</code></li>
<li>全局变量<code>let g:surround_45 = &quot;&lt;% \r %&gt;&quot;</code>，其中的<code>\r</code>会替换被围绕的字符，<code>45</code>为<code>-</code>键。</li>
<li>通过提示输入替换字符串，<code>let g:surround_108 = &quot;\\begin{\1environment: \1}\r\\end{\1\1}&quot;</code>，其中<code>\1</code>指定替换位置，<code>environment:</code>为提示字符，<code>108</code>为<code>l</code>键。</li>
<li>使用正则表达式应用替换，<code>let g:surround_108 = &quot;\\begin{\environment: \1}\r\\end{\1\r}.\*\r\1}&quot;</code>，其中<code>\1</code>中间的<code>\r</code>为正则表达式。</li>
<li>使用正则表达式应用替换，<code>let g:surround_{char2nr(&quot;d&quot;)} = &quot;&lt;div\1id: \r..*\r id=\&quot;&amp;\&quot;\1&gt;\r&lt;/div&gt;&quot;</code>，其中<code>char2nr</code>将字符转换成ascII码，提示输入id将匹配<code>\r..\*\r</code>并替换<code>&amp;</code>所在位置。</li>
<li>插入模式下添加<code>let g:surround_insert_tail = &quot;&lt;++&gt;&quot;</code>。</li>
</ul>
<h4 id="Plugin-‘tpope-vim-repeat’"><a href="#Plugin-‘tpope-vim-repeat’" class="headerlink" title="Plugin ‘tpope/vim-repeat’"></a>Plugin ‘tpope/vim-repeat’</h4><blockquote>
<p>让<code>.</code>命令可以重复插件的映射。</p>
</blockquote>
<h4 id="Plugin-‘jiangmiao-auto-pairs’"><a href="#Plugin-‘jiangmiao-auto-pairs’" class="headerlink" title="Plugin ‘jiangmiao/auto-pairs’"></a>Plugin ‘jiangmiao/auto-pairs’</h4><p>暂时没有安装</p>
<h4 id="Plugin-‘ctrlpvim-ctrlp-vim’"><a href="#Plugin-‘ctrlpvim-ctrlp-vim’" class="headerlink" title="Plugin ‘ctrlpvim/ctrlp.vim’"></a>Plugin ‘ctrlpvim/ctrlp.vim’</h4><h4 id="Plugin-‘tacahiroy-ctrlp-funky’"><a href="#Plugin-‘tacahiroy-ctrlp-funky’" class="headerlink" title="Plugin ‘tacahiroy/ctrlp-funky’"></a>Plugin ‘tacahiroy/ctrlp-funky’</h4><h4 id="Plugin-‘kristijanhusak-vim-multiple-cursors’"><a href="#Plugin-‘kristijanhusak-vim-multiple-cursors’" class="headerlink" title="Plugin ‘kristijanhusak/vim-multiple-cursors’"></a>Plugin ‘kristijanhusak/vim-multiple-cursors’</h4><p>多光标操作支持</p>
<h4 id="Plugin-‘vim-scripts-sessionman-vim’"><a href="#Plugin-‘vim-scripts-sessionman-vim’" class="headerlink" title="Plugin ‘vim-scripts/sessionman.vim’"></a>Plugin ‘vim-scripts/sessionman.vim’</h4><p>窗口会话管理<br><code>:SessionOpen</code> <code>:SessionClose</code> <code>SessionSave</code> <code>SessionOpenLast</code> <code>:SessionShowLast</code> <code>:SessionSaveAs</code> <code>:SessionList</code></p>
<h4 id="Plugin-‘matchit-zip’"><a href="#Plugin-‘matchit-zip’" class="headerlink" title="Plugin ‘matchit.zip’"></a>Plugin ‘matchit.zip’</h4><p> %匹配扩展支持不只单字符,支持更多语言Ada, ASP with VBS, Csh, DTD, Essbase, Fortran, HTML, JSP (same as HTML), LaTeX, Lua, Pascal, SGML, Shell, Tcsh, Vim, XML.</p>
<h4 id="Plugin-‘bling-vim-airline’"><a href="#Plugin-‘bling-vim-airline’" class="headerlink" title="Plugin ‘bling/vim-airline’"></a>Plugin ‘bling/vim-airline’</h4><p>状态条  </p>
<h4 id="Plugin-‘powerline-fonts’"><a href="#Plugin-‘powerline-fonts’" class="headerlink" title="Plugin ‘powerline/fonts’"></a>Plugin ‘powerline/fonts’</h4><p>状态条字体</p>
<h4 id="Plugin-‘bling-vim-bufferline’"><a href="#Plugin-‘bling-vim-bufferline’" class="headerlink" title="Plugin ‘bling/vim-bufferline’"></a>Plugin ‘bling/vim-bufferline’</h4><p>状态栏显示缓存文件名</p>
<h4 id="Plugin-‘Lokaltog-vim-easymotion’"><a href="#Plugin-‘Lokaltog-vim-easymotion’" class="headerlink" title="Plugin ‘Lokaltog/vim-easymotion’"></a>Plugin ‘Lokaltog/vim-easymotion’</h4><p>快速跳转<br>Note: The default leader has been changed to <leader><leader> to avoid<br>      conflicts with other plugins you may have installed</leader></leader></p>
<table>
<thead>
<tr>
<th>Default Mapping</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>  <code>&lt;Leader&gt;f{char}</code></td>
<td>Find {char} to the right. See f.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;F{char}</code></td>
<td>Find {char} to the left. See F.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;t{char}</code></td>
<td>Till before the {char} to the right. See t.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;T{char}</code></td>
<td>Till after the {char} to the left. See T.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;w</code></td>
<td>Beginning of word forward. See w.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;W</code></td>
<td>Beginning of WORD forward. See W.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;b</code></td>
<td>Beginning of word backward. See b.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;B</code></td>
<td>Beginning of WORD backward. See B.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;e</code></td>
<td>End of word forward. See e.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;E</code></td>
<td>End of WORD forward. See E.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;ge</code></td>
<td>End of word backward. See ge.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;gE</code></td>
<td>End of WORD backward. See gE.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;j</code></td>
<td>Line downward. See j.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;k</code></td>
<td>Line upward. See k.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;n</code></td>
<td>Jump to latest “/“ or “?” forward. See n.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;N</code></td>
<td>Jump to latest “/“ or “?” backward. See N.</td>
</tr>
<tr>
<td>  <code>&lt;Leader&gt;s</code></td>
<td>Find(Search) {char} forward and backward. See f and F.</td>
</tr>
</tbody>
</table>
<h4 id="Plugin-‘jistr-vim-nerdtree-tabs’"><a href="#Plugin-‘jistr-vim-nerdtree-tabs’" class="headerlink" title="Plugin ‘jistr/vim-nerdtree-tabs’"></a>Plugin ‘jistr/vim-nerdtree-tabs’</h4><p>nerdtree标签显示优化</p>
<h4 id="Plugin-‘flazz-vim-colorschemes’"><a href="#Plugin-‘flazz-vim-colorschemes’" class="headerlink" title="Plugin ‘flazz/vim-colorschemes’"></a>Plugin ‘flazz/vim-colorschemes’</h4><h4 id="Plugin-‘mbbill-undotree’"><a href="#Plugin-‘mbbill-undotree’" class="headerlink" title="Plugin ‘mbbill/undotree’"></a>Plugin ‘mbbill/undotree’</h4><h4 id="Plugin-‘nathanaelkane-vim-indent-guides’"><a href="#Plugin-‘nathanaelkane-vim-indent-guides’" class="headerlink" title="Plugin ‘nathanaelkane/vim-indent-guides’"></a>Plugin ‘nathanaelkane/vim-indent-guides’</h4><h4 id="Plugin-‘vim-scripts-restore-view-vim’"><a href="#Plugin-‘vim-scripts-restore-view-vim’" class="headerlink" title="Plugin ‘vim-scripts/restore_view.vim’"></a>Plugin ‘vim-scripts/restore_view.vim’</h4><h4 id="Plugin-‘mhinz-vim-signify’"><a href="#Plugin-‘mhinz-vim-signify’" class="headerlink" title="Plugin ‘mhinz/vim-signify’"></a>Plugin ‘mhinz/vim-signify’</h4><h4 id="Plugin-‘tpope-vim-abolish-git’"><a href="#Plugin-‘tpope-vim-abolish-git’" class="headerlink" title="Plugin ‘tpope/vim-abolish.git’"></a>Plugin ‘tpope/vim-abolish.git’</h4><h4 id="Plugin-‘osyo-manga-vim-over’"><a href="#Plugin-‘osyo-manga-vim-over’" class="headerlink" title="Plugin ‘osyo-manga/vim-over’"></a>Plugin ‘osyo-manga/vim-over’</h4><h4 id="Plugin-‘kana-vim-textobj-user’"><a href="#Plugin-‘kana-vim-textobj-user’" class="headerlink" title="Plugin ‘kana/vim-textobj-user’"></a>Plugin ‘kana/vim-textobj-user’</h4><h4 id="Plugin-‘kana-vim-textobj-indent’"><a href="#Plugin-‘kana-vim-textobj-indent’" class="headerlink" title="Plugin ‘kana/vim-textobj-indent’"></a>Plugin ‘kana/vim-textobj-indent’</h4><h4 id="Plugin-‘gcmt-wildfire-vim’"><a href="#Plugin-‘gcmt-wildfire-vim’" class="headerlink" title="Plugin ‘gcmt/wildfire.vim’"></a>Plugin ‘gcmt/wildfire.vim’</h4><h3 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h3><h4 id="Plugin-‘reedes-vim-litecorrect’"><a href="#Plugin-‘reedes-vim-litecorrect’" class="headerlink" title="Plugin ‘reedes/vim-litecorrect’"></a>Plugin ‘reedes/vim-litecorrect’</h4><h4 id="Plugin-‘reedes-vim-textobj-sentence’"><a href="#Plugin-‘reedes-vim-textobj-sentence’" class="headerlink" title="Plugin ‘reedes/vim-textobj-sentence’"></a>Plugin ‘reedes/vim-textobj-sentence’</h4><h4 id="Plugin-‘reedes-vim-textobj-quote’"><a href="#Plugin-‘reedes-vim-textobj-quote’" class="headerlink" title="Plugin ‘reedes/vim-textobj-quote’"></a>Plugin ‘reedes/vim-textobj-quote’</h4><h4 id="Plugin-‘reedes-vim-wordy’"><a href="#Plugin-‘reedes-vim-wordy’" class="headerlink" title="Plugin ‘reedes/vim-wordy’"></a>Plugin ‘reedes/vim-wordy’</h4><h3 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h3><h4 id="Plugin-‘scrooloose-syntastic’"><a href="#Plugin-‘scrooloose-syntastic’" class="headerlink" title="Plugin ‘scrooloose/syntastic’"></a>Plugin ‘scrooloose/syntastic’</h4><h4 id="Plugin-‘tpope-vim-fugitive’"><a href="#Plugin-‘tpope-vim-fugitive’" class="headerlink" title="Plugin ‘tpope/vim-fugitive’"></a>Plugin ‘tpope/vim-fugitive’</h4><h4 id="Plugin-‘mattn-webapi-vim’"><a href="#Plugin-‘mattn-webapi-vim’" class="headerlink" title="Plugin ‘mattn/webapi-vim’"></a>Plugin ‘mattn/webapi-vim’</h4><h4 id="Plugin-‘mattn-gist-vim’"><a href="#Plugin-‘mattn-gist-vim’" class="headerlink" title="Plugin ‘mattn/gist-vim’"></a>Plugin ‘mattn/gist-vim’</h4><h4 id="Plugin-‘scrooloose-nerdcommenter’"><a href="#Plugin-‘scrooloose-nerdcommenter’" class="headerlink" title="Plugin ‘scrooloose/nerdcommenter’"></a>Plugin ‘scrooloose/nerdcommenter’</h4><h4 id="Plugin-‘tpope-vim-commentary’"><a href="#Plugin-‘tpope-vim-commentary’" class="headerlink" title="Plugin ‘tpope/vim-commentary’"></a>Plugin ‘tpope/vim-commentary’</h4><h4 id="Plugin-‘godlygeek-tabular’"><a href="#Plugin-‘godlygeek-tabular’" class="headerlink" title="Plugin ‘godlygeek/tabular’"></a>Plugin ‘godlygeek/tabular’</h4><h4 id="Plugin-‘majutsushi-tagbar’"><a href="#Plugin-‘majutsushi-tagbar’" class="headerlink" title="Plugin ‘majutsushi/tagbar’"></a>Plugin ‘majutsushi/tagbar’</h4><h3 id="Snippets-amp-autoComplete"><a href="#Snippets-amp-autoComplete" class="headerlink" title="Snippets &amp; autoComplete"></a>Snippets &amp; autoComplete</h3><h4 id="Plugin-‘Valloric-YouCompleteMe’"><a href="#Plugin-‘Valloric-YouCompleteMe’" class="headerlink" title="Plugin ‘Valloric/YouCompleteMe’"></a>Plugin ‘Valloric/YouCompleteMe’</h4><h4 id="Plugin-‘SirVer-ultisnips’"><a href="#Plugin-‘SirVer-ultisnips’" class="headerlink" title="Plugin ‘SirVer/ultisnips’"></a>Plugin ‘SirVer/ultisnips’</h4><h4 id="Plugin-‘honza-vim-snippets’"><a href="#Plugin-‘honza-vim-snippets’" class="headerlink" title="Plugin ‘honza/vim-snippets’"></a>Plugin ‘honza/vim-snippets’</h4><h3 id="Php"><a href="#Php" class="headerlink" title="Php"></a>Php</h3><h4 id="Plugin-‘spf13-PIV’"><a href="#Plugin-‘spf13-PIV’" class="headerlink" title="Plugin ‘spf13/PIV’"></a>Plugin ‘spf13/PIV’</h4><h4 id="Plugin-‘arnaud-lb-vim-php-namespace’"><a href="#Plugin-‘arnaud-lb-vim-php-namespace’" class="headerlink" title="Plugin ‘arnaud-lb/vim-php-namespace’"></a>Plugin ‘arnaud-lb/vim-php-namespace’</h4><h4 id="Plugin-‘beyondwords-vim-twig’"><a href="#Plugin-‘beyondwords-vim-twig’" class="headerlink" title="Plugin ‘beyondwords/vim-twig’"></a>Plugin ‘beyondwords/vim-twig’</h4><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="Plugin-‘klen-python-mode’"><a href="#Plugin-‘klen-python-mode’" class="headerlink" title="Plugin ‘klen/python-mode’"></a>Plugin ‘klen/python-mode’</h4><h4 id="Plugin-‘yssource-python-vim’"><a href="#Plugin-‘yssource-python-vim’" class="headerlink" title="Plugin ‘yssource/python.vim’"></a>Plugin ‘yssource/python.vim’</h4><h4 id="Plugin-‘python-match-vim’"><a href="#Plugin-‘python-match-vim’" class="headerlink" title="Plugin ‘python_match.vim’"></a>Plugin ‘python_match.vim’</h4><h4 id="Plugin-‘pythoncomplete’"><a href="#Plugin-‘pythoncomplete’" class="headerlink" title="Plugin ‘pythoncomplete’"></a>Plugin ‘pythoncomplete’</h4><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Plugin-‘elzr-vim-json’"><a href="#Plugin-‘elzr-vim-json’" class="headerlink" title="Plugin ‘elzr/vim-json’"></a>Plugin ‘elzr/vim-json’</h4><h4 id="Plugin-‘groenewege-vim-less’"><a href="#Plugin-‘groenewege-vim-less’" class="headerlink" title="Plugin ‘groenewege/vim-less’"></a>Plugin ‘groenewege/vim-less’</h4><h4 id="Plugin-‘pangloss-vim-javascript’"><a href="#Plugin-‘pangloss-vim-javascript’" class="headerlink" title="Plugin ‘pangloss/vim-javascript’"></a>Plugin ‘pangloss/vim-javascript’</h4><h4 id="Plugin-‘briancollins-vim-jst’"><a href="#Plugin-‘briancollins-vim-jst’" class="headerlink" title="Plugin ‘briancollins/vim-jst’"></a>Plugin ‘briancollins/vim-jst’</h4><h4 id="Plugin-‘kchmck-vim-coffee-script’"><a href="#Plugin-‘kchmck-vim-coffee-script’" class="headerlink" title="Plugin ‘kchmck/vim-coffee-script’"></a>Plugin ‘kchmck/vim-coffee-script’</h4><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><h4 id="Plugin-‘amirh-HTML-AutoCloseTag’"><a href="#Plugin-‘amirh-HTML-AutoCloseTag’" class="headerlink" title="Plugin ‘amirh/HTML-AutoCloseTag’"></a>Plugin ‘amirh/HTML-AutoCloseTag’</h4><h4 id="Plugin-‘hail2u-vim-css3-syntax’"><a href="#Plugin-‘hail2u-vim-css3-syntax’" class="headerlink" title="Plugin ‘hail2u/vim-css3-syntax’"></a>Plugin ‘hail2u/vim-css3-syntax’</h4><h4 id="Plugin-‘gorodinskiy-vim-coloresque’"><a href="#Plugin-‘gorodinskiy-vim-coloresque’" class="headerlink" title="Plugin ‘gorodinskiy/vim-coloresque’"></a>Plugin ‘gorodinskiy/vim-coloresque’</h4><h4 id="Plugin-‘tpope-vim-haml’"><a href="#Plugin-‘tpope-vim-haml’" class="headerlink" title="Plugin ‘tpope/vim-haml’"></a>Plugin ‘tpope/vim-haml’</h4><h4 id="Plugin-‘mattn-emmet-vim’"><a href="#Plugin-‘mattn-emmet-vim’" class="headerlink" title="Plugin ‘mattn/emmet-vim’"></a>Plugin ‘mattn/emmet-vim’</h4><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Plugin-‘tpope-vim-rails’"><a href="#Plugin-‘tpope-vim-rails’" class="headerlink" title="Plugin ‘tpope/vim-rails’"></a>Plugin ‘tpope/vim-rails’</h4><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><h4 id="Plugin-‘fatih-vim-go’"><a href="#Plugin-‘fatih-vim-go’" class="headerlink" title="Plugin ‘fatih/vim-go’"></a>Plugin ‘fatih/vim-go’</h4><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Plugin-‘rust-lang-rust-vim’"><a href="#Plugin-‘rust-lang-rust-vim’" class="headerlink" title="Plugin ‘rust-lang/rust.vim’"></a>Plugin ‘rust-lang/rust.vim’</h4><h4 id="Plugin-‘tpope-vim-markdown’"><a href="#Plugin-‘tpope-vim-markdown’" class="headerlink" title="Plugin ‘tpope/vim-markdown’"></a>Plugin ‘tpope/vim-markdown’</h4><h4 id="Plugin-‘spf13-vim-preview’"><a href="#Plugin-‘spf13-vim-preview’" class="headerlink" title="Plugin ‘spf13/vim-preview’"></a>Plugin ‘spf13/vim-preview’</h4><h4 id="Plugin-‘tpope-vim-cucumber’"><a href="#Plugin-‘tpope-vim-cucumber’" class="headerlink" title="Plugin ‘tpope/vim-cucumber’"></a>Plugin ‘tpope/vim-cucumber’</h4><h4 id="Plugin-‘cespare-vim-toml’"><a href="#Plugin-‘cespare-vim-toml’" class="headerlink" title="Plugin ‘cespare/vim-toml’"></a>Plugin ‘cespare/vim-toml’</h4><h4 id="Plugin-‘quentindecock-vim-cucumber-align-pipes’"><a href="#Plugin-‘quentindecock-vim-cucumber-align-pipes’" class="headerlink" title="Plugin ‘quentindecock/vim-cucumber-align-pipes’"></a>Plugin ‘quentindecock/vim-cucumber-align-pipes’</h4><h4 id="Plugin-‘saltstack-salt-vim’"><a href="#Plugin-‘saltstack-salt-vim’" class="headerlink" title="Plugin ‘saltstack/salt-vim’"></a>Plugin ‘saltstack/salt-vim’</h4><h4 id="Plugin-‘desertEx’"><a href="#Plugin-‘desertEx’" class="headerlink" title="Plugin ‘desertEx’"></a>Plugin ‘desertEx’</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍Spf13vim配置里用到以及常用的插件。涉及插件的用途以及插件的一般使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x8087.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://x8087.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="vim" scheme="http://x8087.github.io/tags/vim/"/>
    
      <category term="插件" scheme="http://x8087.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>图解攻心说话术</title>
    <link href="http://x8087.github.io/2015/08/16/%E5%9B%BE%E8%A7%A3%E6%94%BB%E5%BF%83%E8%AF%B4%E8%AF%9D%E6%9C%AF/"/>
    <id>http://x8087.github.io/2015/08/16/图解攻心说话术/</id>
    <published>2015-08-16T09:56:35.000Z</published>
    <updated>2016-11-23T15:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>轻松获得家人、朋友、上司、同事、下属和客喜爱与信赖的秘密！<br>从倾听与说话两方面告诉你53项实用沟通技巧，包括：反驳的要诀、说出真心话又不令人生气的技巧、听讨厌的人说话或聆听无趣内容的秘诀、边听边整理的窍门、顺利与人攀谈的技巧、听懂言外之意的诀窍、引得对方说话和让对方采取行动的发问方式、让对方爽快答应的秘诀……<br>创造好人缘的沟通金律：</p>
<ul>
<li>不独占说话时间、不抢话、不打断对方。</li>
<li>倾听时，要搭腔附和，并积极回应。</li>
<li>当对方开口说第一句话时，记得与对方眼神交流。</li>
<li>上司对下属不可采取上对下的态度，要进行平等的沟通。</li>
<li>问候后再多加一句话就能打动对方的心。</li>
<li>“抱歉”、“还好”、“反正”等口头禅要改掉。</li>
<li>对于话少的人，要主动提供话题，并且耐心等候回应。</li>
<li>听厌恶的人说话时，只听重要的部分，并告诉自己不听会有损失……</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="前言-沟通能力决定工作成果"><a href="#前言-沟通能力决定工作成果" class="headerlink" title="前言 沟通能力决定工作成果"></a>前言 沟通能力决定工作成果</h4><ol>
<li>技术能力</li>
<li>沟通能力<br>沟通能力对于人的日常生活与职场生活，是很重要的基础能力。<br>本书的目的：找回人们过于着重技术而忽略的沟通能力。并说明沟通的基本方法与应用技巧。<br>沟通是由一方“说话”与一方“倾听”构成的。</li>
</ol>
<ul>
<li>沟通不良的原因<ul>
<li>无法让对方了解自己</li>
<li>只要和部属说话，内容就会变得索然无味</li>
<li>明明没有那样的意思，却惹恼顾客</li>
</ul>
</li>
<li>要和别人沟通，首要之务是学习“倾听”的技巧。</li>
</ul>
<h4 id="1-工作和人际关系的基础都是沟通"><a href="#1-工作和人际关系的基础都是沟通" class="headerlink" title="1. 工作和人际关系的基础都是沟通"></a>1. 工作和人际关系的基础都是沟通</h4><p>首先要牢牢记住沟通的基本方法！</p>
<h5 id="1-1-比顷听与说话技巧更重要的事"><a href="#1-1-比顷听与说话技巧更重要的事" class="headerlink" title="1.1 比顷听与说话技巧更重要的事"></a>1.1 比顷听与说话技巧更重要的事</h5><p>在检视自己擅不擅长倾听、说话之前，必须先反省一下，自己是不是会在无意中对别人造成困扰，因为体贴对方的态度是一项先决条件。</p>
<ul>
<li>什么样的人会给对方造成困扰？<br>注意自己的言行举止给对方带来什么影响</li>
</ul>
<h5 id="1-2-多话会有很多负面影响"><a href="#1-2-多话会有很多负面影响" class="headerlink" title="1.2 多话会有很多负面影响"></a>1.2 多话会有很多负面影响</h5><p>这个社会是由人与人之间的关系构成的，而沟通能让这种关系变得更双向、热络。能口若悬河地说话的人乍看之下似乎是很善于言论，却容易导致沟通变得单向道，必须特别注意。</p>
<ul>
<li>爱说话的人要特别注意</li>
<li>爱说话的人刹不住车</li>
</ul>
<p>说太多话时，会造成下列负面影响</p>
<ol>
<li>别人对你产生戒心</li>
<li>受到轻视</li>
<li>别人对你敬而远之</li>
<li>别人觉得你说话不中听</li>
<li>说多了，难免会出错</li>
<li>被对方看穿</li>
<li>无法成功说服别人</li>
</ol>
<p>所以，爱说话的人必须注意不要单方面地说太多的话。</p>
<h5 id="1-3-在“说”与“听”之间取得平衡，才是良好沟通"><a href="#1-3-在“说”与“听”之间取得平衡，才是良好沟通" class="headerlink" title="1.3 在“说”与“听”之间取得平衡，才是良好沟通"></a>1.3 在“说”与“听”之间取得平衡，才是良好沟通</h5><p>“光说”和“光听”都一样会造成沟通不良。不偏向说或听的任何一方，平衡地进行交谈，才会成为“说话高手”与“倾听高手”。</p>
<ul>
<li><p>沟通的基本原则就是双向道</p>
<ol>
<li>说话者开始自己说个不停</li>
<li>说话者很难继续说下去</li>
<li>气氛很沉闷</li>
</ol>
</li>
<li><p>“说”与“听”的良好平衡</p>
<ul>
<li>错误：只有一个人口沫横飞地说话。</li>
<li>正确：平衡地进行说与听的互动。</li>
</ul>
</li>
</ul>
<h5 id="1-4-为什么明明有能力，却未获好评"><a href="#1-4-为什么明明有能力，却未获好评" class="headerlink" title="1.4 为什么明明有能力，却未获好评"></a>1.4 为什么明明有能力，却未获好评</h5><p>头脑灵活、工作上表现突出，却未能获得好评。这是因为与别人沟通的方式出了问题。只要能和别人有良好的沟通，评价一定会提高。</p>
<ul>
<li>无法与人共事的人</li>
<li>光有工作能力，无法获得好评</li>
<li>希望别人对自己的能力有正面评论，工作能力加沟通能力是必要的！工作上要和他人合作<ol>
<li>重视人际关系</li>
<li>亲切地主动开口，也要尊重对方意见</li>
<li>进一步提升沟通技巧</li>
</ol>
</li>
</ul>
<h5 id="1-5-即使说出真心话，也不会惹人厌的说话方式"><a href="#1-5-即使说出真心话，也不会惹人厌的说话方式" class="headerlink" title="1.5 即使说出真心话，也不会惹人厌的说话方式"></a>1.5 即使说出真心话，也不会惹人厌的说话方式</h5><p>清楚表达自己的意见，比较能获得别人的信赖。但是，要让别人毫无抗拒、虚心接受自己的意见，还是必须得磨炼说话技巧</p>
<ul>
<li><p>为了不惹人厌，要下点工夫</p>
<ol>
<li>对自己的意见负责</li>
<li>不超越对方可以容忍的范围</li>
<li>平常就要制造容易开口的气氛</li>
</ol>
</li>
<li><p>错误观念：</p>
<ul>
<li>表达自己的意见是在反抗别人</li>
<li>反对主管的意见是不好的事</li>
<li>只要顺着对方的意见，就不会惹人厌</li>
</ul>
</li>
<li>正确观念：<ul>
<li>说出属于自己的意见</li>
<li>最好多表达意见</li>
<li>欢迎别人提出不同的意见</li>
</ul>
</li>
<li>重点在于说话方式<ul>
<li>对自己的意见负责</li>
<li>事先了解对方可容忍的范围</li>
<li>制造容易开口的气氛</li>
</ul>
</li>
</ul>
<h5 id="1-6-“紧张”是一种正常现象"><a href="#1-6-“紧张”是一种正常现象" class="headerlink" title="1.6 “紧张”是一种正常现象"></a>1.6 “紧张”是一种正常现象</h5><p>“容易紧张发抖”并不是一种特殊的症状，只要紧张，任何人都会发抖。但可以想一想，要怎么做才能让自己在紧张发抖的状态下也能发挥实力。</p>
<ul>
<li><p>只要是人，都会紧张发抖</p>
</li>
<li><p>因为会“紧张”，才能进行良好沟通</p>
<ol>
<li>任何人都会紧张</li>
<li>即使紧张，别人也只能看出实际程度的三分之一而已</li>
<li>让紧张不会变成压力的方法：<ul>
<li>如果紧张，就老实说出自己很紧张</li>
<li>将意识集中在目的上</li>
<li>深呼吸</li>
<li>积累经验</li>
<li>“会紧张的人比较有发展性”像这样做正向思考</li>
</ul>
</li>
</ol>
</li>
</ul>
<h5 id="1-7-没有人天生就是说话高手"><a href="#1-7-没有人天生就是说话高手" class="headerlink" title="1.7 没有人天生就是说话高手"></a>1.7 没有人天生就是说话高手</h5><p>认为擅长说话是与生俱来的能力，这样的想法是错误的。表达能力是由成长环境、学习程度及个人意愿决定的。</p>
<ul>
<li>只要积累经验并学习，任何人都能成为说话高手</li>
<li>擅长说话、擅长倾听也是经由学习而来</li>
</ul>
<h5 id="1-8-重点整理"><a href="#1-8-重点整理" class="headerlink" title="1.8 重点整理"></a>1.8 重点整理</h5><ol>
<li>在思考倾听与说话的方式之前，先反省一下自己的言行举止是否会给人造成困扰</li>
<li>多说话的人要特别注意，小心遭人轻视。</li>
<li>说话者单向式的表达，不能称为沟通。</li>
<li>说话时要同时注意对方的反应，并视需要转换为倾听者的角色。</li>
<li>轮到自己倾听时，要搭腔附和，并积极地回应。</li>
<li>只要在说与听之间取得平衡，沟通气氛就会更加活络。</li>
<li>改掉自以为是的态度。如果不能认同别人，自己也不会获得好评。</li>
<li>说出真心话也不会惹对方生气，这样才是说话高手。</li>
<li>紧张时，就老实说出自己很紧张，这样反而可以放松。</li>
<li>倾听与说话的技巧都可以借由训练而进步。这世上并没有天生的沟通高手。</li>
</ol>
<h4 id="2-成为倾听高手的【十五项基本技巧】"><a href="#2-成为倾听高手的【十五项基本技巧】" class="headerlink" title="2. 成为倾听高手的【十五项基本技巧】"></a>2. 成为倾听高手的【十五项基本技巧】</h4><p>成为沟通高手的第一步就是成为倾听高手。让我们来了解这些基本技巧吧！</p>
<h5 id="2-1-什么样的人可称为倾听高手"><a href="#2-1-什么样的人可称为倾听高手" class="headerlink" title="2.1 什么样的人可称为倾听高手"></a>2.1 什么样的人可称为倾听高手</h5><p>有些人以为“说话很困难，倾听很简单”，这其实是一种误解。因为倾听需要的能量比说话多，而且想要擅长倾听，也是需要技巧的。</p>
<ul>
<li>六种擅长倾听的人<ol>
<li>能听懂别人的话的人       头脑灵活、心胸宽广</li>
<li>能和别人开心聊天的人     可以一起享受谈话乐趣</li>
<li>创造畅销商品的人         可以问出顾客需求的人</li>
<li>擅长说服别人的人         擅长担任倾听的角色，能让对方愿意接受提议的人</li>
<li>话题丰富的人             拥有好奇心，能借由倾听学到知识</li>
<li>擅长倾听就是擅长说话的人 只要能成为倾听高手，就会是说话高手</li>
</ol>
</li>
</ul>
<h5 id="2-2-只是安静地听是没有礼貌的"><a href="#2-2-只是安静地听是没有礼貌的" class="headerlink" title="2.2 只是安静地听是没有礼貌的"></a>2.2 只是安静地听是没有礼貌的</h5><p>虽然没有开口，虽然眼睛闭着，但反正耳朵处于倾听状，这样就够了，这样的想法是错误的，因为倾听也是一种表达方式。让对方了解“我正在听你说话”是很重要的。</p>
<ul>
<li>“倾听”也是一种表达方式</li>
<li>倾听时的礼仪<ul>
<li>为什么“倾听”也是一种表达方式？<ul>
<li>看着对方的眼睛</li>
<li>上半身往前倾</li>
<li>表情有变化</li>
<li>自己要做出反应，例如在关键处出声附和等<ul>
<li>以态度与言词表现出自己正在听</li>
</ul>
</li>
</ul>
</li>
<li>唯有倾听者有所反应，沟通才是活的。</li>
</ul>
</li>
</ul>
<h5 id="2-3-要成为倾听高手，首先就是要善于回应"><a href="#2-3-要成为倾听高手，首先就是要善于回应" class="headerlink" title="2.3 要成为倾听高手，首先就是要善于回应"></a>2.3 要成为倾听高手，首先就是要善于回应</h5><p>训练倾听的第一步，就是当对方跟自己打招呼时要积极地回应。只要别人出声招呼，就要给予回应，让谈话有个热情的开始，才能开启良好的沟通。</p>
<ul>
<li>结果会因回应方式而有改变</li>
<li>“好的回应”与“不良回应”之差异</li>
</ul>
<table>
<thead>
<tr>
<th>好</th>
<th>不好</th>
</tr>
</thead>
<tbody>
<tr>
<td>听到别人的招呼后，立刻说“是！”</td>
<td>淡淡地“嗯”了一声，并站起来</td>
</tr>
<tr>
<td>说“是！”并立刻站起来</td>
<td>连珠炮似地说“是”、“是”，做出令人不安的回应</td>
</tr>
<tr>
<td>抬起头，看着对方说“是。”</td>
<td>低着头说“是。”</td>
</tr>
<tr>
<td>开朗、有精神地说“是！”</td>
<td>“是~”很没精神、拉长语气地回应</td>
</tr>
</tbody>
</table>
<h5 id="2-4-满脸笑容的人具备良好的倾听态度"><a href="#2-4-满脸笑容的人具备良好的倾听态度" class="headerlink" title="2.4 满脸笑容的人具备良好的倾听态度"></a>2.4 满脸笑容的人具备良好的倾听态度</h5><p>和说话一样，在倾听时，“笑容”也能发挥很大的力量。对说话者来说，倾听者的笑容胜过一切鼓励，而这也是倾听者对说话者一各爱的表现。</p>
<ul>
<li><p>带着笑容倾听的诀窍</p>
<ul>
<li>对说话者保持善意</li>
<li>对说话者敞开心扉</li>
<li>拥有与说话者分享谈话内容的心情</li>
</ul>
</li>
<li><p>打从心底愉快地接受对方，并随时保持这样的态度。</p>
</li>
</ul>
<h5 id="2-5-倾听时的姿势"><a href="#2-5-倾听时的姿势" class="headerlink" title="2.5 倾听时的姿势"></a>2.5 倾听时的姿势</h5><p>倾听者的姿势和表情一样，都是最容易外显、也会令人在意的部分。另外，姿势和服装一样，都是表露于外的部分，也都会随着内心的感受而改变。因此，透过一个人的姿势，就可以窥见他的内心。</p>
<ul>
<li>倾听时，上半身要往前倾</li>
<li>躺着听人说话的西乡</li>
<li>小心这样的姿势<ul>
<li>抖脚</li>
<li>双臂交叉于胸前</li>
<li>高高在上的姿势</li>
<li>态度散漫、服装邋遢</li>
</ul>
</li>
<li>修正<ul>
<li>双脚并拢</li>
<li>双手放在膝盖上</li>
<li>腰杆挺直，挺胸椅子往后坐一点</li>
<li>挺胸坐正</li>
</ul>
</li>
<li>听别人说话时，内心的想法会表现在姿势上</li>
</ul>
<h5 id="2-6-改善搭腔的方式"><a href="#2-6-改善搭腔的方式" class="headerlink" title="2.6 改善搭腔的方式"></a>2.6 改善搭腔的方式</h5><p>有很多人听别人说话时会不断点头，这或许只是一种无意识的习惯，但如果以为只要一直点头，就能令说话者满意的话，那就太武断了，还是适时地出声附和才行。</p>
<ul>
<li>同一句附和的话，不要重复三次以上<ul>
<li>在每一段话结束时，不疾不徐地回应</li>
<li>不要一直“没错”、“没错”地重复相同的附和语</li>
</ul>
</li>
<li>附和语的各类<ul>
<li>同意<ul>
<li>“原来如此”、“没错”、“的确是这样”、“你说得对”、“确实是这样”等等</li>
</ul>
</li>
<li>表示有同感<ul>
<li>“哇！”“喔！”“真有意思！”“这样很辛苦吧？”“我懂你的意思。”“哇，原来是这样”等等</li>
</ul>
</li>
<li>催促对方继续说<ul>
<li>“所以呢？”“然后呢？”“还有什么事呢？”“那件事后来怎么样了？”等等</li>
</ul>
</li>
<li>归纳<ul>
<li>“你说的是这个意思吗？”</li>
<li>“换句话说，是这个意思吗？”</li>
<li>“重点是这样吧？”</li>
<li>“总之，就是这样吧？”</li>
</ul>
</li>
<li>不好<ul>
<li>“那又如何呢？”</li>
<li>“我知道啦！”</li>
<li>“还是这样的。”</li>
<li>“应该说是~”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="2-7-不抢话"><a href="#2-7-不抢话" class="headerlink" title="2.7 不抢话"></a>2.7 不抢话</h5><p>在听别人说话时出声附和是一件好事，但有些人会不小心抢了说话者的话题，转而说起自己的事。因此，切记要以对方的话题为中心进行谈话。</p>
<ul>
<li>抢走话题就违反谈话的原则<ul>
<li>不独占谈话时间</li>
<li>不中途抢话</li>
<li>不打断对方的话</li>
</ul>
</li>
<li>太自我的人无法成为倾听高手</li>
</ul>
<h5 id="2-8-不打断对方的话"><a href="#2-8-不打断对方的话" class="headerlink" title="2.8 不打断对方的话"></a>2.8 不打断对方的话</h5><p>若当对方话说到一半时打断对方的话，这样也违反谈话原则。这么做不仅等于没做到倾听者应该协助说话者的原则，更会妨碍对方。</p>
<ul>
<li>耐心等候对方的话告一段落</li>
<li>遵守谈话的轮流制度</li>
<li>几种打断别人的话并插话的状况<ul>
<li>突然灵光乍现，想要立刻将好点子说出来</li>
<li>对方的话过于冗长，希望他停止</li>
<li>突然怒火中烧，无法保持沉默</li>
</ul>
</li>
<li>有些状况可以打断</li>
</ul>
<h5 id="2-9-“假装在听”，很快就会露出马脚"><a href="#2-9-“假装在听”，很快就会露出马脚" class="headerlink" title="2.9 “假装在听”，很快就会露出马脚"></a>2.9 “假装在听”，很快就会露出马脚</h5><p>有些人明明没有在听，却假装在听，这样是会马上被对方发现的。要做到专心倾听，必须先思考什么才是最重要的。</p>
<ul>
<li>“假装在听”会伤害对方</li>
<li>想专心倾听的必要条件<ul>
<li>平时就好好管理自己的健康。身体疲累、睡眠不足、宿醉等状态会让人无法专心倾听</li>
<li>不要一直想着自己烦恼的事。在听别人说话时，要暂时抛开一切，专心倾听</li>
<li>放松心情听。无法专心倾听时，不要勉强自己，要老实告诉对方</li>
<li>“这里不太方便。”换个场所。因为在杂音多、人潮多的地方，会无法专心倾听</li>
</ul>
</li>
</ul>
<h5 id="2-10-边听边整理的技术"><a href="#2-10-边听边整理的技术" class="headerlink" title="2.10 边听边整理的技术"></a>2.10 边听边整理的技术</h5><p>谈话时，一定会伴随着跳跃性思考、偏离主题与内容重复的情况。正因为如此，倾听者才更需要具备边听边整理并归纳重点的技巧。只要能做好这一点，当轮到自己说话时，也可以加以活用。</p>
<ul>
<li>只要时常练习将谈话内容重组，就可以养成边听边归纳的习惯<ul>
<li>掌握主题，了解说话者想要表达什么</li>
<li>省略不必要的部分，强调重点</li>
<li>改变顺序，像是先说结论</li>
</ul>
</li>
<li>边听边整理的要件<ul>
<li>整理：“整理处于混乱状态的物品，使其具有秩序。”“去除不必要的物品。”</li>
<li>丢弃，“开场白”、“重复的内容”、“已经完全明白的事”等，正题不需要的部分要丢弃</li>
<li>分类，进行分类，将相同、类似的内容集中在一起</li>
<li>排序，依据谈话的主题，将各个分类加以排序，把谈话内容做个总结</li>
</ul>
</li>
</ul>
<h5 id="2-11-话要听到最后"><a href="#2-11-话要听到最后" class="headerlink" title="2.11 话要听到最后"></a>2.11 话要听到最后</h5><p>如果没把别人的话全部听完，就无法听出重点，说话者也会因为无法完整说出自己的想法，而觉得受挫与烦躁。因此，为了让说话者容易表达自己，要让对方把话说完，这样才算得上是倾听高手。</p>
<ul>
<li>想说的话及真心话会在最后出现</li>
</ul>
<h5 id="2-12-创造或选择容易倾听的场所"><a href="#2-12-创造或选择容易倾听的场所" class="headerlink" title="2.12 创造或选择容易倾听的场所"></a>2.12 创造或选择容易倾听的场所</h5><p>倾听者也会受到“场所”的影响。如果场所不适合，就会分心而无法仔细聆听。如果是在连说话者也觉得说得很吃力的地方，就会因为无法充分听到内容而感到辛苦。因此，必须要创造一个容易倾听且说话者也可轻松畅谈的场所。</p>
<ul>
<li>创造可以专心倾听的场所</li>
<li>当有许多人一起听时，要坐在最前面</li>
</ul>
<h5 id="2-13-听无趣内容的秘诀"><a href="#2-13-听无趣内容的秘诀" class="headerlink" title="2.13 听无趣内容的秘诀"></a>2.13 听无趣内容的秘诀</h5><p>大概任何人都会同意，被迫听无趣的话是最痛苦的事吧。但真正的倾听高手，却能够将无聊的话转变为有趣的内容。要让谈话不至于变得无趣，倾听者也要担负一半的责任。</p>
<ul>
<li>令人觉得无聊的话，其实隐藏着小智慧</li>
<li>让无趣的话变得有意思的方法<ul>
<li>不要抱着“对方说话一定很无趣”的心态听</li>
<li>这样的内容要用这种方式倾听。大前提：对说话者的话表现出感兴趣的样子，并积极地寻找有用之处、以善意的态度倾听。<ul>
<li>重复的内容很多。以“总而言之，就是这个意思吧。”这句话做归纳，并催促对方继续说</li>
<li>同一句话说好多次。用平稳的口气强调，“这件事已经听过了。”</li>
<li>单调、无变化。以“想象一下，看看可能会变怎么样。”等来加入其他条件，和说话者一起想象那个场面</li>
<li>已经完全明白的事。试着抛出和说话者的话题相反的意见</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="2-14-聆听时要运用“您先说”这项要领"><a href="#2-14-聆听时要运用“您先说”这项要领" class="headerlink" title="2.14 聆听时要运用“您先说”这项要领"></a>2.14 聆听时要运用“您先说”这项要领</h5><p>纵使自己有意见，突然开口说也不会有人愿意听。因为人只想听愿意倾听自己说话的人所说的话。所以，只要先当倾听者，别人就会认真听你说话。</p>
<ul>
<li>不听完话就立刻抢走发言权的上司</li>
<li>“倾听”是不花钱的让步<ul>
<li>希望对方听自己说话的时候，就要先听对方说</li>
</ul>
</li>
</ul>
<h5 id="2-15-用眼睛倾听"><a href="#2-15-用眼睛倾听" class="headerlink" title="2.15 用眼睛倾听"></a>2.15 用眼睛倾听</h5><p>就如同“侧耳倾听”这句话一样，一般人都认为话是要用耳朵听的。事实上，光靠耳朵听是不够的，倾听高手还会用眼睛听。</p>
<ul>
<li>用眼睛察言观色</li>
<li>两个“E”是倾听时的关键 Eye and Ear</li>
</ul>
<h5 id="2-16-重点整理"><a href="#2-16-重点整理" class="headerlink" title="2.16 重点整理"></a>2.16 重点整理</h5><ul>
<li>所谓的倾听高手就是能听懂别人的话的人，能和别人开心聊天的人，创造畅销商品的人，说服高手、话题丰富的人，擅长说话的人。</li>
<li>倾听也是一种表达，也会对谈话气氛造成很大的影响。</li>
<li>当听到有人叫你时，要“立刻”“注视对方”，“声音宏亮地”回答。</li>
<li>带着笑容倾听时，要记住“对说话者保持善意”、“对说话者敞开心胸”、“抱着与说话者分享谈话内容的心情”等原则。</li>
<li>倾听时，必须注意不能有“抖脚”、“双臂交叉于胸前”、“姿态傲慢”、“态度散漫、服装邋遢”等行为。</li>
<li>“不独占说话时间”、“不抢话”、“不打断对方说话”是谈话最基本的原则。</li>
<li>重要的事或真心话大多会在最后出现。</li>
<li>倾听时，要根据状况选择最适合倾听的场所。</li>
<li>在谈判或处理问题时，记得先听听对方的意见。</li>
<li>训练自己从表情或姿势读取对方的内心想法，也就是用眼睛倾听的能力。</li>
<li>在说话者开口说第一句话时，就是倾听者以眼神交流的时机。</li>
</ul>
<h4 id="3-成为说话高手的〖十五项基本技巧〗"><a href="#3-成为说话高手的〖十五项基本技巧〗" class="headerlink" title="3. 成为说话高手的〖十五项基本技巧〗"></a>3. 成为说话高手的〖十五项基本技巧〗</h4><h5 id="3-1-传达心意也需要技巧"><a href="#3-1-传达心意也需要技巧" class="headerlink" title="3.1 传达心意也需要技巧"></a>3.1 传达心意也需要技巧</h5><p>如果说出口的话中无“心”，就和机械说话没什么两样。此外，传达内心想法也是需要技巧的。</p>
<ul>
<li>如果不靠态度及语言表达出来，就无法传达给对方</li>
<li>所谓诚意就是让对方了解自己的努力与用心</li>
</ul>
<h5 id="3-2-用全身表达的人说话最有魅力"><a href="#3-2-用全身表达的人说话最有魅力" class="headerlink" title="3.2 用全身表达的人说话最有魅力"></a>3.2 用全身表达的人说话最有魅力</h5><p>说话、倾听，这都是直接和眼前的人之间的互动。唯有运用你的全身表达，说的话才会令人印象深刻。</p>
<ul>
<li>沟通时至少要做到面对面</li>
<li>言语不是说话的一切</li>
</ul>
<h5 id="3-3-面带微笑和毫无笑容的差异"><a href="#3-3-面带微笑和毫无笑容的差异" class="headerlink" title="3.3 面带微笑和毫无笑容的差异"></a>3.3 面带微笑和毫无笑容的差异</h5><p>不论话说得多好听，只要表情阴沉，对方就会有所戒心。从表情可以看出一个人的内心，而对方也会依据表情做出反应。相反地，明朗的表情——微笑——可以照亮对方和自己的心。</p>
<ul>
<li>笑容有魅力的人可以成为领导者</li>
<li>只要行事开朗，就会真的变开朗<ul>
<li>业绩没有成长</li>
<li>部下无故制度</li>
<li>部下有明显疏失</li>
<li>等等状况</li>
</ul>
</li>
<li>当长官表情阴沉，职场的气氛只会越来越低落</li>
<li>内心感到无力、烦闷时，就算要勉强自己，也要表现出开心的样子，并挤出笑容</li>
<li>持续一段时间后，就能学会快速转换情绪，表情也会变得自然明亮</li>
<li>能在重要时刻展露笑容的人，就是能立即转换情绪的人。</li>
</ul>
<h5 id="3-4-看着对方的眼睛是谈话的基本原则"><a href="#3-4-看着对方的眼睛是谈话的基本原则" class="headerlink" title="3.4 看着对方的眼睛是谈话的基本原则"></a>3.4 看着对方的眼睛是谈话的基本原则</h5><p>看着对方，眼神交流，这样可以让心灵相通，谈起话来也会更有兴致。相反地，如果避开对方的眼睛，就会使谈话气氛变得僵硬，因为不看对方就等于是“无视”对方的存在</p>
<ul>
<li>眼神将会的瞬间最重要</li>
<li>注视对方眼睛说话的三大重点<ul>
<li>让眼神交会，维持短短的2~3秒就可以了</li>
<li>亲切、温和地看着对方的双眼周围</li>
<li>比对方看的时间再长一秒</li>
</ul>
</li>
<li>对于每天见面的人，只要短短地看上一秒就够了，一秒后请将视线移到其他地方</li>
<li>移开视线<ul>
<li>被怀疑是否隐瞒了什么事</li>
<li>被认为没自信而遭轻视</li>
<li>无法观察对方，谈话不投机</li>
</ul>
</li>
<li>看着眼睛时<ul>
<li>给人安心感令人感到亲切</li>
<li>被视为稳重、可靠的人物</li>
<li>可以掌握对方的内心想法</li>
</ul>
</li>
</ul>
<h5 id="3-5-音调要有变化"><a href="#3-5-音调要有变化" class="headerlink" title="3.5 音调要有变化"></a>3.5 音调要有变化</h5><p>关于声音最基本条件就是要能“听得见”。如果听不清楚，就不知道意思。但是，光是听得见是不够的。声音的感染力是否够强，以及能否发出稳重、给人好感的声音都很重要。</p>
<ul>
<li>要确认声音是否洪亮、抑扬顿挫、韵符的发音清楚<ul>
<li>音量大小如何</li>
<li>有抑扬顿挫吗？</li>
<li>韵符是否发音清楚</li>
</ul>
</li>
<li>发出给人好感的声音的秘诀<ul>
<li>腹式呼吸=从肚子发声<ul>
<li>从肚子发声</li>
<li>从鼻子缓缓地吸气</li>
<li>慢慢地将蓄积在腹部的气吐出</li>
</ul>
</li>
<li>嘴形=发韵符时的嘴形<ul>
<li>“a”要将嘴巴张开到约放进3要手指的程度</li>
<li>“e”“i”要将嘴巴往旁边张开</li>
<li>“o”“u”要将嘴唇收缩</li>
</ul>
</li>
<li>舌头位置=随着韵符变化<ul>
<li>口腔中的位置如图所示</li>
<li>出声练习“a-o-e”“i-u”以确认</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-6-和对方之间的距离"><a href="#3-6-和对方之间的距离" class="headerlink" title="3.6 和对方之间的距离"></a>3.6 和对方之间的距离</h5><p>在面对面的沟通中，和谈话对象的距离也会影响谈话的结果。这里候的距离分为两种，一为“物理距离”，一为“心理距离”。</p>
<ul>
<li>何谓物理距离与心理距离？<ul>
<li>亲密距离。和谈话对象的距离，要根据亲疏程度，以“亲密距离”为基准进行调整。</li>
<li>说话时的位置。<ul>
<li>“面对面”比较好的状况</li>
<li>肩并肩</li>
<li>斜对</li>
</ul>
</li>
<li>说话的场所</li>
</ul>
</li>
<li>保持心理距离的方法<ul>
<li>不唠唠叨叨地干涉</li>
<li>轻轻带过，让对方注意到</li>
<li>保持“不触、不离”的态度</li>
</ul>
</li>
<li>和对方之间的距离<ul>
<li>物理距离。伸直手臂到指尖可触及的地方为亲密距离，要根据对方的亲疏程度来调整与对方的距离</li>
<li>说话时的位置<ul>
<li>正面——正式的场合、男性之间</li>
<li>旁边——亲近的人之间、女性之间</li>
<li>斜向——女性对男性说话时</li>
</ul>
</li>
<li>心理距离。最好是持续保持关心但不深入<ul>
<li>不唠唠叨叨地干涉</li>
<li>对于担心的事等，轻轻触及并让对方注意到</li>
<li>保持不触、不离的态度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-7-能让人留下良好第一印象的人可成为说话高手"><a href="#3-7-能让人留下良好第一印象的人可成为说话高手" class="headerlink" title="3.7 能让人留下良好第一印象的人可成为说话高手"></a>3.7 能让人留下良好第一印象的人可成为说话高手</h5><p>对一个人的印象在初次见面时就已经决定。只要给人留下好印象，对方就会操持善意，乐于倾听并接受你的话。因此，给人好印象是成为说话高手的必备条件之一。</p>
<ul>
<li>要先了解自己在说话时会给别人什么样的印象<ul>
<li>没有注意到自己给对方留下什么样的印象</li>
<li>虽然隐约知道，却自傲地认为别人对自己的第一印象并不重要</li>
<li>完全没注意到的人</li>
<li>隐约注意到的人</li>
<li>过度自信的人</li>
</ul>
</li>
<li>给人好印象的三大重点<ul>
<li>表情</li>
<li>行礼</li>
<li>第一声——打招呼</li>
</ul>
</li>
<li>初次见面给人印象的差异<ul>
<li>好印象<ul>
<li>表情开朗</li>
<li>有活力</li>
<li>不拘束、容易亲近</li>
<li>落落大方</li>
<li>态度稳重</li>
<li>对方感到安心、信赖，谈话顺利进行</li>
</ul>
</li>
<li>坏印象<ul>
<li>爱理不理</li>
<li>蛮横霸道</li>
<li>没教养的态度</li>
<li>目中无人</li>
<li>慌慌张张</li>
<li>对方感到不安、无法信赖，谈话不顺利</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-8-将言语确实传达对方的方法"><a href="#3-8-将言语确实传达对方的方法" class="headerlink" title="3.8 将言语确实传达对方的方法"></a>3.8 将言语确实传达对方的方法</h5><p>话即使已经说出了，但对方未必专心地听。因此，必须努力将讯息传达给对方。如果只是一味地说，沟通无法成立。</p>
<ul>
<li>说话时要确定对方有没有在听<ul>
<li>在开始说话时，要仔细确认对方的状况。</li>
<li>要边说边观察对方的反应</li>
</ul>
</li>
<li>要成为倾听高手，必须在说话技巧上下工夫。当对方转为倾听者时，沟通才会成立。</li>
</ul>
<h5 id="3-9-说话的效果由倾听者决定"><a href="#3-9-说话的效果由倾听者决定" class="headerlink" title="3.9 说话的效果由倾听者决定"></a>3.9 说话的效果由倾听者决定</h5><p>说出口的话并不会原原本本地传达给倾听者；要如何解释这番话，是由倾听者决定的。如果没有仔细思考倾听者会如何解释就说出口，不仅无法获得效果，还会造成反效果。</p>
<ul>
<li>接收不等于理解<ul>
<li>要让“送信=收信”，必须经过确认</li>
<li>要让“收信=理解”，必须经过说明</li>
</ul>
</li>
<li>你如何看待对方？说话的效果由倾听者决定</li>
<li>如何面对掌握决定沟通良否的倾听者<ul>
<li>要先判断对方是什么样的人</li>
<li>如何应对对方这种出乎意料的反应</li>
</ul>
</li>
<li>在你费心练习应对倾听者的技巧的同时，说话技巧也会跟着提升</li>
</ul>
<h5 id="3-10-能进行平等沟通的人是说话高手"><a href="#3-10-能进行平等沟通的人是说话高手" class="headerlink" title="3.10 能进行平等沟通的人是说话高手"></a>3.10 能进行平等沟通的人是说话高手</h5><p>要确保说与听之间的平衡，双方必须具备平等的关系。如果是上对下的关系，就会变成上对下的单向沟通，而无法产生双向沟通。</p>
<ul>
<li>说教的口气会令谈话中断<ul>
<li>改掉说教的口气</li>
<li>站在和对方相同的高度</li>
</ul>
</li>
<li>重新思考尊敬用语的功能</li>
<li>尊敬用语简易表<ul>
<li>敬语的三大支柱<ul>
<li>敬语“您（做）……”“您……”</li>
<li>谦虚语“在下……（请您）”</li>
<li>敬重语。尊敬的文体，高雅的用语</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>敬语</th>
<th>基本语</th>
<th>谦虚语</th>
</tr>
</thead>
<tbody>
<tr>
<td>请您过目</td>
<td>你看</td>
<td>我看……</td>
</tr>
<tr>
<td>您请听我说</td>
<td>你请听我说</td>
<td>遵命<br>请教您……<br>拜托您</td>
</tr>
<tr>
<td>您说</td>
<td>你说</td>
<td>我说</td>
</tr>
<tr>
<td>您晓得</td>
<td>你知道</td>
<td>我了解</td>
</tr>
<tr>
<td>您在</td>
<td>你在</td>
<td>我在</td>
</tr>
<tr>
<td>您前往</td>
<td>你去</td>
<td>我去</td>
</tr>
<tr>
<td>您驾临<br>您莅临<br>您大驾光临</td>
<td>你来</td>
<td>我来</td>
</tr>
<tr>
<td>您做</td>
<td>你做</td>
<td>我做</td>
</tr>
</tbody>
</table>
<blockquote>
<p>只要记住敬请的主语为“您”，谦虚语的主语为“我”“我们”等即可</p>
</blockquote>
<h5 id="3-11-顺利与人攀谈的技巧"><a href="#3-11-顺利与人攀谈的技巧" class="headerlink" title="3.11 顺利与人攀谈的技巧"></a>3.11 顺利与人攀谈的技巧</h5><p>主动和别人说话时，就称为“问候”。问候是建立人际关系的第一步，但相反地，有些人会在被喊往后，露出厌恶的表情。总之，要和人攀谈，还是需要一些小技巧。</p>
<ul>
<li>磨炼自己的问候技巧<ul>
<li>先主动和别人说话</li>
<li>根据对方的状况应对<ul>
<li>在说话之前，要先观察对方的状况</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-12-问候后再加上一句话，就可以捉住对方的心"><a href="#3-12-问候后再加上一句话，就可以捉住对方的心" class="headerlink" title="3.12 问候后再加上一句话，就可以捉住对方的心"></a>3.12 问候后再加上一句话，就可以捉住对方的心</h5><p>“早安”、“你好”、“你先请”等问候语都是特定场合的固定用语，非常实用，但如果每次都只说这些话，就会有些不足。如果能在问候语地之后再加上一句话，就可以捕获人心。</p>
<ul>
<li>多说一句话和没有这么做的差距<ul>
<li>唯有对对方保持兴趣，用心掌握对方所关心的事，那多加的一句话才可以捉住对方的心。</li>
</ul>
</li>
<li>什么样的问候语可以捉住对方的心？<ul>
<li>开朗、有活力、爽朗的</li>
<li>随时保持温柔的微笑</li>
<li>礼让对方、从容的</li>
<li>努力拉近距离，制造亲切感</li>
<li>清楚表现自己的存在</li>
<li>左右印象的第一声</li>
<li>借由多说一句话来赢得信任</li>
<li>做得到的人可以掳获人心</li>
<li>与人会面时问候的方式要多做变化</li>
<li>没有人会因为别人的问候与回应而生气</li>
</ul>
</li>
</ul>
<blockquote>
<p>问候是建立人际关系的第一步。但是，如果只将其视为一种形式，就会只流于为了做而做，并自认“我已经打过招呼了”而感到满足。应该将其视为一种智慧，并加以磨炼。完美的问候可以让人生更为闪亮。</p>
</blockquote>
<h5 id="3-13-好的自我介绍会提高别人对你的评价"><a href="#3-13-好的自我介绍会提高别人对你的评价" class="headerlink" title="3.13 好的自我介绍会提高别人对你的评价"></a>3.13 好的自我介绍会提高别人对你的评价</h5><p>利用自我介绍让对方对自己保持好感，之后的谈话就能顺利进行。在众人面前自我介绍，是让许多人注意到自己的绝佳机会。根据介绍方式的不同，会让别人对你的评价产生很大的差异。</p>
<ul>
<li>自我介绍是演讲的基础<ul>
<li>在众人面前将自己的想法以简单易懂、简洁的方式表达出来，是身为社会人应该学习的重要技巧。</li>
</ul>
</li>
<li>受瞩目的“自我介绍法”<ul>
<li>问候</li>
<li>说出自己的全名</li>
<li>内容<ul>
<li>自我介绍的内容最好能锁定一项可以突显自己的特色。</li>
<li>自我介绍就是针对自己进行简报。</li>
</ul>
</li>
</ul>
</li>
<li>演讲的“重点”与其“效果”<ul>
<li>演讲的基本流程</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>问候</th>
<th>介绍命名</th>
<th>内容</th>
<th>再说一次命名、结尾问候</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 开始时稍作停顿<br>2.在问候后稍作停顿</td>
<td>清楚说出命名</td>
<td>集中重点</td>
<td>决定停止的一刻</td>
</tr>
<tr>
<td>说话者可缓和情绪<br>让倾听者注意到自己<br>掌握听众的反应</td>
<td>让对方感到亲切</td>
<td>集中重点</td>
<td>归纳整体</td>
</tr>
</tbody>
</table>
<h5 id="3-14-冷场时，该怎么办？"><a href="#3-14-冷场时，该怎么办？" class="headerlink" title="3.14 冷场时，该怎么办？"></a>3.14 冷场时，该怎么办？</h5><p>谈话中断、出现冷场时，有不少人都会不知所措、感到害怕。听说美国人在遇到这种状况时，会说“刚才上帝经过”，并继续谈话。那你呢？</p>
<ul>
<li>不要着急，等待对方开口</li>
<li>抛出共通的话题<ul>
<li>“食-知-通-天-头-流-朋-兴-身-旋”<ul>
<li>食，食物、饮料</li>
<li>知，知识、情报</li>
<li>通，通勤相关话题</li>
<li>天，天气、气候</li>
<li>头，头条新闻</li>
<li>流，流行趋势</li>
<li>朋，朋友、伙伴</li>
<li>兴，兴趣、休闪</li>
<li>身，身体、健康</li>
<li>旅，旅游、旅行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-15-口头禅会透露出说话者的态度"><a href="#3-15-口头禅会透露出说话者的态度" class="headerlink" title="3.15 口头禅会透露出说话者的态度"></a>3.15 口头禅会透露出说话者的态度</h5><p>在说与听的过程中，会出现连自己也没有注意到的“口头禅”。虽然这些几乎都是无意中说出口的，但实际上，却会表现出说话者对对方的态度及对事物的看法。</p>
<ul>
<li>这样的口头禅要改掉</li>
<li>每个人或多或少都有的口头禅与其背后的心态</li>
</ul>
<table>
<thead>
<tr>
<th>口头禅</th>
<th>背后的心态</th>
</tr>
</thead>
<tbody>
<tr>
<td>反正</td>
<td>反正像我这样的人，这种自暴自弃的态度</td>
</tr>
<tr>
<td>随便</td>
<td>不够关心</td>
</tr>
<tr>
<td>没办法</td>
<td>太早死心，推卸责任</td>
</tr>
<tr>
<td>好吗</td>
<td>轻易妥协</td>
</tr>
<tr>
<td>不是这样啦</td>
<td>立刻否认</td>
</tr>
<tr>
<td>把话说清楚</td>
<td>过于强势</td>
</tr>
<tr>
<td>所以呢</td>
<td>你都这样说了，采取被动的态度</td>
</tr>
<tr>
<td>那种事我早就知道了</td>
<td>别人一唠叨就烦躁</td>
</tr>
<tr>
<td>不准</td>
<td>太过坚持</td>
</tr>
<tr>
<td>反过来说</td>
<td>强调自己的意见</td>
</tr>
</tbody>
</table>
<blockquote>
<p>只要探讨造成口头禅的背后原因，就能看清说话者的心态。</p>
</blockquote>
<h5 id="3-16-重点整理"><a href="#3-16-重点整理" class="headerlink" title="3.16 重点整理"></a>3.16 重点整理</h5><ul>
<li>人与人之间的关系从诚心的、面对面的沟通产生。</li>
<li>即使心里感到无力、有所牵挂时，也要勉强自己表现出开朗的样子，并展露笑容。</li>
<li>谈话时将视线移开的话，会让对方感到困惑，而无法建立良好的关系。</li>
<li>将自己说的话录下来，以确认说话时的音量与抑扬顿挫等。</li>
<li>根据亲疏程度，以“亲密距离”为基准，调整自己与对方的距离。</li>
<li>利用表情、行礼、问候等建立良好的第一印象。</li>
<li>要将谈话内容确实传达给对方，必须在说话前先确认对方的状况，并在过程中观察对方的反应。</li>
<li>要让送信=收信，必须经过确认；要让收信=理解，必须经过说明。</li>
<li>上司对部下不可采取上对下的态度说话，而要进行平等的沟通。</li>
<li>问候要“主动攀谈”，并“根据对方的状况应对”。</li>
<li>问候语后再多加一句话，就可以打动对方的心。</li>
<li>“随便”、“还好”、“反正”等口头禅要改掉。</li>
</ul>
<h4 id="4-成为倾听高手的【十大应用技巧】"><a href="#4-成为倾听高手的【十大应用技巧】" class="headerlink" title="4. 成为倾听高手的【十大应用技巧】"></a>4. 成为倾听高手的【十大应用技巧】</h4><h5 id="4-1-和沉默寡言者谈话的技巧"><a href="#4-1-和沉默寡言者谈话的技巧" class="headerlink" title="4.1 和沉默寡言者谈话的技巧"></a>4.1 和沉默寡言者谈话的技巧</h5><p>就算主动攀谈，只要对方不说话，就无法接收到对方的任何讯息。而说话者也有很多种类型，有些人比较沉默，不太开口。因此，在这一章中，就来讨论应该怎么应对这些情况。</p>
<ul>
<li><p>让沉默寡言的人开口的技巧</p>
<ul>
<li>自己也要提供话题</li>
<li>耐心等待</li>
<li>倾听时要有所反应<ul>
<li>表情生动</li>
<li>看着对方的眼睛</li>
<li>适时附和</li>
</ul>
</li>
</ul>
</li>
<li><p>对方不说话的理由与应对之道</p>
<ul>
<li>寡言理由<ul>
<li>看心情做事的人，提不起劲来</li>
<li>不晓得要说什么</li>
<li>恐惧开口</li>
<li>认为对方不会听自己说话，不信任感、戒心很强</li>
<li>对说话者有所抗拒</li>
</ul>
</li>
<li>对策<ul>
<li>趁他心情好时攀谈</li>
<li>主动提供话题，让他想到可以说什么</li>
<li>制造让对方可以安心说话的环境</li>
<li>倾听时要有所回应</li>
<li>提醒自己要和对方建立良好的人际关系</li>
</ul>
</li>
</ul>
</li>
<li>没有人是天生的沉默寡言。</li>
</ul>
<h5 id="4-2-转为倾听者的时机"><a href="#4-2-转为倾听者的时机" class="headerlink" title="4.2 转为倾听者的时机"></a>4.2 转为倾听者的时机</h5><p>不论做什么事，时机都是最重要的。擅长倾听的人也擅长抓住转为倾听者的时机，会在不知不觉中，自然地转为倾听者的角色，让谈话更热络。那么，其秘诀是什么呢？</p>
<ul>
<li>为什么谈话时无法有良好的互动？“别人抛出的球一定要丢回去”</li>
<li>边说边读取对方的讯息<ul>
<li>表情：其中隐藏着的心情</li>
<li>动作：眼睛看下方，身体往前倾等动作如何</li>
<li>视线：眼睛看着哪里</li>
<li>变化：态度的变化。内心状态会表现于态度上</li>
<li>现场的条件：一对一、一对多、周围的状况等</li>
</ul>
</li>
<li>转为倾听者的时机<ul>
<li>当别人主动攀谈时，要先担任倾听者</li>
<li>对方不说话时，不要立刻开口，要先把这当作转为倾听者的时机</li>
<li>建立可以轻松说话、容易开口的气氛</li>
<li>当对方出现想要说话的表情、动作、视线移动等时，可不要忽略了</li>
<li>“然后呢？”轻松地催促对方，然后微笑等候</li>
<li>当对方开口后，就要适时地附和</li>
<li>谈话告一段落时，就以“对了，关于xx事，你有什么看法”来引导对方说话</li>
<li>说话时，要不时地说“你”、“x先生”等，经常带到对方的称谓，让对方更容易融入谈话之中</li>
<li>不要使用“为什么？”“有什么话想说吗？”等诘问的口气</li>
<li>对方提出问题后，不要立刻回答，应该先反问，“那你有什么看法呢？”</li>
<li>有些时候，问题=自己想说的话</li>
</ul>
</li>
</ul>
<h5 id="4-3-从对方口中问出真心话的技巧"><a href="#4-3-从对方口中问出真心话的技巧" class="headerlink" title="4.3 从对方口中问出真心话的技巧"></a>4.3 从对方口中问出真心话的技巧</h5><p>场面话会浮上台面，但真心话只会隐藏在背后。即使了解对方说的是场面话，但想知道对方隐藏在背后的真心话时，应该怎么做才能得到答案呢？</p>
<ul>
<li>让对方卸下心防</li>
<li>向对方示弱。想要听到对方的真心话，自己也必须交出某些东西来。若能暴露自己的缺点或弱点，对方也会卸下以防，吐露出真心话。</li>
</ul>
<h5 id="4-4-听懂言外之意很重要"><a href="#4-4-听懂言外之意很重要" class="headerlink" title="4.4 听懂言外之意很重要"></a>4.4 听懂言外之意很重要</h5><blockquote>
<p>如果一句话只有一种意思，听起来就轻松多了。但事实上，一句话还包含多种言外之意，所以，如果不能正确听懂对方的意思，就无法成为倾听高手。</p>
</blockquote>
<ul>
<li>字面意思与隐含意思<ul>
<li>现场状况</li>
<li>前后关系</li>
<li>说话者的心情</li>
</ul>
</li>
<li>了解言外之意的线索<ul>
<li>听对方的语气</li>
<li>看对方的表情</li>
<li>根据当场的状况来判断</li>
</ul>
</li>
<li>例</li>
</ul>
<table>
<thead>
<tr>
<th>例</th>
<th>描述</th>
<th>言外之意</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抱歉，你在生气吗？男性同事问<br>我哪有在生气！女性同事说</td>
<td>当然是在生气（从语气得知）</td>
</tr>
<tr>
<td>2</td>
<td>去拜托同事担任某个大会的负责人时，同事以询问般的表情说：“就算没有我，还是有其他人可以胜任吧？”</td>
<td>“请您务必帮忙。”他在等你说这句临门一脚的话（从表情得知）</td>
</tr>
<tr>
<td>3</td>
<td>上司边准备车票边说：“明天又要出差了，没有人可以代替我去吗？”</td>
<td>自认为“没有人可以取代我。”（从状况知）</td>
</tr>
</tbody>
</table>
<h5 id="4-5-接受对方的情绪，抱着同理心倾听的诀窍"><a href="#4-5-接受对方的情绪，抱着同理心倾听的诀窍" class="headerlink" title="4.5 接受对方的情绪，抱着同理心倾听的诀窍"></a>4.5 接受对方的情绪，抱着同理心倾听的诀窍</h5><blockquote>
<p>话里会隐含说话者的心情与感情。即使是没有道理的一段话，只要了解对方的心情，并保持同理心，说话者也会感到满足而使谈话顺利进行。</p>
</blockquote>
<ul>
<li>如果以道理来回应，就会变成一种说教</li>
<li>负面的发言有其理由</li>
<li>当说话者处于慌乱状态时的倾听方式</li>
<li>例：对正在咳嗽的同事说：“你怎么感冒了呢？”“不可以感冒吗？”这种时候应该怎么回应呢？<ul>
<li>好的回应：先问“怎么了？”“是不是很不舒服呢？”是体会对方心情的说法。说“因为这阵子一直在加班吧？”提及背后的原因。对方也会感到愧疚，而说，“不好意思，我太烦躁了。”</li>
<li>不好的回应：责备对方，“你说那是什么话！”说“我是因为担心你才问你的，没必要那样说吧。”接着挑对方的错。对方一直感到不满，便骂说：“基本上，你最近很傲慢喔。态度改一改吧。”</li>
</ul>
</li>
</ul>
<h5 id="4-6-倾听抱怨的技巧"><a href="#4-6-倾听抱怨的技巧" class="headerlink" title="4.6 倾听抱怨的技巧"></a>4.6 倾听抱怨的技巧</h5><blockquote>
<p>说到抱怨，不论对说的人或被说的人来说，都不是件愉快的事。抱怨虽然是表达不满，但如果一方能将其转化为正面的说法，一方能以彼此都能满意的方式来解读，就会变成谚语所说的“转祸为福”。</p>
</blockquote>
<ul>
<li>首先要清楚地开口道歉<ul>
<li>对不起</li>
<li>给您添麻烦了</li>
<li>抱歉</li>
</ul>
</li>
<li>用全身倾听<ul>
<li>不要畏畏缩缩，要用全身</li>
<li>靠近对方，行最敬礼</li>
</ul>
</li>
<li>“转祸为福”以同理心倾听对方的说法<ul>
<li>以“是的”“确实是”等说法附和</li>
<li>在关键时看着对方的眼睛</li>
<li>以“您说的没错。”“我也这么想。”等表示同感的话附和</li>
<li>听完对方的话</li>
</ul>
</li>
</ul>
<h5 id="4-7-如何听“说明”以加快理解"><a href="#4-7-如何听“说明”以加快理解" class="headerlink" title="4.7 如何听“说明”以加快理解"></a>4.7 如何听“说明”以加快理解</h5><blockquote>
<p>听相同的说明，有的人懂，有的人却不懂，其中的差异就在于是否具备聆听说明的技巧。除了寻求简单易懂的说明外，听说明的方式也是沟通时的重要技巧。</p>
</blockquote>
<ul>
<li>拥有想了解的意愿</li>
<li>听说明时的技巧<ul>
<li>确实掌握主题</li>
<li>掌握整体与各部分的关系</li>
<li>不清楚的部分要毫无顾忌地发问</li>
</ul>
</li>
<li>倾听说明时的态度<ul>
<li>消极<ul>
<li>反正听了也不懂</li>
<li>有需要时再问就好了</li>
<li>因为说话者不擅长说明，所以不想听</li>
<li>在不具备知识的状况下听</li>
<li>不知如何发问</li>
</ul>
</li>
<li>积极<ul>
<li>抱着好奇的心听</li>
<li>即使只有现在懂，也要听</li>
<li>边听边整理</li>
<li>事先作功课</li>
<li>发问</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="4-8-引导对方说话的发问技巧"><a href="#4-8-引导对方说话的发问技巧" class="headerlink" title="4.8 引导对方说话的发问技巧"></a>4.8 引导对方说话的发问技巧</h5><blockquote>
<p>如果将倾听视为积极的行动，则可分为“会立即做出反应的倾听”与“主动发问并倾听”这两种方法。这一节针对后者，为大家说明引导对方说话的发问技巧。</p>
</blockquote>
<ul>
<li>多多发问</li>
<li>如何引导对方说话？<ul>
<li>先弄清楚想问什么：事先准备问题，弄清楚想从对方那里获得什么资讯</li>
<li>从与主题相关的事开始发问：从主题周边发问，逐渐逼近核心<ul>
<li>“怎么样，很忙吗？”</li>
<li>“老是要加班，都快累死了。”</li>
<li>“加班费很多吧？”</li>
<li>“是的，可是我们公司的底薪很少。”</li>
<li>“每一家公司都这么说。那和上司相处还融洽吗？”</li>
<li>“我们上司很严格。”</li>
<li>“那就比较辛苦了。”</li>
<li>“不过，工作很有趣。”</li>
<li>“投资顾问的工作有趣之处在哪里呢？”——其实这才是想了解的内容</li>
</ul>
</li>
<li>以开放式问题引导对方说话</li>
</ul>
</li>
<li>发问要根据目的，集中要点，以开放式的问题增添变化</li>
</ul>
<h5 id="4-9-让对方采取行动的发问技巧"><a href="#4-9-让对方采取行动的发问技巧" class="headerlink" title="4.9 让对方采取行动的发问技巧"></a>4.9 让对方采取行动的发问技巧</h5><blockquote>
<p>发问高手是能够利用发问引领对方的人。只要借由发问吸引对方注意，并专心倾听对方的回答，就可以让对方产生自发意愿，并使其付诸行动。因此，发问也是说服别人的一项武器。</p>
</blockquote>
<ul>
<li>诘问无法让人采取行动</li>
<li>发问，让对方提高注意力</li>
<li>能促使对方作出决定的发问技巧<ul>
<li>对于犹豫不决的人，要提出二选一的问题，促使他作出决定。</li>
<li>另外，还有一种说法可以减轻对方的负担。“要不要由我当召集人？”</li>
</ul>
</li>
</ul>
<h5 id="4-10-听讨厌的人说话的技巧"><a href="#4-10-听讨厌的人说话的技巧" class="headerlink" title="4.10 听讨厌的人说话的技巧"></a>4.10 听讨厌的人说话的技巧</h5><blockquote>
<p>人类天生就有自己的好恶。只要是自己喜欢的人说的话，听起来全部都是顺耳的；但如果是自己讨厌的人说的话，就一点都不想听。因此，请反省一下有没有养成未审先判的习惯。</p>
</blockquote>
<ul>
<li>人类的感情容易在倾听时产生</li>
<li>听讨厌的人说话的三大要领<ul>
<li>只听必要的内容</li>
<li>保持不听会有损失的想法，强迫自己听</li>
<li>至少要尝试去喜欢对方</li>
<li>讨厌的种类：<ul>
<li>没来由的讨厌</li>
<li>个性不合</li>
<li>理性知道不可以，但就是无法控制的讨厌</li>
<li>其他</li>
</ul>
</li>
<li>讨厌的人拥有的优点：<ul>
<li>拥有独特的创意</li>
<li>能作出明智的判断</li>
<li>敏锐的洞察力</li>
</ul>
</li>
<li>唯独有办法听讨厌的人说话的人，才称得上是倾听高手</li>
</ul>
</li>
<li>别人的话，你听进去多少？<ul>
<li>是否曾因为贸然断定而误会别人的意思？</li>
<li>听别人说话时，是否会觉得困或头脑昏沉？</li>
<li>当说话者是自己讨厌的人时，是否会把心封闭？</li>
<li>是否曾因为对方说话的方式不够高明而不想听？</li>
<li>是否曾因为一直想着自己要说的话，而没把别人说的话听进去？</li>
<li>是否曾因为自己想先说话，而打断对方的话？</li>
<li>是否会因为对话题没兴趣而不想听？</li>
<li>是否会因为别人的想法和自己不同，而坚决不听？</li>
<li>听别人说话时，是否会交叉双臂，或者面无表情？</li>
<li>听别人说话时若有不清楚的地方，是否也不会发问或确认？</li>
</ul>
</li>
</ul>
<h5 id="4-11-重点整理"><a href="#4-11-重点整理" class="headerlink" title="4.11 重点整理"></a>4.11 重点整理</h5><ul>
<li>对于沉默寡言的人，要“主动提供话题”、“不慌不忙地等待”、“听话时要及时做出反应”。</li>
<li>说话时要一边观察对方的反应。当对方出现想说话的表情时，要转为倾听的角色。</li>
<li>向对方示弱，投向对方的怀抱，如此就可以听到对方的真心话。</li>
<li>语言可以分为“字面意义（字典上的意思）”与“隐含意义（方外之意）”。隐含意义的解释和“语调”、“表情”、“状况”等有关。</li>
<li>要能了解对方的心情，抱着同理心倾听。</li>
<li>听到对方抱怨自己时，要“尽早”“诚心道歉”。</li>
<li>听别人说明时，要“确实掌握主题”、“掌握整体与各部分的关系”、“若有不清楚的地方，就无所顾忌地勇敢发问”。</li>
<li>提出问题时，要“先弄清楚自己想问什么”、“从周边的问题开始发问”、“提出开放式的问题让对方说明”。</li>
<li>诘问是假借发问之名，行责难之实，是强要对方接受自己的意见。诘问并无法让别人采取行动。</li>
<li>说服别人时，必须“试着减轻对方的负担”，对于会让对方感到压迫的点要轻轻带过。</li>
<li>听讨厌的人说话时，要“只听必要的部分”、“保持不听会有损失的想法，强迫自己听”。</li>
<li>即使是讨厌的人，也要努力试着去喜欢他。</li>
</ul>
<h4 id="5-成为说话高手的【十三项应用技巧】"><a href="#5-成为说话高手的【十三项应用技巧】" class="headerlink" title="5. 成为说话高手的【十三项应用技巧】"></a>5. 成为说话高手的【十三项应用技巧】</h4><h5 id="5-1-让初次见面的人敞开心扉的诀窍"><a href="#5-1-让初次见面的人敞开心扉的诀窍" class="headerlink" title="5.1 让初次见面的人敞开心扉的诀窍"></a>5.1 让初次见面的人敞开心扉的诀窍</h5><blockquote>
<p>初次见面时，彼此都会有戒心，也很容易看到对方的缺点。想让自己给对方留下正面的印象，就必须做好相当的准备。</p>
</blockquote>
<ul>
<li>表现明亮的一面：笑容才真的具备让人敞开心扉的力量</li>
<li>提及对方关心的人、事、物：不论是什么人，只要有人提及自己关心的人、事、物，就会怦然心动。</li>
<li>利用这样的表现捉住对方的心</li>
<li>如何让初次见面的人敞开心扉<ul>
<li>事先收集情报：什么样的人？兴趣？年龄？工作上的问题？在公司的立场、角色</li>
<li>当场观察：状态如何？非常忙碌，或是还算悠闲？健康状态如何？气色如何？心情如何？会不会很沮丧？</li>
<li>做些特殊的表现：花点心思让对方留下好印象。以笑容应对，动作干净利落，有礼貌，提及对方开心的人、事、物</li>
</ul>
</li>
</ul>
<h5 id="5-2-将难以启齿的话高明地传达出去的技巧"><a href="#5-2-将难以启齿的话高明地传达出去的技巧" class="headerlink" title="5.2 将难以启齿的话高明地传达出去的技巧"></a>5.2 将难以启齿的话高明地传达出去的技巧</h5><blockquote>
<p>似乎有不少人在想提出不同看法来反驳他人的意见时，会觉得很难开口。事实上，不能只是追求表面上的和谐而已，要陈述自己的意见时，也必须能够巧妙地处理对方的排斥或反感。</p>
</blockquote>
<ul>
<li>别害怕对方产生反感或排斥：唯有能在表明不同的意见后，还能和对方商量的，才称得上是真正的说话高手。</li>
<li>不要立刻否定</li>
<li>活用魔法句子：可以缓和对方的抗拒及反弹的话，称为“魔法句子”<ul>
<li>有所主张或要反驳别人时：<ul>
<li>听起来好像是在反驳您的意见，但……</li>
<li>我感到很惶恐，但……</li>
<li>或许有些自大，但……</li>
<li>如果听起来很傲慢，那我先说声对不起</li>
<li>如果是我误解的话，请原谅我</li>
<li>您是前辈，我这样的说实在很不好意思</li>
<li>我了解您的意思，但……</li>
<li>抱歉，请容我说一句话</li>
<li>或许我们的意思是一样的，但……</li>
<li>请不要生气，我并不是要说严厉的话，但……</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="5-3-别人说了不顺耳的话时，可以巧妙反驳的技巧"><a href="#5-3-别人说了不顺耳的话时，可以巧妙反驳的技巧" class="headerlink" title="5.3 别人说了不顺耳的话时，可以巧妙反驳的技巧"></a>5.3 别人说了不顺耳的话时，可以巧妙反驳的技巧</h5><blockquote>
<p>当别人说了让自己怒火中烧的话时，有不少人都会忍耐而不加以反驳。但如果勉强忍耐，有一天可能会突然爆发出来。因此，最好学会能情绪稳定地加以反驳的方法。</p>
</blockquote>
<ul>
<li>如果反应太情绪化就输了</li>
<li>做个深呼吸，让时间暂停一下：在快发火时，可以站起来或做个深呼吸，让时间暂停一下<ul>
<li>沉默并忍耐——有碍健康</li>
<li>发火并攻击对方——落入对方的陷阱</li>
<li>深呼吸，并从不同的角度回答——可以不发火地报一箭之仇</li>
</ul>
</li>
</ul>
<h5 id="5-4-简单明了的说明技巧（一）"><a href="#5-4-简单明了的说明技巧（一）" class="headerlink" title="5.4 简单明了的说明技巧（一）"></a>5.4 简单明了的说明技巧（一）</h5><blockquote>
<p>过去，人们一般一直有讨厌说明的倾向，因此，经常会出现解释不清楚而令人难以理解的状况。但是，在现今的社会，简单明了地说明已成为说话者的责任，因为现在已是一个说明技巧受到要求的时代。</p>
</blockquote>
<ul>
<li>说明的前提<ul>
<li>自己是否非常清楚要说明的事件。自己是否已充分理解内容<ul>
<li>实际说给某个人听，以确认自己的理解程度</li>
<li>试着自问自答<ul>
<li>词汇的定义，“何谓……”</li>
<li>举例，“举例来说，是什么样的事”</li>
<li>理由，“为什么需要呢？”</li>
</ul>
</li>
<li>“以为自己已经了解”是很危险的</li>
</ul>
</li>
<li>对方的理解力。对方已了解到什么程度<ul>
<li>事先确认对方具备多少相关认知</li>
<li>说明时，可以问，“你知道xx吗？”来确认对方的了解程度</li>
</ul>
</li>
<li>说明过于详细时，有时反而会变得更难懂</li>
</ul>
</li>
</ul>
<h5 id="5-5-简单明了的说明技巧（二）"><a href="#5-5-简单明了的说明技巧（二）" class="headerlink" title="5.5 简单明了的说明技巧（二）"></a>5.5 简单明了的说明技巧（二）</h5><blockquote>
<p>所谓说明，是一种要将“不懂”的状态转为“懂”的沟通。“懂”不只是可以理解个别的事件而已，也要能够理解个别事件之间的关联。</p>
</blockquote>
<ul>
<li>让对方了解事物之间的关联</li>
<li>循序渐进、有条有理</li>
<li>擅长说明的十大原则<ul>
<li>根据对方的理解程度，事前准备让对方理解的方法</li>
<li>在说明过程中，也要确认对方的反应</li>
<li>先表明自己想说什么，并说明其理由与根据</li>
<li>如果要让对方了解做法或方法，可以先做给对方看，然后再说明理由</li>
<li>说明部分与整体的关系</li>
<li>利用比喻、例子来说明</li>
<li>要让对方了解特征时，可以利用对比的方式说明</li>
<li>不要一次介绍太多（指资讯量）</li>
<li>不要遗漏关键字</li>
<li>使用对方可以理解的语言——专业术语要改为日常用语</li>
</ul>
</li>
</ul>
<h5 id="5-6-让别人付诸行动的说服术"><a href="#5-6-让别人付诸行动的说服术" class="headerlink" title="5.6 让别人付诸行动的说服术"></a>5.6 让别人付诸行动的说服术</h5><blockquote>
<p>人类无法单独生存，唯有获得他人的协助，自己的人生才能成立。话虽如此，别人不太会照自己的想法行动，因此，说服的技巧就很重要了。</p>
</blockquote>
<ul>
<li>能让对方理解，才能说服对方</li>
<li>所谓让别人付诸行动，就是要让对方感动</li>
<li>所谓的说服就是“说明+让人产生自发意愿”</li>
<li>谚语具有让人行动的力量，要能一语中的，必须养成充分思索自己的发言内容的习惯</li>
<li>说出口的话要让人能够想象</li>
<li>人的心会像钟摆一样摆动</li>
</ul>
<table>
<thead>
<tr>
<th>自发</th>
<th>反抗</th>
</tr>
</thead>
<tbody>
<tr>
<td>商量</td>
<td>强制</td>
</tr>
<tr>
<td>诱导</td>
<td>强加于人</td>
</tr>
<tr>
<td>能让人浮现想象画面的话</td>
<td>道理连篇</td>
</tr>
</tbody>
</table>
<blockquote>
<p>人只要受到别人单方面强迫性的要求，就会想要反抗。聪明的做法应该是慢慢逼近核心，让对方自己产生行动意愿。</p>
</blockquote>
<h5 id="5-7-让人爽快答应的诀窍"><a href="#5-7-让人爽快答应的诀窍" class="headerlink" title="5.7 让人爽快答应的诀窍"></a>5.7 让人爽快答应的诀窍</h5><blockquote>
<p>不敢随便开口拜托别人的人，手上总是有着做不完的工作，并且独自忙碌着。其实只要学会拜托别人，就可以善加利用别人的长处。</p>
</blockquote>
<ul>
<li>为什么不擅长拜托别人？害怕say no</li>
<li>有所期待地拜托别人</li>
<li>拜托方式——重点在此<ul>
<li>不随意拜托人，要仔细检讨为什么、要拜托何人</li>
<li>确认对方的状况</li>
<li>以电子邮件拜托重要的事时，务必要以电话或当面再作确认</li>
<li>要拜托的事会造成很大的负担时，要事先预告后再拜托</li>
<li>要拜访别人时，要比约定时间早“5~6分钟”抵达</li>
<li>拜托时遭拒绝是理所当然的，所以不要害怕听到“NO”</li>
<li>拜托时要抱着期待对方说：“请一定要助我一臂之力。”</li>
<li>拜托非常重要的事时，要扑向对方的怀抱，真心拜托</li>
<li>唠叨冗长的开场白是没有用的，要单刀直入地说</li>
<li>胆怯、多虑、装模作样是请托时的禁忌</li>
</ul>
</li>
</ul>
<h5 id="5-8-不会令人心生芥蒂的拒绝法"><a href="#5-8-不会令人心生芥蒂的拒绝法" class="headerlink" title="5.8 不会令人心生芥蒂的拒绝法"></a>5.8 不会令人心生芥蒂的拒绝法</h5><blockquote>
<p>另一种工作永远做不完的人，就是无法拒绝别人的请求的人。虽然我们会因为不想看到对方不开心的表情，而说不出拒绝的话，但还是有些人能够巧妙地说出“NO”。现在就让我们来学习这个秘诀吧。</p>
</blockquote>
<ul>
<li>先从道歉开始：先向对方道歉<ul>
<li>非常抱歉</li>
<li>让你失望了，真抱歉！</li>
<li>难得你都开口了，真抱歉！</li>
<li>真的非常遗憾！</li>
<li>请原谅我</li>
</ul>
</li>
<li>说明无法答应的理由：说明拒绝的理由<ul>
<li>如果再早一点的话，可能还有办法</li>
<li>很遗憾，如果是一个小时之前的话，就可以答应你</li>
<li>如你所见，我现在忙得不可开交</li>
<li>因为我才开始新的工作，暂时没有能力可以帮你</li>
<li>基于公司的方针，我今年无法答应你的请求</li>
<li>基于历代祖先的家训，我必须拒绝</li>
<li>目前我想专心工作（对于相亲等事）</li>
<li>我配不上他（要拒绝相亲对象时）</li>
</ul>
</li>
<li>创造环境</li>
<li>提出替代方案。能在不伤害别人的状况下说出“NO”，也是要成为说话高手的条件之一。</li>
</ul>
<h5 id="5-9-指正别人的技巧——最好是“明快”、“简短”"><a href="#5-9-指正别人的技巧——最好是“明快”、“简短”" class="headerlink" title="5.9 指正别人的技巧——最好是“明快”、“简短”"></a>5.9 指正别人的技巧——最好是“明快”、“简短”</h5><blockquote>
<p>任何人都有缺点，也会犯错，从犯错的过程中学习并成长，这就是人类。而这也是在我们犯错或失败时需要有人指正我们的原因。</p>
</blockquote>
<ul>
<li>为什么要“指正”别人？</li>
<li>缓和心理状态的工夫</li>
<li>制造可接受的状况<ul>
<li>开头要说些赞美的话</li>
<li>先告知事实</li>
</ul>
</li>
<li>“明快地”、“简短地”指正</li>
<li>成为指正高手的十二原则<ul>
<li>以道歉的心情（态度与说法不可傲慢）</li>
<li>制造对方容易接受的状况（让苦药容易入口）</li>
<li>对事不对人（不可以说“你就是没用”这样的话）</li>
<li>仔细倾听，确认事实（或许背后有原因）</li>
<li>事先弄清楚要指正的内容（平常就要明确表达自己的想法）</li>
<li>原则为一对一，但有时候要敢在众人面前指正（如紧急时或要振奋整体士气时等）</li>
<li>不要一次指正很多件事</li>
<li>强烈指正后，不要忘记后续追踪</li>
<li>如果要比较，就和本人比较</li>
<li>指正时的态度要爽朗、直接</li>
</ul>
</li>
</ul>
<h5 id="5-10-赞美的技巧——掌握时机"><a href="#5-10-赞美的技巧——掌握时机" class="headerlink" title="5.10 赞美的技巧——掌握时机"></a>5.10 赞美的技巧——掌握时机</h5><blockquote>
<p>“指正”与“赞美”是一体两面的沟通，两者都能促进对方成长。和“指正”比起来，有人认为“赞美”比较简单，但果真是如此吗？</p>
</blockquote>
<ul>
<li>真正的赞美会令人感动</li>
<li>发现优点出乎意料地困难<ul>
<li>不以自己为基准</li>
<li>从正面来看</li>
<li>即使是理所当然的事也要赞美</li>
</ul>
</li>
<li>在适当的时机赞美会更有效果<ul>
<li>在对方把事做好的那一瞬间，就要立刻称赞“做得好！”</li>
<li>擅长赞美的人能够激发出别人的潜能</li>
</ul>
</li>
<li>成为赞美高手的十大原则<ul>
<li>注意对方的长处与优点（任何人都有优点）</li>
<li>赞美时必须加入自己的实际感受（不要害羞，要由衷赞美）</li>
<li>具体赞美究竟是哪里好（模棱两可的赞美会令人不安）</li>
<li>在成功的那一瞬间赞美（赞美的关键在于时机）</li>
<li>即使对方做的是理所当然的事，也要加以赞美（使其了解实行的重要性）</li>
<li>赞美对方的缺点（以正面的观点来看待并赞美）</li>
<li>不只是结果，也要赞美过程（赞美努力的态度）</li>
<li>透过第三者间接赞美（间接传达的赞美会让人加倍开心）</li>
<li>利用电话、纸条赞美（稍微用点心就可以有效利用赞美）</li>
<li>在赞美后指示下一个目标（赞美后也必须持续追踪）</li>
</ul>
</li>
</ul>
<h5 id="5-11-成功进行即席演讲的技巧"><a href="#5-11-成功进行即席演讲的技巧" class="headerlink" title="5.11 成功进行即席演讲的技巧"></a>5.11 成功进行即席演讲的技巧</h5><blockquote>
<p>即使有事前准备，一旦站在众人面前说话，还是会因为紧张而连一半的内容都说不完整，这就是突然被点名时的状况。不过，还是有方法可以让人成功面对。</p>
</blockquote>
<ul>
<li>成为演说高手的三大秘诀<ul>
<li>积累经验</li>
<li>整理内容、有条有理</li>
<li>先弄清楚要说什么，并在开场时就先说明</li>
</ul>
</li>
<li>突然被点名时的应对方式<ul>
<li>既然要出席聚会，一定要事先准备要说的话</li>
<li>因工作繁忙，无暇事先准备演讲内容，急忙赶到现场后突然被告知要演说时</li>
<li>突然轮到自己，还想不起来要说什么就站起来时<ul>
<li>姓名、公司名称</li>
<li>负责业务的内容</li>
<li>该聚会与自己的关系</li>
<li>最近发生的事</li>
</ul>
</li>
</ul>
</li>
<li><p>利用“即席演讲练习”在平日做好准备</p>
<ul>
<li>演讲时间为一分钟</li>
<li>在听到题目的同时，就要说出脑中浮现的内容，秘诀为不要沉默。</li>
<li>在演说过程中，会逐渐浮现与题目相关的结论，并以此做结束。</li>
</ul>
</li>
<li><p>成为演说高手的秘诀</p>
<ul>
<li>事先准备演说内容，再到会场</li>
<li>观察当场的状况，注意听别人说话</li>
<li>在自我介绍时，脑中会浮现与该聚会相关的话题</li>
<li>“怎么办？”即使内心这样着急，也不会想起任何话题。因此，要告诉自己“一定会有办法的。”</li>
<li>站起来后，就要开口；一旦沉默，连思考也会停止</li>
<li>和朋友一起做“即席演讲练习”</li>
</ul>
</li>
</ul>
<h5 id="5-12-别出心裁的简报技巧"><a href="#5-12-别出心裁的简报技巧" class="headerlink" title="5.12 别出心裁的简报技巧"></a>5.12 别出心裁的简报技巧</h5><blockquote>
<p>简报的秘诀在于“将只有自己能介绍的事物，以任何人都能理解的话进行说明”。能将属于自己的内容，运用自己的特色，简单易懂地表达出来，这是最棒的。</p>
</blockquote>
<ul>
<li>运用简报的特色<ul>
<li>创意</li>
<li>企划书的写法</li>
<li>视觉工具（visual tool）的使用方法</li>
<li>只要能毫不掩饰地展露自己的个性，就能说出只属于自己、有别于他人的话语，并传达出去。</li>
</ul>
</li>
<li>学会表现方式的三大原则<ul>
<li>“简单易懂”——说话时要明确呈现出关系、关联</li>
<li>“简洁”——明确地说出要点，集中内容焦点</li>
<li>“印象深刻”——具体、生动地说，让人可以想象出场景、状况</li>
</ul>
</li>
<li>重视过程<ul>
<li>简报之前——收集资料</li>
<li>简报之后——持续追踪，紧迫盯人，以获得“YES”为目标</li>
</ul>
</li>
<li>简报的三大原则</li>
</ul>
<table>
<thead>
<tr>
<th>三大原则</th>
<th>重点</th>
<th>准备表达方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>简单易懂</td>
<td>明确呈现关系</td>
<td>呈现整体<br>整理成项目<br>使用具体的例子来说明<br>在说话时要同时确认听众的反应<br>使用简单易懂的词汇</td>
</tr>
<tr>
<td>简洁</td>
<td>明确呈现核心</td>
<td>以一句话列出主题<br>省略无用的内容<br>缩短句子<br>使用谚语或格言<br>进行预演，以让整体进行顺畅</td>
</tr>
<tr>
<td>印象深刻</td>
<td>明确呈现印象</td>
<td>内容要能令人产生想象画面，用言语描绘<br>强调重点<br>在“开场”与“结语”做好准备<br>融入情绪，生动活泼地说<br>声音要抑扬顿挫</td>
</tr>
</tbody>
</table>
<h5 id="5-13-幽默地谈话的方法"><a href="#5-13-幽默地谈话的方法" class="headerlink" title="5.13 幽默地谈话的方法"></a>5.13 幽默地谈话的方法</h5><blockquote>
<p>幽默除了与生俱来的之外，也有创造出来的。只要刻意表现开朗的心情与笑容，就能产生充满幽默的气氛。如此一来，谈话也能愉快地进行。</p>
</blockquote>
<ul>
<li>只要表现爽朗的态度，心情也会开朗</li>
<li>笑容是心有余裕的产物</li>
<li>在谈话之中加入笑话<ul>
<li>若无其事地说出来</li>
<li>不要加上冗长的说明，要简短有力</li>
<li>不要自己先笑出来</li>
<li>就算别人不懂，也不要催人笑</li>
<li>不要预告即将要说有趣的笑话</li>
</ul>
</li>
</ul>
<p>笑话三则</p>
<ul>
<li><p>天堂的笑话</p>
<blockquote>
<p>“你知道天堂在哪里吗？”<br>“不知道。”<br>“就是下一世。”<br>“地狱呢？”<br>“就是这一世。”</p>
</blockquote>
</li>
<li><p>要不要去散步？</p>
<blockquote>
<p>某一个人说:<br>“我最喜欢自己一个人散步了”于是，另一个人微笑地说：“其实我也是一样。既然我们兴趣相同，那么，现在要不要一起散步呢？”</p>
</blockquote>
</li>
<li><p>抱怨的方法</p>
<blockquote>
<p>有位以致很久的水电工问：<br>“先生，漏水的情况怎么样？”<br>男人说：“嗯，还不错啦。在等你来的这段时间里，我都在教我太太游泳。”</p>
</blockquote>
</li>
</ul>
<h5 id="5-14-重点整理"><a href="#5-14-重点整理" class="headerlink" title="5.14 重点整理"></a>5.14 重点整理</h5><ul>
<li>任何人在遇到别人提及自己关心的事时，心里就会有反应</li>
<li>借由巧妙地使用魔法句子，就可以顺利说出难以启齿的话。</li>
<li>当已经发火或快要发火时，可以站起来或做个深呼吸，让自己暂冷静一下。</li>
<li>只要学会说明的技巧，就可以说出简单易懂的话。</li>
<li>培养能充分思索自己的发言内容的习惯，就能逐渐达到一语中的的境界。</li>
<li>有求于人时，最好对对方抱着期待。</li>
<li>拒绝时，要清楚说出“YES”、“NO”，并记得在最后向对方道歉。</li>
<li>指正别人时，最好要“明快”、“简短”。</li>
<li>发自内心的赞美具有感动人心的力量。</li>
<li>赞美的关键在于时机。</li>
<li>成为演讲高手的秘诀在于“积累经验”与“事前做好准备”。</li>
<li>简报的诀窍在于“将只有自己能谈论的内容”以“任何人都能听懂的话”来说明。</li>
<li>要刻意将笑话放入谈话之中。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;轻松获得家人、朋友、上司、同事、下属和客喜爱与信赖的秘密！&lt;br&gt;从倾听与说话两方面告诉你53项实用沟通技巧，包括：反驳的要诀、说出真心话又不令人生气的技巧、听讨厌的人说话或聆听无趣内容的秘诀、边听边整理的窍门、顺利与人攀谈的技巧、听懂言外之意的诀窍、引得对方说话和让对方采取行动的发问方式、让对方爽快答应的秘诀……&lt;br&gt;创造好人缘的沟通金律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不独占说话时间、不抢话、不打断对方。&lt;/li&gt;
&lt;li&gt;倾听时，要搭腔附和，并积极回应。&lt;/li&gt;
&lt;li&gt;当对方开口说第一句话时，记得与对方眼神交流。&lt;/li&gt;
&lt;li&gt;上司对下属不可采取上对下的态度，要进行平等的沟通。&lt;/li&gt;
&lt;li&gt;问候后再多加一句话就能打动对方的心。&lt;/li&gt;
&lt;li&gt;“抱歉”、“还好”、“反正”等口头禅要改掉。&lt;/li&gt;
&lt;li&gt;对于话少的人，要主动提供话题，并且耐心等候回应。&lt;/li&gt;
&lt;li&gt;听厌恶的人说话时，只听重要的部分，并告诉自己不听会有损失……&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://x8087.github.io/categories/note/"/>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="图解" scheme="http://x8087.github.io/tags/%E5%9B%BE%E8%A7%A3/"/>
    
      <category term="说话" scheme="http://x8087.github.io/tags/%E8%AF%B4%E8%AF%9D/"/>
    
      <category term="心理" scheme="http://x8087.github.io/tags/%E5%BF%83%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>琐碎问题收集</title>
    <link href="http://x8087.github.io/2015/08/11/%E7%90%90%E7%A2%8E%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    <id>http://x8087.github.io/2015/08/11/琐碎问题收集/</id>
    <published>2015-08-11T09:15:33.000Z</published>
    <updated>2016-11-26T03:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>小问题记录整理。</p>
<a id="more"></a>
<h2 id="Gmail邮件内容加载不出"><a href="#Gmail邮件内容加载不出" class="headerlink" title="Gmail邮件内容加载不出"></a>Gmail邮件内容加载不出</h2><blockquote>
<p>添加hosts<br>173.194.65.108 imap.gmail.com<br>173.194.65.108 pop.gmail.com<br>173.194.193.108 smtp.gmail.com</p>
</blockquote>
<hr>
<h2 id="shell后台程序管理"><a href="#shell后台程序管理" class="headerlink" title="shell后台程序管理"></a>shell后台程序管理</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fg</span> <span class="comment">#跳转到上一后台程序</span></div><div class="line"><span class="built_in">fg</span> %n <span class="comment">#跳转到第n个后台程序</span></div><div class="line"><span class="built_in">jobs</span> <span class="comment">#打印当前所有后台程序</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="vim插入模式切换到普通模式，终端下中文输入法不会自动切换到英文状态"><a href="#vim插入模式切换到普通模式，终端下中文输入法不会自动切换到英文状态" class="headerlink" title="vim插入模式切换到普通模式，终端下中文输入法不会自动切换到英文状态"></a>vim插入模式切换到普通模式，终端下中文输入法不会自动切换到英文状态</h2><p><a href="http://ihacklog.com/post/use-imdisable-switch-fcitx-input-method-in-vim.html" target="_blank" rel="external">对于gvim和macvim可以通过设置imd解决</a></p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">autocmd! InsertLeave *  <span class="built_in">set</span> imdisable</div><div class="line">autocmd! InsertEnter *  <span class="built_in">set</span> noimdisable</div></pre></td></tr></table></figure>
<p><a href="https://github.com/lilydjwg/fcitx.vim" target="_blank" rel="external">对于fcitx输入法可以通过fcitx.vim解决</a><br><a href="https://github.com/vimim/vimim" target="_blank" rel="external">通过中文输入法插件vimim.vim解决</a><br>针对个人最适合的方案是：<a href="https://github.com/ybian/smartim" target="_blank" rel="external">通过插件smartim解决</a><br><a href="https://github.com/hongqn/vim-osx-ime" target="_blank" rel="external">vim-osx-ime方案</a>mac os10.10后不支持,<a href="http://www.douban.com/note/260509417/" target="_blank" rel="external">来源</a></p>
<hr>
<h2 id="vim插入模式切换到普通模式延迟时间长"><a href="#vim插入模式切换到普通模式延迟时间长" class="headerlink" title="vim插入模式切换到普通模式延迟时间长"></a>vim插入模式切换到普通模式延迟时间长</h2><p>设置待决模式延迟时间<br>set timeoutlen=500</p>
<hr>
<h2 id="vim主题当前行高亮设置的问题"><a href="#vim主题当前行高亮设置的问题" class="headerlink" title="vim主题当前行高亮设置的问题"></a>vim主题当前行高亮设置的问题</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hi CursorLine cterm=bold ctermbg=16 ctermfg=NONE</div></pre></td></tr></table></figure>
<p>hi: hightlight高亮样式设置<br>term: 黑白终端<br>cterm: 色彩终端,可选NONE, underline, bold, undercurl(波浪线), reverse(inverse), italic, standout<br>ctermbg: 对应背景色设置256色<br>ctermfg: 对应前景色设置256色<br>gui: GUI界面<br>guifg: 对应前景色，可选NONE，bg（使用Normal的背景色），fg（使用Normal的前景色）<br>guibg: 对应背景色<br>guisp: 对应特殊颜色</p>
<hr>
<h2 id="vim-auto-pairs插件导致插入文本异常问题"><a href="#vim-auto-pairs插件导致插入文本异常问题" class="headerlink" title="vim auto-pairs插件导致插入文本异常问题"></a>vim auto-pairs插件导致插入文本异常问题</h2><p>auto-pairs插件是用来自动匹配括号，引号等符号的生成。<br>问题1:在插入模式下粘贴文本时会触发导致粘贴的文本改变</p>
<p>问题2:与Ultisnipt同时使用，导致Ultisnipt生成的文本改变</p>
<p>移除插件后正常，未找到更好解决方案</p>
<hr>
<h2 id="Squirrel鼠須管输入法配置问题"><a href="#Squirrel鼠須管输入法配置问题" class="headerlink" title="Squirrel鼠須管输入法配置问题"></a>Squirrel鼠須管输入法配置问题</h2><p><strong>导入配置</strong><br><code>import_preset</code><br><strong>简入繁出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">engine:</div><div class="line">  - simplifier</div><div class="line">  - uniquifier</div><div class="line">simplifier:</div><div class="line">  opencc_config: s2t.json</div><div class="line">  tips: all</div><div class="line">switches:</div><div class="line">  ...</div><div class="line">  - name: simplification</div><div class="line">    reset: 0</div><div class="line">    states: [“漢字”, “汉字”]</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="vim下markdown文件语法高亮显示异常"><a href="#vim下markdown文件语法高亮显示异常" class="headerlink" title="vim下markdown文件语法高亮显示异常"></a>vim下markdown文件语法高亮显示异常</h2><p>由于使用<a href="https://github.com/tpope/vim-markdown" target="_blank" rel="external">tpope/vim-markdown</a>导致<br>改为使用<a href="http://plasticboy.com/markdown-vim-mode/" target="_blank" rel="external">plasticboy/vim-markdown</a>插件解决</p>
<hr>
<h2 id="vim下markdown文件输入英文单引号或双引号变中文符号的"><a href="#vim下markdown文件输入英文单引号或双引号变中文符号的" class="headerlink" title="vim下markdown文件输入英文单引号或双引号变中文符号的"></a>vim下markdown文件输入英文单引号或双引号变中文符号的</h2><p>安装插件textobj-quote引起。<br>textobj-quote插件是一个匹配中文单双引号的插件，有以下4个功能：</p>
<ol>
<li>Educate,输入英文单引号或双引号后，自动输出为中文的单引号或双引号。</li>
<li>Matchit,%号匹配中文的单双引号。</li>
<li>Replace,直接替换中英文的单双引号。</li>
<li>Surround,支持环绕功能</li>
</ol>
<hr>
<h2 id="smartim中英文状态切换异常"><a href="#smartim中英文状态切换异常" class="headerlink" title="smartim中英文状态切换异常"></a>smartim中英文状态切换异常</h2><p>vim中从插入模式切换到普通模式输入法能正常切换到英文状态，再切换回插入模式时，未能正常切换到中文状态。<br>smartim插件的SmartIM_SelectDefault方法被调用多次，导致出现问题。<br>解决方案：添加条件限制，避免多次调用修改变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if !exists(&quot;b:saved_im&quot;) || b:saved_im == g:smartim_default</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小问题记录整理。&lt;/p&gt;
    
    </summary>
    
      <category term="问题" scheme="http://x8087.github.io/categories/bug/"/>
    
    
      <category term="技术" scheme="http://x8087.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="问题" scheme="http://x8087.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="Bug" scheme="http://x8087.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>macbook pro下vim安装YouCompleteMe导致的问题</title>
    <link href="http://x8087.github.io/2015/08/11/macbook-pro%E4%B8%8Bvim%E5%AE%89%E8%A3%85YouCompleteMe%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://x8087.github.io/2015/08/11/macbook-pro下vim安装YouCompleteMe导致的问题/</id>
    <published>2015-08-11T02:15:11.000Z</published>
    <updated>2016-11-26T02:50:06.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题：vim下缺少一个好用的代码补全功能"><a href="#问题：vim下缺少一个好用的代码补全功能" class="headerlink" title="问题：vim下缺少一个好用的代码补全功能"></a>问题：vim下缺少一个好用的代码补全功能</h5><p><strong>解决方案：</strong></p>
<blockquote>
<p>使用<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a></p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h5 id="问题：安装YouCompleteMe后，打开报错vim版本过低"><a href="#问题：安装YouCompleteMe后，打开报错vim版本过低" class="headerlink" title="问题：安装YouCompleteMe后，打开报错vim版本过低"></a>问题：安装<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>后，打开报错vim版本过低</h5><p>需要人更新最新版本vim<br>mac os10.10自带的vim版本过低<br><strong>解决方案：</strong></p>
<blockquote>
<p>1.本地编译最新版本Vim；<br><br>2.通过home brew安装<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">MacVim</a>(<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>与<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">MacVim</a>协作比vim更好);</p>
</blockquote>
<hr>
<h5 id="问题：本地编译vim与YouCompleteMe的python版本不一致，vim打开报错"><a href="#问题：本地编译vim与YouCompleteMe的python版本不一致，vim打开报错" class="headerlink" title="问题：本地编译vim与YouCompleteMe的python版本不一致，vim打开报错"></a>问题：本地编译vim与<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>的python版本不一致，vim打开报错</h5><p>本地编译vim源码时使用的是系统自带的python，而安装<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>与平常使用的是home brew的python<br><strong>解决方案：</strong></p>
<blockquote>
<p>找不到好的解决方案，放弃</p>
</blockquote>
<hr>
<h5 id="问题：将MacVim-app里的vim二进制文件链接到-usr-local-bin下使用报错"><a href="#问题：将MacVim-app里的vim二进制文件链接到-usr-local-bin下使用报错" class="headerlink" title="问题：将MacVim.app里的vim二进制文件链接到/usr/local/bin下使用报错"></a>问题：将MacVim.app里的<code>vim</code>二进制文件链接到<code>/usr/local/bin</code>下使用报错</h5><p><strong>解决方案：</strong></p>
<blockquote>
<p>找不到问题所在，放弃。<br>转而采用<code>alias</code>的方法链接</p>
</blockquote>
<p><strong>更新：</strong><a href="#2015-08-11_16:37"><font color="blue">2015-08-11 16:37:22</font></a></p>
<hr>
<h5 id="问题：当采用alias方法链接时，shell脚本内使用vim报错"><a href="#问题：当采用alias方法链接时，shell脚本内使用vim报错" class="headerlink" title="问题：当采用alias方法链接时，shell脚本内使用vim报错"></a>问题：当采用<code>alias</code>方法链接时，shell脚本内使用vim报错</h5><p>在控制台使用正常，在shell脚本使用时<code>alias</code>失效，调用的是系统自带的vim<br>通过在脚本中输出Path环境变量，vim版本和所使用的vim位置，可以确认并没有使用<code>alias</code>指定的vim。<br><strong>解决方案</strong></p>
<blockquote>
<p>由于暂时不确定什么原因导致，找不到更好的解决方法，只能在脚本中添加<code>alias</code>链接来解决。</p>
</blockquote>
<p><strong>更新：</strong><a href="#2015-08-11_16:37"><font color="blue">2015-08-11 16:37:22</font></a></p>
<hr>
<h5 id="后期更新："><a href="#后期更新：" class="headerlink" title="后期更新："></a>后期更新：</h5><h6 id="2015-08-11-16-37"><a href="#2015-08-11-16-37" class="headerlink" title="2015-08-11_16:37"></a>2015-08-11_16:37</h6><hr>
<blockquote>
<p>从<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">MacVim</a>下载<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">MacVim</a> Snapshot文件，解压后把文件mvim放到<code>/usr/local/bin</code>目录下并建立软链接：(详细可查看<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">MacVim</a>帮助<code>:h mvim</code>)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/mvim vim</div><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/mvim view</div><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/mvim vimdiff</div><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/mvim vi</div><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/mvim vimex</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;问题：vim下缺少一个好用的代码补全功能&quot;&gt;&lt;a href=&quot;#问题：vim下缺少一个好用的代码补全功能&quot; class=&quot;headerlink&quot; title=&quot;问题：vim下缺少一个好用的代码补全功能&quot;&gt;&lt;/a&gt;问题：vim下缺少一个好用的代码补全功能&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;YouCompleteMe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="问题" scheme="http://x8087.github.io/categories/bug/"/>
    
    
      <category term="技术" scheme="http://x8087.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="vim" scheme="http://x8087.github.io/tags/vim/"/>
    
      <category term="bug" scheme="http://x8087.github.io/tags/bug/"/>
    
      <category term="问题" scheme="http://x8087.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="macbook" scheme="http://x8087.github.io/tags/macbook/"/>
    
      <category term="YouCompleteMe" scheme="http://x8087.github.io/tags/YouCompleteMe/"/>
    
  </entry>
  
  <entry>
    <title>疯狂Vim折腾之插件</title>
    <link href="http://x8087.github.io/2015/08/07/%E7%96%AF%E7%8B%82Vim%E6%8A%98%E8%85%BE%E4%B9%8B%E6%8F%92%E4%BB%B6/"/>
    <id>http://x8087.github.io/2015/08/07/疯狂Vim折腾之插件/</id>
    <published>2015-08-07T12:20:57.000Z</published>
    <updated>2016-11-26T03:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍vim语法补全插件YouCompleteMe</p>
<a id="more"></a>
<h5 id="Mac上快速安装YouCompleteMe"><a href="#Mac上快速安装YouCompleteMe" class="headerlink" title="Mac上快速安装YouCompleteMe"></a>Mac上快速安装<a href="https://github.com/Valloric/YouCompleteMe#general-usage" target="_blank" rel="external">YouCompleteMe</a></h5><ol>
<li>安装<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">MacVim</a><ul>
<li>通过brew快速安装<code>brew install macvim</code></li>
<li>保证正确运行可复制从MacVim下载的mvim脚本文件到本地二进制输出文件夹并添加软链接</li>
<li>控制台vim<ul>
<li>推荐使用MacVim.app包内的vim二进制文件(MacVim.app/Contents/MacOS/Vim)</li>
<li>由于homebrew的配置编译方法有问题，不推荐使用homebrew的vim</li>
<li>使用homebrew的python以于MacVim可能出现编译问题或者编译后启动不了，需要运行<code>brew rm python; brew install python</code>更新到最新</li>
</ul>
</li>
</ul>
</li>
<li>通过Vundle安装YouCompleteMe<ul>
<li>注意更新后要重新调用install.sh编译</li>
<li>C-family completion需要最新的CLT和Xcode</li>
</ul>
</li>
<li>安装CMake</li>
<li><p><code>./install.sh</code>可选项</p>
<ul>
<li>C语言支持:<code>--clang-completer</code></li>
<li>C#支持:<code>--omnisharp-completer</code></li>
<li>Go支持:<code>--gocode-completer</code></li>
</ul>
</li>
<li><p>C语言的语法补全还需要添加配置flags</p>
</li>
</ol>
<h5 id="YouCompleteMe使用方法"><a href="#YouCompleteMe使用方法" class="headerlink" title="YouCompleteMe使用方法"></a><a href="https://github.com/Valloric/YouCompleteMe#general-usage" target="_blank" rel="external">YouCompleteMe</a>使用方法</h5><p>1.基础用法</p>
<ul>
<li>使入字符，自动提示。输入的字符越多，可选项越准</li>
<li>智能大小写，大小写敏感。输入大写过滤只包含该大写字符选项，小写则包含该字符大小写选项</li>
<li>Tab选取或遍历选项，shit-Tab反方向选取。<em>(注意：控制台下的shift-Tab按键可能无法使用，需另外关联)</em></li>
<li>补全列表排列时，会将符合子字符项的选项排在前面。每个子字符串首字母大写，首字符为下划线时忽略下划线。   </li>
<li>Ctrl-space快捷键可直接调出补全列表，而不需要输入任何字符。</li>
</ul>
<p>2.c语言补全</p>
<ul>
<li>YCM会自动在文件打开的目录及子目录下查找.ycm_extra_conf.py文件</li>
<li>也可以配置全局的.ycm_extra_conf.py文件</li>
<li>范例<a href="https://github.com/Valloric/ycmd/blob/master/cpp/ycm/.ycm_extra_conf.py" target="_blank" rel="external">.ycm_extra_conf.py</a>，仅供参考，不同项目可能不一样，大部分项目都只需要使用文件中的部分标志</li>
<li><a href="http://clang.llvm.org/docs/JSONCompilationDatabase.html" target="_blank" rel="external">Clang’s CompilationDatabase system</a>通过CMake生成文件只需在项目的CMakeList.txt文件里加入<code>set(CMAKE_EXPORT_COMPILE_COMMANDS 1)</code></li>
<li><a href="https://github.com/rdnetto/YCM-Generator" target="_blank" rel="external">YCM-Generator</a>ycm_extra_conf.py文件生成工具</li>
<li>如果编译错误或者文件包含的头文件有错误，会使生成补全列表的时间比较久且生成的列表项出现很无关补全项，调用<code>:YcmDiags</code>查看错误</li>
</ul>
<p>3.其他语言的补全</p>
<ul>
<li>Pyhon,C#和Go语言各自通过<a href="https://github.com/davidhalter/jedi" target="_blank" rel="external">Jedi</a>,<a href="https://github.com/nosami/OmniSharpServer" target="_blank" rel="external">Omnisharp</a>和<a href="https://github.com/nsf/gocode" target="_blank" rel="external">GoCode</a>语言引擎提供补全，需要安装编译时添加相应选项</li>
<li>对于没有本地语法引擎支持的文件类型，可以使用<code>omnifunc</code>(<code>:h omnifunc</code>)作为语法补全源，Vim为多种语言自带omnifuncs，类似Ruby,PHP</li>
<li>通过[Eclim][]可以为Java和Ruby提供非常好的omnifuncs<ul>
<li>安装完[Eclim][]后需要在Vim里输入<code>:ProjectCreate &lt;path-to-your-project&gt; -n ruby</code> (or <code>-n java</code>)创建新的Eclip项目并在.vimrc文件内加入<code>let g:EclimCompletionMethod = &#39;omnifunc&#39;</code>使Vim与Eclim更好运行 </li>
</ul>
</li>
</ul>
<p>4.编写新的语法补全</p>
<ul>
<li>通过编写Vim的<code>omnifunc</code>实现</li>
<li>通过自定义YCM补全功能实现</li>
<li>两者的不同：<ul>
<li>omnifunc通过VimScript编写，另一个则使用Python根据YCM的API编写</li>
<li>YCM API是一种更强大的方法和YCM集成，且提供更宽泛的功能设置</li>
<li>YCM方案执行效率会更高</li>
</ul>
</li>
<li>vim参考<code>:h complete-functions</code>，YCM参考<a href="https://github.com/Valloric/ycmd/blob/master/ycmd/completers/completer.py" target="_blank" rel="external">API文档</a></li>
</ul>
<h5 id="Eclim"><a href="#Eclim" class="headerlink" title="Eclim"></a><a href="http://eclim.org" target="_blank" rel="external">Eclim</a></h5><p>提供通过命令行或网络连接调用Eclipse代码编辑的功能，允许集成到自己喜欢的编辑器上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍vim语法补全插件YouCompleteMe&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://x8087.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vim" scheme="http://x8087.github.io/tags/vim/"/>
    
      <category term="YouCompleteMe" scheme="http://x8087.github.io/tags/YouCompleteMe/"/>
    
      <category term="插件" scheme="http://x8087.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Eclim" scheme="http://x8087.github.io/tags/Eclim/"/>
    
  </entry>
  
  <entry>
    <title>实用技巧</title>
    <link href="http://x8087.github.io/2015/08/07/Vim%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://x8087.github.io/2015/08/07/Vim实用技巧/</id>
    <published>2015-08-07T01:40:52.000Z</published>
    <updated>2016-11-26T02:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-Vim解决问题的方式"><a href="#0-Vim解决问题的方式" class="headerlink" title="0. Vim解决问题的方式"></a>0. Vim解决问题的方式</h2><h3 id="结识-hpoint-命令"><a href="#结识-hpoint-命令" class="headerlink" title="结识. [^hpoint] 命令"></a>结识<code>.</code> [^hpoint] 命令</h3><p><strong>功能</strong> 重复上次修改<br><strong>注意</strong> </p>
<ul>
<li>插入模式下,重复从进入到结束的所有操作(<em>移动光标会重置修改状态</em>)</li>
<li><code>.</code>命令事实上是一个微型的宏</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>x</code></td>
<td>删除光标下字符</td>
</tr>
<tr>
<td style="text-align:center"><code>dd</code></td>
<td>删除整行</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;G</code></td>
<td>增加当前行到文档末尾处的缩进层级</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="不要自我重复"><a href="#不要自我重复" class="headerlink" title="不要自我重复"></a>不要自我重复</h3><h4 id="减少无关移动"><a href="#减少无关移动" class="headerlink" title="减少无关移动"></a>减少无关移动</h4><p><font color="green"><strong>example1:</strong>在行末添加分号</font><br>方法1</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$</div><div class="line">a;&lt;Esc&gt;</div><div class="line">j$.</div></pre></td></tr></table></figure>
<p>方法2:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A;&lt;Esc&gt;</div><div class="line">j.</div></pre></td></tr></table></figure>
<h4 id="复合命令"><a href="#复合命令" class="headerlink" title="复合命令"></a>复合命令</h4><blockquote>
<p>执行动作的同时自动从普通模式切换到插入模式</p>
</blockquote>
<h4 id="常用复合命令"><a href="#常用复合命令" class="headerlink" title="常用复合命令"></a>常用复合命令</h4><table>
<thead>
<tr>
<th style="text-align:center">复合命令</th>
<th style="text-align:left">普通操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>C</code></td>
<td style="text-align:left"><code>c$</code></td>
</tr>
<tr>
<td style="text-align:center"><code>s</code></td>
<td style="text-align:left"><code>cl</code></td>
</tr>
<tr>
<td style="text-align:center"><code>S</code></td>
<td style="text-align:left"><code>^c</code></td>
</tr>
<tr>
<td style="text-align:center"><code>I</code></td>
<td style="text-align:left"><code>^i</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:left"><code>$a</code></td>
</tr>
<tr>
<td style="text-align:center"><code>o</code></td>
<td style="text-align:left"><code>A&lt;CR&gt;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>O</code></td>
<td style="text-align:left"><code>ko</code></td>
</tr>
</tbody>
</table>
<h3 id="以退为进"><a href="#以退为进" class="headerlink" title="以退为进"></a>以退为进</h3><p>使移动可重复<code>f{char}</code>[^f] <code>;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f&#123;char&#125;</div><div class="line">&#123;operation&#125;&lt;Esc&gt;</div><div class="line">;.</div></pre></td></tr></table></figure></p>
<h3 id="执行、重复、回退"><a href="#执行、重复、回退" class="headerlink" title="执行、重复、回退"></a>执行、重复、回退</h3><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@:</code></td>
<td>重复ex命令</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;</code></td>
<td>重复上次的替换命令</td>
</tr>
<tr>
<td style="text-align:center"><code>,</code></td>
<td>回退到上次<code>f{char}</code>字符位置</td>
</tr>
<tr>
<td style="text-align:center"><code>u</code></td>
<td>撤消</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>目的</th>
<th style="text-align:center">操作</th>
<th style="text-align:center">重复</th>
<th style="text-align:center">回退</th>
</tr>
</thead>
<tbody>
<tr>
<td>做出一个修改</td>
<td style="text-align:center"><code>{edit}</code></td>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center"><code>u</code></td>
</tr>
<tr>
<td>在行内查找下一指定字符</td>
<td style="text-align:center"><code>f{char}</code>/<code>t{char}</code></td>
<td style="text-align:center"><code>;</code></td>
<td style="text-align:center"><code>,</code></td>
</tr>
<tr>
<td>在行内查找上一指定字符</td>
<td style="text-align:center"><code>F{char}</code>/<code>T{char}</code></td>
<td style="text-align:center"><code>;</code></td>
<td style="text-align:center"><code>,</code></td>
</tr>
<tr>
<td>在文档内查找下一匹配项</td>
<td style="text-align:center"><code>/{pattern}&lt;CR&gt;</code></td>
<td style="text-align:center"><code>n</code></td>
<td style="text-align:center"><code>N</code></td>
</tr>
<tr>
<td>在文档内查找上一匹配项</td>
<td style="text-align:center"><code>?{pattern}&lt;CR&gt;</code></td>
<td style="text-align:center"><code>n</code></td>
<td style="text-align:center"><code>N</code></td>
</tr>
<tr>
<td>执行替换</td>
<td style="text-align:center"><code>s/{pattern}/{replacement}</code></td>
<td style="text-align:center"><code>&amp;</code></td>
<td style="text-align:center"><code>u</code></td>
</tr>
<tr>
<td>执行一系列修改</td>
<td style="text-align:center"><code>q{register}{changes}q</code></td>
<td style="text-align:center"><code>@{register}</code></td>
<td style="text-align:center"><code>u</code></td>
</tr>
</tbody>
</table>
<h3 id="查找并手动替换"><a href="#查找并手动替换" class="headerlink" title="查找并手动替换"></a>查找并手动替换</h3><table>
<thead>
<tr>
<th>功能</th>
<th style="text-align:center">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>替换</td>
<td style="text-align:center"><code>:substitute</code></td>
</tr>
<tr>
<td>查找当前光标下的单词</td>
<td style="text-align:center"><code>*</code> [^hstar]</td>
</tr>
<tr>
<td>设置高亮查找</td>
<td style="text-align:center"><code>set hls</code></td>
</tr>
</tbody>
</table>
<h3 id="结识-范式"><a href="#结识-范式" class="headerlink" title="结识.范式"></a>结识<code>.</code>范式</h3><blockquote>
<p><strong>用一键移动,另一键执行</strong></p>
</blockquote>
<h2 id="2-模式"><a href="#2-模式" class="headerlink" title="2. 模式"></a>2. 模式</h2><h3 id="2-1-普通"><a href="#2-1-普通" class="headerlink" title="2.1. 普通"></a>2.1. 普通</h3><h4 id="2-1-1-把撤消单元切成块，普通模式和插入模式之间切换的粒度"><a href="#2-1-1-把撤消单元切成块，普通模式和插入模式之间切换的粒度" class="headerlink" title="2.1.1. 把撤消单元切成块，普通模式和插入模式之间切换的粒度,"></a>2.1.1. 把撤消单元切成块，普通模式和插入模式之间切换的粒度,</h4><h4 id="2-1-2-构造可重复的修改"><a href="#2-1-2-构造可重复的修改" class="headerlink" title="2.1.2. 构造可重复的修改:"></a>2.1.2. 构造可重复的修改:</h4><table>
<thead>
<tr>
<th>操作</th>
<th>执行重复命令的操作</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dbx</code></td>
<td><code>x</code></td>
</tr>
<tr>
<td><code>bdw</code></td>
<td><code>dw</code></td>
</tr>
<tr>
<td><code>daw</code></td>
<td><code>daw</code>[^haw]</td>
</tr>
</tbody>
</table>
<h4 id="2-1-3-用次数做简单的算术运算"><a href="#2-1-3-用次数做简单的算术运算" class="headerlink" title="2.1.3. 用次数做简单的算术运算"></a>2.1.3. 用次数做简单的算术运算</h4><ul>
<li><strong>执行次数</strong>[^hcount] 大部分普通模式命令都可以带一个次数前缀</li>
<li><strong>八进制</strong> 以0开头的数字</li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;C-a&gt;</code></td>
<td>对当前光标下或光标后数字执行加1</td>
</tr>
<tr>
<td><code>&lt;C-x&gt;</code></td>
<td>对当前光标下或光标后数字执行减1</td>
</tr>
<tr>
<td><code>yyp</code></td>
<td>复制行</td>
</tr>
<tr>
<td><code>cw</code></td>
<td>修改单词</td>
</tr>
<tr>
<td><code>set nrformats=</code></td>
<td>所有数字当作十进制</td>
</tr>
</tbody>
</table>
<h4 id="2-1-4-能够重复，就别用次数"><a href="#2-1-4-能够重复，就别用次数" class="headerlink" title="2.1.4. 能够重复，就别用次数"></a>2.1.4. 能够重复，就别用次数</h4><blockquote>
<p><strong>执行，重复，回退，在必要时使用次数</strong></p>
</blockquote>
<h4 id="2-1-5-双剑合璧，天下无敌"><a href="#2-1-5-双剑合璧，天下无敌" class="headerlink" title="2.1.5. 双剑合璧，天下无敌"></a>2.1.5. 双剑合璧，天下无敌</h4><ul>
<li>操作符[^operator] + 动作命令 = 操作</li>
<li>自定义操作符[^mapoperator]，参考已有插件commentary.vim[^pcommentary]</li>
<li>自定义动作命令与已有操作符协同工作[^omapinfo]，参考已有插件textobj-entire[^ptextobjentire]</li>
<li>操作符待决模式Operator-Pending mode，<strong>只接受动作命令状态</strong>:</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>c</code></td>
<td>修改</td>
</tr>
<tr>
<td><code>d</code></td>
<td>删除</td>
</tr>
<tr>
<td><code>y</code></td>
<td>复制到寄存器</td>
</tr>
<tr>
<td><code>g~</code></td>
<td>反转大小写</td>
</tr>
<tr>
<td><code>gu</code></td>
<td>转换为小写</td>
</tr>
<tr>
<td><code>gU</code></td>
<td>转换为大写</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>增加缩进</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>减少缩进</td>
</tr>
<tr>
<td><code>=</code></td>
<td>自动缩进</td>
</tr>
<tr>
<td><code>!</code></td>
<td>使用外部程序过滤{motion}所跨越的行</td>
</tr>
</tbody>
</table>
<ul>
<li>多按键操作命令:</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dd</code>,<code>&gt;&gt;</code>,<code>gUgU</code>(<code>gUU</code>)</td>
<td>一个操作命令连续调用再次，相当于作用于当前行</td>
</tr>
<tr>
<td><code>g~</code>,<code>gu</code>,<code>gU</code>[^gU],<code>g</code>[^g],<code>z</code>[^z],<code>ctrl-w</code>[^ctrlw],<code>[</code> [^[]</td>
<td>两个以上按键调用，头一个按键只是第二个按键的前缀，不会激活操作符待决模式，可以把它们当成命名空间</td>
</tr>
<tr>
<td><code>cw</code>,<code>de</code>,<code>yb</code></td>
<td>操作符后带动作命令，激活操作符待决模式</td>
</tr>
</tbody>
</table>
<h3 id="2-2-插入"><a href="#2-2-插入" class="headerlink" title="2.2. 插入"></a>2.2. 插入</h3><h4 id="2-2-1-在插入模式中即时更正错误"><a href="#2-2-1-在插入模式中即时更正错误" class="headerlink" title="2.2.1. 在插入模式中即时更正错误"></a>2.2.1. 在插入模式中即时更正错误</h4><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;C-h&gt;</code></td>
<td>删除前一个字符（同退格键）</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;</code></td>
<td>删除前一个单词</td>
</tr>
<tr>
<td><code>&lt;C-u&gt;</code></td>
<td>删至行首</td>
</tr>
</tbody>
</table>
<h4 id="2-2-2-返回普通模式"><a href="#2-2-2-返回普通模式" class="headerlink" title="2.2.2. 返回普通模式"></a>2.2.2. 返回普通模式</h4><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;Esc&gt;</code></td>
<td>切换到普通模式</td>
</tr>
<tr>
<td><code>&lt;C-[&gt;</code></td>
<td>切换到普通模式</td>
</tr>
<tr>
<td><code>&lt;C-o&gt;</code>[^ictrlo]</td>
<td>切换到插入-普通模式</td>
</tr>
<tr>
<td><code>zz</code></td>
<td>重绘屏幕，并把当前行显示在窗口正中</td>
</tr>
</tbody>
</table>
<h4 id="2-2-3-不离开插入模式，粘贴寄存器中的文本"><a href="#2-2-3-不离开插入模式，粘贴寄存器中的文本" class="headerlink" title="2.2.3. 不离开插入模式，粘贴寄存器中的文本"></a>2.2.3. 不离开插入模式，粘贴寄存器中的文本</h4><ul>
<li><strong>插入模式下粘贴大量文本会有延时，因此相当于逐个输入</strong></li>
<li><strong>插入模式下小心操作</strong><code>K</code>[^K],<code>J</code>[^J]</li>
</ul>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;C-r&gt;{register}</code>[^ictrlr]</td>
<td>插入寄存器内的文本</td>
</tr>
<tr>
<td><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code>[^ictrlrp]</td>
<td>按原义插入寄存器内的文本</td>
</tr>
</tbody>
</table>
<h4 id="2-2-4-随时随地做运算"><a href="#2-2-4-随时随地做运算" class="headerlink" title="2.2.4. 随时随地做运算"></a>2.2.4. 随时随地做运算</h4><blockquote>
<p>表达式寄存器<c-r>=</c-r></p>
</blockquote>
<h4 id="2-2-5-用字符编码插入非常用字符"><a href="#2-2-5-用字符编码插入非常用字符" class="headerlink" title="2.2.5. 用字符编码插入非常用字符"></a>2.2.5. 用字符编码插入非常用字符</h4><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;C-v&gt;{nnn}</code></td>
<td>以十进制字符编码插入字符</td>
</tr>
<tr>
<td><code>&lt;C-v&gt;u{nnnn}</code></td>
<td>以十六进制字符编码插入字符</td>
</tr>
<tr>
<td><code>ga</code></td>
<td>查看字符编码</td>
</tr>
<tr>
<td><code>&lt;C-v&gt;{nodigit}</code></td>
<td>按原义插入非数字字符</td>
</tr>
<tr>
<td><code>&lt;C-k&gt;{c1}{c2}</code></td>
<td>插入以二合字母{c1}{c2}表示的字符</td>
</tr>
</tbody>
</table>
<h4 id="2-2-6-用二合字母-digraphsdefault-插入非常用字符"><a href="#2-2-6-用二合字母-digraphsdefault-插入非常用字符" class="headerlink" title="2.2.6. 用二合字母[^digraphsdefault]插入非常用字符"></a>2.2.6. 用二合字母[^digraphsdefault]插入非常用字符</h4><blockquote>
<p><code>:digraphs</code>[^digraphtable] 查看可用的二合字母表</p>
</blockquote>
<h4 id="2-2-7-用替换模式替换已有文本"><a href="#2-2-7-用替换模式替换已有文本" class="headerlink" title="2.2.7. 用替换模式替换已有文本"></a>2.2.7. 用替换模式替换已有文本</h4><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>R</code></td>
<td>由普通模式进入替换模式，<esc>返回普通模式</esc></td>
</tr>
<tr>
<td><code>gR</code></td>
<td>虚拟替换模式，按屏幕实际显示的宽度来替换字符</td>
</tr>
<tr>
<td><code>r{char}</code>[^r]</td>
<td>单次替换</td>
</tr>
<tr>
<td><code>gr{char}</code></td>
<td>单次虚拟替换</td>
</tr>
</tbody>
</table>
<h3 id="2-3-可视"><a href="#2-3-可视" class="headerlink" title="2.3. 可视"></a>2.3. 可视</h3><h4 id="2-3-1-深入理解可视模式"><a href="#2-3-1-深入理解可视模式" class="headerlink" title="2.3.1. 深入理解可视模式"></a>2.3.1. 深入理解可视模式</h4><blockquote>
<p>选择模式[^selectmode]<br><code>&lt;C-g&gt;</code> —<em>VISUAL</em>—  —<em>SELECT</em>—</p>
</blockquote>
<h4 id="2-3-2-选择高亮选区"><a href="#2-3-2-选择高亮选区" class="headerlink" title="2.3.2. 选择高亮选区"></a>2.3.2. 选择高亮选区</h4><ul>
<li>面向字符的模式</li>
<li>面向行的模式</li>
<li>面向列块的模式</li>
</ul>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>v</code></td>
<td>激活面向字符的可视模式</td>
</tr>
<tr>
<td><code>V</code></td>
<td>激活面向行的可视模式</td>
</tr>
<tr>
<td><code>&lt;C-v&gt;</code></td>
<td>激活面向列块的可视模式</td>
</tr>
<tr>
<td><code>gv</code></td>
<td>重复上次的高亮选区</td>
</tr>
</tbody>
</table>
<blockquote>
<p>在可视模式间切换</p>
</blockquote>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;Esc&gt;</code> <code>&lt;C-[&gt;</code></td>
<td>回到普通模式</td>
</tr>
<tr>
<td><code>v</code> <code>V</code> <code>&lt;C-[&gt;</code></td>
<td>切换到普通模式</td>
</tr>
<tr>
<td><code>v</code></td>
<td>切换到面向字符的可视模式</td>
</tr>
<tr>
<td><code>V</code></td>
<td>切换到面向行的可视模式</td>
</tr>
<tr>
<td><code>&lt;C-v&gt;</code></td>
<td>切换到面向列块的可视模式</td>
</tr>
<tr>
<td><code>o</code></td>
<td>切换高亮选区的活动端</td>
</tr>
</tbody>
</table>
<h4 id="2-3-3-重复执行面向行的可视命令"><a href="#2-3-3-重复执行面向行的可视命令" class="headerlink" title="2.3.3. 重复执行面向行的可视命令"></a>2.3.3. 重复执行面向行的可视命令</h4><blockquote>
<p>缩进:</p>
<ul>
<li><code>shiftwidth</code></li>
<li><code>softtabstop</code></li>
<li><code>expandtab</code></li>
<li>Tabs and Spaces</li>
</ul>
<p>面向行的可视命令适合<code>.</code>重复操作</p>
</blockquote>
<h4 id="2-3-4-只要可能，最好用操作符命令，而不是可视命令"><a href="#2-3-4-只要可能，最好用操作符命令，而不是可视命令" class="headerlink" title="2.3.4. 只要可能，最好用操作符命令，而不是可视命令"></a>2.3.4. 只要可能，最好用操作符命令，而不是可视命令</h4><blockquote>
<p>可视模式操作，不适合重复[^vU]</p>
</blockquote>
<h4 id="2-3-5-用面向列块的可视模式编辑表格数据"><a href="#2-3-5-用面向列块的可视模式编辑表格数据" class="headerlink" title="2.3.5. 用面向列块的可视模式编辑表格数据"></a>2.3.5. 用面向列块的可视模式编辑表格数据</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="symbol">&lt;C-v&gt;</span><span class="number">3</span><span class="keyword">j</span></div><div class="line"><span class="keyword">x</span>...</div><div class="line"><span class="keyword">gv</span></div><div class="line">r|</div><div class="line">yyp</div><div class="line">Vr-</div></pre></td></tr></table></figure>
<h4 id="2-3-6-修改列文本"><a href="#2-3-6-修改列文本" class="headerlink" title="2.3.6. 修改列文本"></a>2.3.6. 修改列文本</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">&lt;C-v&gt;</span>jje</div><div class="line"><span class="keyword">c</span></div><div class="line">components</div><div class="line"><span class="symbol">&lt;Esc&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-3-7-在长短不一的高亮块后添加文本"><a href="#2-3-7-在长短不一的高亮块后添加文本" class="headerlink" title="2.3.7. 在长短不一的高亮块后添加文本"></a>2.3.7. 在长短不一的高亮块后添加文本</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;C-v&gt;jj$</div><div class="line">A;</div><div class="line">&lt;Esc&gt;</div></pre></td></tr></table></figure>
<h3 id="2-4-命令行"><a href="#2-4-命令行" class="headerlink" title="2.4 命令行"></a>2.4 命令行</h3><h4 id="2-4-1-结识vim的命令行模式"><a href="#2-4-1-结识vim的命令行模式" class="headerlink" title="2.4.1 结识vim的命令行模式"></a>2.4.1 结识vim的命令行模式</h4><ul>
<li>vim历史：<strong>ed</strong> —&gt; <strong>ex</strong> —&gt; <strong>vi</strong> —&gt; <strong>vim</strong></li>
<li>命令行模式类型<ol>
<li>:ex命令[^excmdindex]</li>
<li>/查找匹配</li>
<li><c-r>=表达式</c-r></li>
</ol>
</li>
<li>命令行模式快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;c-w&gt;</code></td>
<td>删除至上个单词</td>
</tr>
<tr>
<td><code>&lt;c-u&gt;</code></td>
<td>删除至开头</td>
</tr>
<tr>
<td><code>&lt;c-v&gt;</code> <code>&lt;c-k&gt;</code></td>
<td>插入键盘找不到的字符</td>
</tr>
<tr>
<td><code>&lt;c-r&gt;{register}</code></td>
<td>插入寄存器内容</td>
</tr>
</tbody>
</table>
<ul>
<li>常用命令行模式命令</li>
</ul>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:[range]delete [x]</code></td>
<td>删除指定范围内的行[到寄存器x中]</td>
</tr>
<tr>
<td><code>:[range]yank [x]</code></td>
<td>复制指定范围的行[到寄存器x中]</td>
</tr>
<tr>
<td><code>:[line]put [x]</code></td>
<td>在指定行后粘贴寄存器x中的内容</td>
</tr>
<tr>
<td><code>:[range]copy {address}</code></td>
<td>把指定范围内的行拷贝到{address}所指定的行之下</td>
</tr>
<tr>
<td><code>:[range]move {address}</code></td>
<td>把指定范围内的行移动到{address}所指定的行之下</td>
</tr>
<tr>
<td><code>:[range]join</code></td>
<td>连接指定范围内的行</td>
</tr>
<tr>
<td><code>:[range]normal {commands}</code></td>
<td>对指定范围内的每一行执行普通模式命令{commands}</td>
</tr>
<tr>
<td><code>:[range]substitute/{pattern}/{string}/[flags]</code></td>
<td>把指定范围内出现{pattern}的地方替换为{string}</td>
</tr>
<tr>
<td><code>:[range]global/{pattern}/[cmd]</code></td>
<td>对指定范围内匹配{pattern}的所有行，在其上执行Ex命令{cmd}</td>
</tr>
</tbody>
</table>
<h4 id="2-4-2-在一行或多个连续行上执行命令"><a href="#2-4-2-在一行或多个连续行上执行命令" class="headerlink" title="2.4.2 在一行或多个连续行上执行命令"></a>2.4.2 在一行或多个连续行上执行命令</h4><ul>
<li>可以用<strong>行号</strong>，<strong>位置标记</strong>或<strong>查找模式</strong>来指定范围开始结束位置，[range]</li>
<li><code>:print</code>打印命令</li>
<li>行号指定范围：<ul>
<li><code>:n</code></li>
<li><code>:n,m</code></li>
<li><code>:.</code> 当前行</li>
<li><code>:$</code> 最后一行</li>
<li><code>:%</code> 所有行</li>
</ul>
</li>
<li>高亮选区指定范围:<code>&#39;&lt;,&#39;&gt;</code></li>
<li>用模式指定范围:<code>/{pattern}/,/{pattern}/</code></li>
<li>用偏移对地址进行修正:<code>{address}+n</code></li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1</code></td>
<td>文件第一行</td>
</tr>
<tr>
<td><code>$</code></td>
<td>文件最后一行</td>
</tr>
<tr>
<td><code>0</code></td>
<td>虚拟行，位于文件第一行上方</td>
</tr>
<tr>
<td><code>.</code></td>
<td>光标所在行</td>
</tr>
<tr>
<td><code>&#39;m</code></td>
<td>包含位置标记m的行</td>
</tr>
<tr>
<td><code>&#39;&lt;</code></td>
<td>高亮选区的起始行</td>
</tr>
<tr>
<td><code>&#39;&gt;</code></td>
<td>高亮选区的结束行</td>
</tr>
<tr>
<td><code>%</code></td>
<td>整个文件（<code>:1,$</code>的简写形式）</td>
</tr>
</tbody>
</table>
<h4 id="2-4-3-使用-t和-m命令复制和移动行"><a href="#2-4-3-使用-t和-m命令复制和移动行" class="headerlink" title="2.4.3 使用:t和:m命令复制和移动行"></a>2.4.3 使用<code>:t</code>和<code>:m</code>命令复制和移动行</h4><ul>
<li><code>:[range]copy {address}</code>（<code>:[range]t {address}</code>）</li>
<li><code>:[range]move {address}</code></li>
<li><strong>Ex命令影响范围广且距离远</strong></li>
</ul>
<h4 id="2-4-4-在指定范围上执行普通模式命令"><a href="#2-4-4-在指定范围上执行普通模式命令" class="headerlink" title="2.4.4 在指定范围上执行普通模式命令"></a>2.4.4 在指定范围上执行普通模式命令</h4><ul>
<li><code>:[range]normal {commands}</code></li>
</ul>
<h4 id="2-4-5-重复上次的Ex命令"><a href="#2-4-5-重复上次的Ex命令" class="headerlink" title="2.4.5 重复上次的Ex命令"></a>2.4.5 重复上次的Ex命令</h4><ul>
<li><code>@:</code>[^@:]</li>
<li><code>:</code>[^hquote:]寄存器总是保存着最后执行的命令行命令</li>
<li><code>@@</code>调用上次执行的寄存器宏</li>
<li><code>&lt;C-o&gt;</code>回退</li>
<li><code>:bn[ext]</code>缓冲区正向移动</li>
<li><code>bp[revious]</code>缓冲区反向移动</li>
</ul>
<h4 id="2-4-6-自动补全Ex命令-commandcomplete"><a href="#2-4-6-自动补全Ex命令-commandcomplete" class="headerlink" title="2.4.6 自动补全Ex命令[^commandcomplete]"></a>2.4.6 自动补全Ex命令[^commandcomplete]</h4><ul>
<li><code>&lt;Tab&gt;</code>，<code>&lt;S-Tab&gt;</code>自动补全</li>
<li><code>&lt;C-d&gt;</code>[^cctrld]显示可用补全列表</li>
<li>自定义补全行为[^wildmode]</li>
<li><strong>bash shell</strong> <code>set wildmode=longest,list</code></li>
<li><strong>zsh</strong> <code>set wildmenu wildmode=full</code></li>
<li><strong>wildmenu</strong>启用时<code>&lt;Tab&gt;</code> <code>&lt;C-n&gt;</code> <code>&lt;Right&gt;</code>与<code>&lt;S-Tab&gt;</code> <code>&lt;C-p&gt;</code> <code>&lt;Left&gt;</code>遍历</li>
</ul>
<h4 id="2-4-7-把当前单词插入到命令行"><a href="#2-4-7-把当前单词插入到命令行" class="headerlink" title="2.4.7 把当前单词插入到命令行"></a>2.4.7 把当前单词插入到命令行</h4><ul>
<li><code>&lt;C-r&gt;&lt;C-w&gt;</code>复制光标下单词并插入命令行</li>
<li><code>*</code>命令等效于输入<code>/\&lt;&lt;C-r&gt;&lt;C-w&gt;\&gt;&lt;CR&gt;</code></li>
<li><code>&lt;C-r&gt;&lt;C-a&gt;</code>[^cctrlrctrlw]插入光标下的字符串到命令行</li>
</ul>
<h4 id="2-4-8-回溯历史命令"><a href="#2-4-8-回溯历史命令" class="headerlink" title="2.4.8 回溯历史命令"></a>2.4.8 回溯历史命令</h4><ul>
<li><code>:</code> —&gt; <code>&lt;Up&gt;</code> or <code>&lt;Down&gt;</code>遍历命令历史，可加字符过滤</li>
<li><code>/</code> —&gt; <code>&lt;Up&gt;</code> or <code>&lt;Down&gt;</code>遍历查找历史，可加字符过滤</li>
<li><code>history</code>选项，设置历史记录保存上限</li>
<li>历史记录退出重启后仍旧存在~！[^viminfo]</li>
<li>回溯时可以使用<code>&lt;C-p&gt;</code>或<code>&lt;C-n&gt;</code>遍历，只不过不会自动过滤</li>
<li>通过 <code>cnoremap &lt;C-p&gt; &lt;Up&gt; cnoremap &lt;-n&gt; &lt;Down&gt;</code>可以解决过滤的问题[^phistoryscrollers]</li>
<li>命令行窗口[^cmdwin]</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>动作</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>q/</code></td>
<td>打开查找命令历史的命令行窗口</td>
</tr>
<tr>
<td><code>q:</code></td>
<td>打开Ex命令历史的命令行窗口</td>
</tr>
<tr>
<td><code>&lt;C-f&gt;</code></td>
<td>从命令行模式切换到命令行窗口</td>
</tr>
<tr>
<td><code>:q</code></td>
<td>退出命令行窗口</td>
</tr>
<tr>
<td><code>&lt;CR&gt;</code></td>
<td>退出命令行窗口，并执行命令</td>
</tr>
</tbody>
</table>
<h4 id="2-4-9-运行Shell命令"><a href="#2-4-9-运行Shell命令" class="headerlink" title="2.4.9 运行Shell命令"></a>2.4.9 运行Shell命令</h4><ul>
<li><code>%</code>代表当前文件名[^cmdlinespecial]</li>
<li>文件名修饰符[^filenamemodifiers]</li>
<li><code>&lt;C-z&gt;</code>在shell的vim中转入后台</li>
<li><code>fg</code>恢复</li>
<li><code>jobs</code>显示挂起的作业文件（man bash 作业控制job control）</li>
</ul>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:shell</code>[^hshell]</td>
<td>启动一个shell(exit返回vim)</td>
</tr>
<tr>
<td><code>:!{cmd}</code>[^:!]</td>
<td>在shell中执行{cmd}</td>
</tr>
<tr>
<td><code>:read !{cmd}</code>[^read!]</td>
<td>在shell中执行{cmd},并把其标准输出插入到光标下方</td>
</tr>
<tr>
<td><code>:[range]write !{cmd}</code>[^writec]</td>
<td>在shell中执行{cmd},以[range]作为其标准输入</td>
</tr>
<tr>
<td><code>:write !sh</code>[^renamefiles]</td>
<td>在shell中执行缓冲区的每行内容</td>
</tr>
<tr>
<td><code>:[range]!{filter}</code>[^range!]</td>
<td>使用外部程序{filter}过滤指定的[range]</td>
</tr>
<tr>
<td><code>!{motion}</code>[^!]</td>
<td>切换到命令行，并设置{motion}范围</td>
</tr>
<tr>
<td><code>:2,$!sort -t &#39;,&#39; -k2</code></td>
<td>/</td>
</tr>
</tbody>
</table>
<h2 id="3-管理多个文件"><a href="#3-管理多个文件" class="headerlink" title="3. 管理多个文件"></a>3. 管理多个文件</h2><h3 id="3-1-用缓冲区列表管理打开的文件"><a href="#3-1-用缓冲区列表管理打开的文件" class="headerlink" title="3.1 用缓冲区列表管理打开的文件"></a>3.1 用缓冲区列表管理打开的文件</h3><h4 id="3-1-1-ls列出缓冲区列表-ls"><a href="#3-1-1-ls列出缓冲区列表-ls" class="headerlink" title="3.1.1 ls列出缓冲区列表[^ls]"></a>3.1.1 <code>ls</code>列出缓冲区列表[^ls]</h4><ul>
<li><code>%</code>当前窗口可见</li>
<li><code>#</code>轮换文件</li>
<li><code>&lt;C-^&gt;</code>轮换文件间快速切换</li>
</ul>
<h4 id="3-1-2-使用缓冲区列表："><a href="#3-1-2-使用缓冲区列表：" class="headerlink" title="3.1.2 使用缓冲区列表："></a>3.1.2 使用缓冲区列表：</h4><ul>
<li><code>:bprev</code></li>
<li><code>:bnext</code></li>
<li><code>:bfirst</code></li>
<li><code>:blast</code></li>
<li><code>:buffer N</code>[^:b]</li>
<li><code>:buffer {bufname}</code> 只需要提供足够标识的字符</li>
<li><code>:bufdo</code>[^:bufdo] 所有缓冲区执行Ex命令</li>
<li>映射缓冲区列表操作快捷键[^punimpaired]<ul>
<li><code>nnoremap &lt;silent&gt; [b :bprevious&lt;CR&gt;</code></li>
<li><code>nnoremap &lt;silent&gt; ]b :bnext&lt;CR&gt;</code></li>
<li><code>nnoremap &lt;silent&gt; [B :bfirst&lt;CR&gt;</code></li>
<li><code>nnoremap &lt;silent&gt; ]B :blast&lt;CR&gt;</code></li>
</ul>
</li>
</ul>
<h4 id="3-1-3-删除缓冲区"><a href="#3-1-3-删除缓冲区" class="headerlink" title="3.1.3 删除缓冲区"></a>3.1.3 删除缓冲区</h4><ul>
<li><code>:bdelete N1 N2 N3</code></li>
<li><code>:N,M bdelete</code></li>
</ul>
<h3 id="3-2-用参数列表将缓冲区分组"><a href="#3-2-用参数列表将缓冲区分组" class="headerlink" title="3.2 用参数列表将缓冲区分组"></a>3.2 用参数列表将缓冲区分组</h3><ul>
<li><code>:args</code>显示参数列表</li>
<li><code>:args {arglist}</code>[^argsf]接填充参数列表</li>
<li><code>:args *</code>用Glob(通配符)<code>*</code>[^hwildcard] <code>**</code>[^hstarstarwildcard]指定文件</li>
<li><code>:args `{shell commands}` </code>用反引号结构指定文件[^backtick-expansion]</li>
<li>使用参数列表<code>:next</code>，<code>:prev</code>，<code>:argdo</code></li>
</ul>
<h3 id="3-3-管理隐藏缓冲区"><a href="#3-3-管理隐藏缓冲区" class="headerlink" title="3.3 管理隐藏缓冲区"></a>3.3 管理隐藏缓冲区</h3><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:w[rite]</code></td>
<td>把缓冲区内容写入磁盘</td>
</tr>
<tr>
<td><code>:e[dit]!</code></td>
<td>把磁盘文件内容读入缓冲区</td>
</tr>
<tr>
<td><code>:qa[ll]!</code></td>
<td>关闭所有窗口，摒弃修改而无需警告</td>
</tr>
<tr>
<td><code>:bn[ext]!</code></td>
<td>隐藏当前缓冲区并切换到下一个</td>
</tr>
<tr>
<td><code>:bp[revious]!</code></td>
<td>隐藏当前缓冲区并切换到上一个</td>
</tr>
<tr>
<td><code>set hidden</code>[^hidden]</td>
<td>启用默认自动隐藏缓冲区</td>
</tr>
<tr>
<td><code>wn</code></td>
<td>逐个保存</td>
</tr>
</tbody>
</table>
<h3 id="3-4-将工作区切分成窗口"><a href="#3-4-将工作区切分成窗口" class="headerlink" title="3.4 将工作区切分成窗口"></a>3.4 将工作区切分成窗口</h3><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;C-w&gt;s</code></td>
<td>水平切分当前窗口，新窗口仍显示当前缓冲区</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;v</code></td>
<td>垂直切分当前窗口，新窗口仍显示当前缓冲区</td>
</tr>
<tr>
<td><code>sp[lit] {file}</code></td>
<td>水平切分当前窗口，并在新窗口中载入{file}</td>
</tr>
<tr>
<td><code>vsp[lit] {file}</code></td>
<td>垂直切分当前窗口，并在新窗口中载入{file}</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;w</code>[^windowmovecursor]</td>
<td>在窗口间循环切换</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;h</code></td>
<td>切换到左边的窗口[^mouse]</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;j</code></td>
<td>切换到下边的窗口</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;k</code></td>
<td>切换到上边的窗口</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;l</code></td>
<td>切换到右边的窗口</td>
</tr>
<tr>
<td><code>:clo[se]</code> <code>&lt;C-w&gt;c</code></td>
<td>关闭活动窗口</td>
</tr>
<tr>
<td><code>:on[ly]</code> <code>&lt;C-w&gt;o</code></td>
<td>只保留活动窗口，关闭其他所有窗口</td>
</tr>
<tr>
<td><code>:h window-resize</code></td>
<td>\</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;=</code></td>
<td>使所有窗口等宽、等高</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;_</code></td>
<td>最大化活动窗口的高度</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;｜</code></td>
<td>最大化活动窗口的宽度</td>
</tr>
<tr>
<td><code>[N]&lt;C-w&gt;_</code></td>
<td>把活动窗口的高度设为[N]行</td>
</tr>
<tr>
<td><code>[N]&lt;C-w&gt;｜</code></td>
<td>把活动窗口的宽度设为[N]列</td>
</tr>
<tr>
<td><code>:h window-moving</code></td>
<td>\</td>
</tr>
</tbody>
</table>
<h3 id="3-5-用标签页将窗口分组-tabpage"><a href="#3-5-用标签页将窗口分组-tabpage" class="headerlink" title="3.5 用标签页将窗口分组[^tabpage]"></a>3.5 用标签页将窗口分组[^tabpage]</h3><table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:lcd {path}</code></td>
<td>设置当前窗口的本地工作目录</td>
</tr>
<tr>
<td><code>:windo lcd {path}</code></td>
<td>所有窗口设置本地工作目录</td>
</tr>
<tr>
<td><code>:tabe[dit] {filename}</code></td>
<td>在新标签页中打开{filename}</td>
</tr>
<tr>
<td><code>&lt;C-w&gt;T</code></td>
<td>把当前窗口移到一个新标签页[^ctrlwT]</td>
</tr>
<tr>
<td><code>:tabc[lose]</code></td>
<td>关闭当前标签页及其中的所有窗口</td>
</tr>
<tr>
<td><code>tabo[nly]</code></td>
<td>只保留活动标签页，关闭所有其他标签页</td>
</tr>
<tr>
<td><code>:tabn[ext] {N}</code> <code>{N}gt</code></td>
<td>切换到下一标签页</td>
</tr>
<tr>
<td><code>:tabn[ext]</code> <code>gt</code></td>
<td>切换到下一标签页</td>
</tr>
<tr>
<td><code>:tabp[revious]</code> <code>gT</code></td>
<td>切换到下一标签页</td>
</tr>
<tr>
<td><code>:tabmove [N]</code></td>
<td>移动标签页，0移到开头，省略[N]移到结尾</td>
</tr>
</tbody>
</table>
<h2 id="4-打开和保存文件"><a href="#4-打开和保存文件" class="headerlink" title="4. 打开和保存文件"></a>4. 打开和保存文件</h2><h3 id="4-1-用edit命令打开文件"><a href="#4-1-用edit命令打开文件" class="headerlink" title="4.1 用edit命令打开文件"></a>4.1 用edit命令打开文件</h3><ul>
<li><code>:pwd</code>显示当前目录print working directory</li>
<li><strong>tab</strong>键展开</li>
<li><code>:edit %:h&lt;Tab&gt;</code>相对于活动目录打开文件<blockquote>
<p><code>cnoremap &lt;expr&gt; %% getcmdtype() == &#39;:&#39; ? expand(&#39;%:h&#39;).&#39;/&#39; : &#39;%%&#39;</code></p>
</blockquote>
</li>
</ul>
<h3 id="4-2-使用find打开文件"><a href="#4-2-使用find打开文件" class="headerlink" title="4.2 使用find打开文件"></a>4.2 使用find打开文件</h3><ul>
<li><code>:find</code>允许通过文件名打开文件</li>
<li><code>set path+=app/**</code>配置’path’路径[^hpath][^filesearching]</li>
<li>rails的智能路径管理[^prails]</li>
</ul>
<h3 id="4-3-使用netrw管理文件系统"><a href="#4-3-使用netrw管理文件系统" class="headerlink" title="4.3 使用netrw管理文件系统"></a>4.3 使用netrw管理文件系统</h3><ul>
<li>准备工作：<code>set nocompatible  filetype plugin on</code></li>
<li><code>-</code>返回上级目录</li>
<li><p>打开文件管理目录</p>
<ul>
<li><code>:edit {path}</code>，<code>:edit .</code>，<code>:edit %:h</code>，<code>:e</code></li>
<li><code>:Explore</code>[^explore] <code>:E</code></li>
<li><code>:Sexplore</code>，<code>:Vexplore</code></li>
</ul>
</li>
<li><p>与分割窗口协同工作<code>&lt;C-^&gt;</code></p>
</li>
<li>使用netrw完成更多功能<ul>
<li>创建新文件[^netrw%]</li>
<li>创建新目录[^netrwd]</li>
<li>重命名已有的文件及目录[^netrwrename]</li>
<li>删除[^netrwdel]</li>
<li>通过网络读写文件scp,ftp,curl,wget[^netrwref]</li>
</ul>
</li>
</ul>
<h3 id="4-4-把文件保存到不存在的目录中"><a href="#4-4-把文件保存到不存在的目录中" class="headerlink" title="4.4 把文件保存到不存在的目录中"></a>4.4 把文件保存到不存在的目录中</h3><ul>
<li><code>&lt;C-g&gt;</code>显示当前文件的文件名及状态[^ctrlG]（</li>
<li><code>:!mkdir -p %:h</code></li>
<li><code>:write</code></li>
</ul>
<h3 id="4-5-以超级用户权限保存文件"><a href="#4-5-以超级用户权限保存文件" class="headerlink" title="4.5 以超级用户权限保存文件"></a>4.5 以超级用户权限保存文件</h3><ul>
<li><code>ls -al /etc/|grep hosts</code>，<code>whoami</code></li>
<li><code>:w !sudo tee % &gt; /dev/null</code>[^writec][^:%]</li>
</ul>
<hr>
<h2 id="5-移动跳转-motion"><a href="#5-移动跳转-motion" class="headerlink" title="5. 移动跳转[^motion]"></a>5. 移动跳转[^motion]</h2><h3 id="5-1-用动作命令在文档中移动"><a href="#5-1-用动作命令在文档中移动" class="headerlink" title="5.1 用动作命令在文档中移动"></a>5.1 用动作命令在文档中移动</h3><h4 id="5-1-1-让手指保持在本位行上"><a href="#5-1-1-让手指保持在本位行上" class="headerlink" title="5.1.1 让手指保持在本位行上"></a>5.1.1 让手指保持在本位行上</h4><blockquote>
<p>hjkl;</p>
</blockquote>
<h4 id="5-1-2-区分实际行与屏幕行"><a href="#5-1-2-区分实际行与屏幕行" class="headerlink" title="5.1.2 区分实际行与屏幕行"></a>5.1.2 区分实际行与屏幕行</h4><ul>
<li><code>&#39;wrap&#39;</code>，<code>&#39;number&#39;</code></li>
<li><code>j</code>，<code>k</code>，<code>0</code>，<code>^</code>，<code>$</code>，<code>gj</code>，<code>gk</code>，<code>g0</code>，<code>g^</code>，<code>g$</code></li>
</ul>
<h4 id="5-1-3-基于单词移动-wordmotions"><a href="#5-1-3-基于单词移动-wordmotions" class="headerlink" title="5.1.3 基于单词移动[^wordmotions]"></a>5.1.3 基于单词移动[^wordmotions]</h4><ul>
<li><code>w</code>，<code>b</code>，<code>e</code>，<code>g</code>e面向单词移动，词首词尾，正向反向</li>
<li><code>W</code>,<code>B</code>,<code>E</code>,<code>gE</code>面向字串移动</li>
<li>理解单词(word)[^word]与字串(WORD)[^WORD]</li>
</ul>
<h4 id="5-1-4-对字符进行查找"><a href="#5-1-4-对字符进行查找" class="headerlink" title="5.1.4 对字符进行查找"></a>5.1.4 对字符进行查找</h4><ul>
<li><code>f</code>[^f] <code>;</code>[^;] <code>,</code>[^,]</li>
<li><code>noremap &lt;Leader&gt;n nzz</code></li>
<li><p><code>noremap &lt;Leader&gt;N Nzz</code></p>
<ul>
<li><code>&lt;Leader&gt;</code>默认<code>\</code>[^mapleader]</li>
<li><code>let mapleader=&quot;,&quot;</code> </li>
<li>normal \ ,</li>
</ul>
</li>
<li><p><code>f{motion}</code>，<code>F{motion}</code>，<code>t{motion}</code>，<code>T{motion}</code>，<code>;</code>，<code>,</code></p>
</li>
</ul>
<h4 id="5-1-5-通过查找进行移动"><a href="#5-1-5-通过查找进行移动" class="headerlink" title="5.1.5 通过查找进行移动"></a>5.1.5 通过查找进行移动</h4><ul>
<li><code>/{char}&lt;CR&gt;</code></li>
<li><code>n</code></li>
<li><code>N</code></li>
<li><code>&#39;hlsearch&#39;</code></li>
<li><code>&#39;incsearch&#39;</code></li>
<li>用查找动作操作文本[^exclusive]<ul>
<li><code>v/{char}&lt;CR&gt;hd</code></li>
<li><code>d/{char}&lt;CR&gt;</code></li>
</ul>
</li>
</ul>
<h4 id="5-1-6-用精确的文本对象选择选区-textobjects"><a href="#5-1-6-用精确的文本对象选择选区-textobjects" class="headerlink" title="5.1.6 用精确的文本对象选择选区[^textobjects]"></a>5.1.6 用精确的文本对象选择选区[^textobjects]</h4><table>
<thead>
<tr>
<th>文本对象</th>
<th>选择区域</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a)</code> <code>ab</code></td>
<td>一对圆括号(parentheses)</td>
</tr>
<tr>
<td><code>i)</code> <code>ib</code></td>
<td>圆括号内部</td>
</tr>
<tr>
<td><code>a}</code> <code>aB</code></td>
<td>一对花括号{braces}</td>
</tr>
<tr>
<td><code>i}</code> <code>iB</code></td>
<td>花括号内部</td>
</tr>
<tr>
<td><code>a]</code></td>
<td>一对方括号[brackets]</td>
</tr>
<tr>
<td><code>i]</code></td>
<td>方括号内部</td>
</tr>
<tr>
<td><code>a&gt;</code></td>
<td>一对尖括号<angle brackets=""></angle></td>
</tr>
<tr>
<td><code>i&gt;</code></td>
<td>尖括号内部</td>
</tr>
<tr>
<td><code>a&#39;</code></td>
<td>一对单引号’single quotes’</td>
</tr>
<tr>
<td><code>i&#39;</code></td>
<td>单引号内部</td>
</tr>
<tr>
<td><code>a&quot;</code></td>
<td>一对双引号”double quotes”</td>
</tr>
<tr>
<td><code>i&quot;</code></td>
<td>双引号内部</td>
</tr>
<tr>
<td><code>a` </code></td>
<td>一对反引号`backticks`</td>
</tr>
<tr>
<td><code>i` </code></td>
<td>反引号内部</td>
</tr>
<tr>
<td><code>at</code></td>
<td>一对XML标签tags</td>
</tr>
<tr>
<td><code>it</code></td>
<td>标签内部</td>
</tr>
</tbody>
</table>
<h4 id="5-1-7-删除周边，修改内部"><a href="#5-1-7-删除周边，修改内部" class="headerlink" title="5.1.7 删除周边，修改内部"></a>5.1.7 删除周边，修改内部</h4><ul>
<li>分隔符文本对象，块对象</li>
<li>范围文本对象，非块对象</li>
<li>d配a,c配i</li>
</ul>
<table>
<thead>
<tr>
<th>文本对象</th>
<th>选择范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>iw</code></td>
<td>当前单词</td>
</tr>
<tr>
<td><code>aw</code></td>
<td>当前单词及一个空格</td>
</tr>
<tr>
<td><code>iW</code></td>
<td>当前字串</td>
</tr>
<tr>
<td><code>aW</code></td>
<td>当前字串及一个空格</td>
</tr>
<tr>
<td><code>is</code></td>
<td>当前句子</td>
</tr>
<tr>
<td><code>as</code></td>
<td>当前句子及一个空格</td>
</tr>
<tr>
<td><code>ip</code></td>
<td>当前段落</td>
</tr>
<tr>
<td><code>ap</code></td>
<td>当前段落及一个空行</td>
</tr>
</tbody>
</table>
<h4 id="5-1-8-设置位置标记-markmotion-，以便快速跳回"><a href="#5-1-8-设置位置标记-markmotion-，以便快速跳回" class="headerlink" title="5.1.8 设置位置标记[^markmotion]，以便快速跳回"></a>5.1.8 设置位置标记[^markmotion]，以便快速跳回</h4><ul>
<li><code>m{a-zA-Z}</code>[^m]小写缓冲区局部可见，大写全局可见</li>
<li><code>`{mark}</code>跳转到位置标记所在行，首个非空字符上</li>
<li><code>&#39;{mark}</code>跳转到位置标记所在位置</li>
<li>自动位置标记</li>
</ul>
<table>
<thead>
<tr>
<th>位置标记</th>
<th>跳转到</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&quot;</code></td>
<td>当前文件中上次跳转动作之前的位置</td>
</tr>
<tr>
<td><code>.</code></td>
<td>上次修改的地方</td>
</tr>
<tr>
<td><code>^</code></td>
<td>上次插入的地方</td>
</tr>
<tr>
<td><code>[</code></td>
<td>上次修改或复制的起始位置</td>
</tr>
<tr>
<td><code>]</code></td>
<td>上次修改或复制的结束位置</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>上次高亮选区的起始位置</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>上次高亮选区的结束位置</td>
</tr>
</tbody>
</table>
<h4 id="5-1-9-在匹配括号间跳转"><a href="#5-1-9-在匹配括号间跳转" class="headerlink" title="5.1.9 在匹配括号间跳转"></a>5.1.9 在匹配括号间跳转</h4><ul>
<li><strong>matchit.vim</strong>插件，对tags的跳转[^matchitinstall]</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> nocompatible</div><div class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span></div><div class="line"><span class="keyword">runtime</span> macros/matchit.<span class="keyword">vim</span></div></pre></td></tr></table></figure>
<ul>
<li>%对一组开、闭括号间跳转[^%]</li>
<li>Surround.vim，给选中的文本加分隔符<code>S&quot;</code></li>
</ul>
<h3 id="5-2-在文件间跳转"><a href="#5-2-在文件间跳转" class="headerlink" title="5.2 在文件间跳转"></a>5.2 在文件间跳转</h3><h4 id="5-2-1-遍历跳转列表"><a href="#5-2-1-遍历跳转列表" class="headerlink" title="5.2.1 遍历跳转列表"></a>5.2.1 遍历跳转列表</h4><ul>
<li><code>:jumps</code>显示跳转列表</li>
<li><strong>大范围动作命令会被当成跳转，小范围的动作命令只算移动</strong></li>
<li>每个单独窗口拥有一份跳转列表</li>
<li><font color="red">注意</font><strong><code>&lt;C-i&gt;</code>和<code>&lt;Tab&gt;</code>被当成同一个东西</strong></li>
<li><code>&lt;C-o&gt;</code> <code>&lt;C-i&gt;</code></li>
</ul>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>{count}G</code></td>
<td>跳转到指定行号</td>
</tr>
<tr>
<td><code>/pattern&lt;CR&gt;/?pattern&lt;CR&gt;</code> <code>n</code> <code>N</code></td>
<td>跳转到下一个/上一个模式出现之处</td>
</tr>
<tr>
<td><code>%</code></td>
<td>跳转到匹配括号所在之处</td>
</tr>
<tr>
<td><code>(</code> <code>)</code></td>
<td>跳转到上一个/下一句的开头</td>
</tr>
<tr>
<td><code>{</code> <code>}</code></td>
<td>跳转到上一段/下一段的开头</td>
</tr>
<tr>
<td><code>H</code> <code>M</code> <code>L</code></td>
<td>跳到屏幕最上方/正中间/最下方</td>
</tr>
<tr>
<td><code>gf</code></td>
<td>跳转到光标下的文件名</td>
</tr>
<tr>
<td><code>&lt;C-]&gt;</code></td>
<td>跳转到光标下关键字的定义之处</td>
</tr>
<tr>
<td><code>`{mark}</code> <code>&#39;{mark}</code></td>
<td>跳转到一个位置标记</td>
</tr>
</tbody>
</table>
<h4 id="5-2-2-遍历改变列表"><a href="#5-2-2-遍历改变列表" class="headerlink" title="5.2.2 遍历改变列表"></a>5.2.2 遍历改变列表</h4><ul>
<li><code>:changes</code>[^changelist]显示编辑会话期间维护的改变列表</li>
<li><code>g;</code>和<code>g,</code>遍历改变列表，类似<code>u&lt;C-r&gt;</code></li>
<li><code>:h &#39;.</code> <code>:h &#39;^</code> </li>
<li><code>gi</code>[^gi]回到退出的地方继续编辑</li>
<li>每个缓冲区单独维护一张表</li>
</ul>
<h4 id="5-2-3-跳转到光标下的文件-gf"><a href="#5-2-3-跳转到光标下的文件-gf" class="headerlink" title="5.2.3 跳转到光标下的文件[^gf]"></a>5.2.3 跳转到光标下的文件[^gf]</h4><ul>
<li>指定文件扩展名<code>set suffixesadd+=.rb</code>[^suffixesadd]</li>
<li>指定要搜寻的目录[^path]<code>set path?</code>显示值</li>
<li>bundler.vim 使用工程的Gemfile自动生成”path”设置</li>
<li><code>vim -u NONE -N {file}</code>不加载任何插件启动vim<h4 id="5-2-4-用全局位置标记在文件间快速跳转"><a href="#5-2-4-用全局位置标记在文件间快速跳转" class="headerlink" title="5.2.4 用全局位置标记在文件间快速跳转"></a>5.2.4 用全局位置标记在文件间快速跳转</h4></li>
</ul>
<blockquote>
<p>在浏览代码前先设置一个全局标记<code>:h &#39;</code> <code>:h m</code> <code>:h &#39;viminfo&#39;</code></p>
</blockquote>
<hr>
<h2 id="6-寄存器"><a href="#6-寄存器" class="headerlink" title="6. 寄存器"></a>6. 寄存器</h2><h3 id="6-1-复制与粘贴"><a href="#6-1-复制与粘贴" class="headerlink" title="6.1 复制与粘贴"></a>6.1 复制与粘贴</h3><h4 id="6-1-1-用无名寄存器实现删除、复制与粘贴操作"><a href="#6-1-1-用无名寄存器实现删除、复制与粘贴操作" class="headerlink" title="6.1.1 用无名寄存器实现删除、复制与粘贴操作"></a>6.1.1 用无名寄存器实现删除、复制与粘贴操作</h4><ul>
<li><code>xp</code></li>
<li><code>ddp</code></li>
<li><code>yyp</code></li>
</ul>
<h4 id="6-1-2-深入理解Vim寄存器"><a href="#6-1-2-深入理解Vim寄存器" class="headerlink" title="6.1.2 深入理解Vim寄存器"></a>6.1.2 深入理解Vim寄存器</h4><ul>
<li>引用一个寄存器<code>&quot;{register}</code>，缺省使用无名寄存器<code>&quot;&quot;</code></li>
<li>vim术语对照剪切(cut)=delete,复制(copy)=yank,粘贴(paste)=put</li>
<li><p>无名寄存器（<code>&quot;&quot;</code>）[^quotequote]</p>
<blockquote>
<p><code>x</code>,<code>s</code>,<code>d{motion}</code>,<code>c{motion}</code>与<code>y{motion}</code>以及它们的大写命令都会覆盖无名寄存器</p>
</blockquote>
</li>
<li><p>复制专用寄存器（<code>&quot;0</code>）[^quote0]</p>
<blockquote>
<p><code>y{motion}</code>命令时才会使用</p>
</blockquote>
</li>
<li><p><code>:reg &quot;{register}</code>显示寄存器内容</p>
</li>
<li>有名寄存器（<code>&quot;a</code>-<code>&quot;z</code>）[^quotealpha]，小写重写，大写追加</li>
<li>黑洞寄存器（<code>&quot;_</code>）[^quote_]，有去无回</li>
<li>系统剪切板（<code>&quot;+</code>）[^quote+]</li>
<li>选择专用寄存器（<code>&quot;*</code>）[^quotestar]</li>
<li>表达式寄存器（<code>&quot;=</code>）[^quote=]，计算并返回值</li>
<li>其他寄存器，只读，(<code>&quot;.</code>)[^quote.]</li>
<li><code>&quot;%</code>，<code>&quot;#</code>，<code>&quot;.</code>，<code>&quot;:</code>，<code>&quot;/</code></li>
</ul>
<h4 id="6-1-3-用寄存器中的内容替换高亮选区的文本"><a href="#6-1-3-用寄存器中的内容替换高亮选区的文本" class="headerlink" title="6.1.3 用寄存器中的内容替换高亮选区的文本"></a>6.1.3 用寄存器中的内容替换高亮选区的文本</h4><blockquote>
<p><code>:h v_p</code></p>
</blockquote>
<h4 id="6-1-4-把寄存器的内容粘贴出来-p"><a href="#6-1-4-把寄存器的内容粘贴出来-p" class="headerlink" title="6.1.4 把寄存器的内容粘贴出来[^p]"></a>6.1.4 把寄存器的内容粘贴出来[^p]</h4><ul>
<li>面向行还是面向字符[^linewiseregister]</li>
<li><code>&lt;C-r&gt;{register}</code>总插入到光标之前</li>
<li><code>gp</code>，<code>gP</code>，粘贴后光标在文本之后，更适合操作</li>
</ul>
<h4 id="6-1-5-与系统剪贴板进行交互-paste"><a href="#6-1-5-与系统剪贴板进行交互-paste" class="headerlink" title="6.1.5 与系统剪贴板进行交互[^paste]"></a>6.1.5 与系统剪贴板进行交互[^paste]</h4><ul>
<li><code>:set pastetoggle=&lt;f5&gt;</code>使用f5切换”paste”选项</li>
<li>使用加号寄存器进行粘贴可以避免</li>
</ul>
<hr>
<h3 id="6-2-宏"><a href="#6-2-宏" class="headerlink" title="6.2 宏"></a>6.2 宏</h3><h4 id="6-2-1-宏的读取与执行"><a href="#6-2-1-宏的读取与执行" class="headerlink" title="6.2.1 宏的读取与执行"></a>6.2.1 宏的读取与执行</h4><ul>
<li><code>q{register}</code>,按<code>q</code>停止</li>
<li><code>@{register}</code>执行[^@],<code>@@</code>重复最近调用过的宏</li>
<li>串行，并行</li>
</ul>
<h4 id="6-2-2-规范光标位置、直达目标以及中止宏"><a href="#6-2-2-规范光标位置、直达目标以及中止宏" class="headerlink" title="6.2.2 规范光标位置、直达目标以及中止宏"></a>6.2.2 规范光标位置、直达目标以及中止宏</h4><ul>
<li>确保每条命令都可被重复执行</li>
<li>规范光标的位置，更容易正确执行</li>
<li>用可重复的动作命令直达目标</li>
<li>当动作命令失败时，宏将中止执行[^visualbell]</li>
</ul>
<h4 id="6-2-3-加次数回放宏"><a href="#6-2-3-加次数回放宏" class="headerlink" title="6.2.3 加次数回放宏"></a>6.2.3 加次数回放宏</h4><blockquote>
<p><code>n@{register}</code></p>
</blockquote>
<h4 id="6-2-4-在连续的文件行上重复修改"><a href="#6-2-4-在连续的文件行上重复修改" class="headerlink" title="6.2.4 在连续的文件行上重复修改"></a>6.2.4 在连续的文件行上重复修改</h4><ul>
<li>串行：<code>n@{register}</code></li>
<li>并行：<code>:’&lt;,’&gt;normal @{register}</code></li>
</ul>
<h4 id="6-2-5-给宏追加命令"><a href="#6-2-5-给宏追加命令" class="headerlink" title="6.2.5 给宏追加命令"></a>6.2.5 给宏追加命令</h4><blockquote>
<p>使用大写字母</p>
</blockquote>
<h4 id="6-2-6-在一组文件中执行宏"><a href="#6-2-6-在一组文件中执行宏" class="headerlink" title="6.2.6 在一组文件中执行宏"></a>6.2.6 在一组文件中执行宏</h4><ul>
<li>准备工作</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> nocompatible</div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div><div class="line"><span class="keyword">set</span> hidden</div><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"autocmd"</span>)</div><div class="line"><span class="keyword">autocmd</span> fileType <span class="keyword">ruby</span> <span class="keyword">setlocal</span> <span class="keyword">ts</span>=<span class="number">2</span> <span class="keyword">sts</span>=<span class="number">2</span> <span class="keyword">sw</span>=<span class="number">2</span> expandtab</div><div class="line"><span class="keyword">endif</span></div></pre></td></tr></table></figure>
<ul>
<li>启用”hidden”</li>
<li>建立目标文件列表<code>:args *.rb</code></li>
<li>录制宏<code>:first</code>，<code>:e!</code></li>
<li><code>:h :argdo</code> <code>:h :edit!</code></li>
<li><code>:argdo normal @a</code>并行执行宏</li>
<li><code>qA :next q 22@a</code>串行执行宏</li>
<li>保存所有文件改动<code>:h</code> <code>:wa</code> <code>:argdo write</code> <code>:h :wn</code></li>
</ul>
<h4 id="6-2-7-用迭代求值的方式给列表编号"><a href="#6-2-7-用迭代求值的方式给列表编号" class="headerlink" title="6.2.7 用迭代求值的方式给列表编号"></a>6.2.7 用迭代求值的方式给列表编号</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">let</span> i=<span class="number">1</span></div><div class="line"><span class="keyword">qa</span></div><div class="line">I<span class="symbol">&lt;C-r&gt;</span>=i<span class="symbol">&lt;CR&gt;</span>)<span class="symbol">&lt;Esc&gt;</span></div><div class="line">:<span class="keyword">let</span> i+= <span class="number">1</span></div><div class="line">q</div><div class="line">jVG</div><div class="line">:<span class="keyword">normal</span> @a</div></pre></td></tr></table></figure>
<h4 id="6-2-8-编辑宏的内容"><a href="#6-2-8-编辑宏的内容" class="headerlink" title="6.2.8 编辑宏的内容"></a>6.2.8 编辑宏的内容</h4><ul>
<li><code>:put a</code>（put 总会将内容粘贴到下一行)</li>
<li><code>&quot;ay$</code>（dd会留下^J）</li>
<li><code>let @a=substitute(@a, &#39;\~&#39;, &#39;vU&#39;, &#39;g&#39;)</code>（:h substitute()）（:h function-list）</li>
</ul>
<hr>
<h2 id="7-匹配"><a href="#7-匹配" class="headerlink" title="7. 匹配"></a>7. 匹配</h2><h3 id="7-1-按模式匹配及按原义匹配"><a href="#7-1-按模式匹配及按原义匹配" class="headerlink" title="7.1 按模式匹配及按原义匹配"></a>7.1 按模式匹配及按原义匹配</h3><h4 id="7-1-1-调整查找模式的大小写敏感性"><a href="#7-1-1-调整查找模式的大小写敏感性" class="headerlink" title="7.1.1 调整查找模式的大小写敏感性"></a>7.1.1 调整查找模式的大小写敏感性</h4><ul>
<li>全局设置大小写敏感性”<code>ignorecase</code>“（会影响关键字自动补全行为）</li>
<li><p>每次查找时设置大小写敏感（可以出现在元字符的任何位置）</p>
<ul>
<li><code>\c</code>忽略大小写</li>
<li><code>\C</code>强制区分大小写</li>
</ul>
</li>
<li><p>启用更智能的大小写敏感设置”<code>smartcase</code>“(:h /ignorecase)</p>
</li>
</ul>
<h4 id="7-1-2-按正则表达式查找时，使用-v模式开关"><a href="#7-1-2-按正则表达式查找时，使用-v模式开关" class="headerlink" title="7.1.2 按正则表达式查找时，使用\v模式开关"></a>7.1.2 按正则表达式查找时，使用<code>\v</code>模式开关</h4><ul>
<li><strong>magic</strong>模式下，方括号具有特殊含义，不用转义，圆括号开闭都要转义，花括号只需开括号转义</li>
<li><strong>very magic</strong>模式除_ ，大小写字母以及数字0到9之外的所有字符都具有特殊意义（:h \v）</li>
<li><code>:h /character-classes</code></li>
<li><code>:h /\\</code>任何还未具有特殊含义的字符都被保留以被将来扩展时使用</li>
<li><code>\v</code> <strong>very magic</strong> <code>\V</code>原义 <code>\m</code> magic(<code>.</code>，<code>*</code>,方括号具有特殊含义） <code>\M</code> nomadic（一些字符具有特殊含义，<code>^</code>与<code>$</code>）</li>
</ul>
<h4 id="7-1-3-按原义查找文本时，使用-V原义开关"><a href="#7-1-3-按原义查找文本时，使用-V原义开关" class="headerlink" title="7.1.3 按原义查找文本时，使用\V原义开关"></a>7.1.3 按原义查找文本时，使用<code>\V</code>原义开关</h4><blockquote>
<p><code>:h /\V</code></p>
</blockquote>
<h4 id="7-1-4-使用圆括号捕获子匹配"><a href="#7-1-4-使用圆括号捕获子匹配" class="headerlink" title="7.1.4 使用圆括号捕获子匹配"></a>7.1.4 使用圆括号捕获子匹配</h4><ul>
<li><code>\0</code>全匹配，<code>\1</code>-<code>\9</code>匹配捕获的文本</li>
<li><code>:h /\_</code> <code>:h 27.8</code></li>
</ul>
<h4 id="7-1-5-界定单词的边界"><a href="#7-1-5-界定单词的边界" class="headerlink" title="7.1.5 界定单词的边界"></a>7.1.5 界定单词的边界</h4><ul>
<li><code>&lt;</code>与<code>&gt;</code>符号表示单词定界符</li>
<li>使用圆括号但不捕获内容在括号前加<code>%</code></li>
<li><code>\W\ze\w</code>模拟元字符<code>&lt;</code>，<code>\w\ze\W</code>表示元字符<code>&gt;</code></li>
<li><code>&lt;</code>与<code>&gt;</code>只在very magic下不用转义<code>:h /\&lt;</code></li>
<li><code>*</code>与<code>#</code>查找光标下单词，有用到单词定界符</li>
<li><code>g*</code>与<code>g#</code>同上，但不使用单词定界符</li>
<li>零宽度元字符，本身不匹配字符，表示单词与围绕此单词的空白字符之间的边界</li>
</ul>
<h4 id="7-1-6-界定匹配的边界"><a href="#7-1-6-界定匹配的边界" class="headerlink" title="7.1.6 界定匹配的边界"></a>7.1.6 界定匹配的边界</h4><ul>
<li><code>\zs</code>匹配开始<code>:h /\zs</code></li>
<li><code>\ze</code>匹配结束</li>
</ul>
<h4 id="7-1-7-转义问题字符"><a href="#7-1-7-转义问题字符" class="headerlink" title="7.1.7 转义问题字符"></a>7.1.7 转义问题字符</h4><ul>
<li><code>\V</code>下正向查找需转义<code>/</code>与<code>\</code></li>
<li><code>\V</code>下反向查找需转义<code>?</code>与<code>\</code></li>
<li>用编程的方式转义字符<code>:h escape()</code> <code>:h getcmdtype()</code></li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/\V<span class="symbol">&lt;C-r&gt;</span>=</div><div class="line">=<span class="built_in">escape</span>(@u, <span class="built_in">getcmdtype</span>().’\’)</div></pre></td></tr></table></figure>
<ul>
<li><code>/vim/e&lt;CR&gt;</code></li>
<li>GVim <code>:promptfind</code>（:h :promptfind）</li>
</ul>
<h3 id="7-2-查找"><a href="#7-2-查找" class="headerlink" title="7.2 查找"></a>7.2 查找</h3><h4 id="7-2-1-结识查找命令"><a href="#7-2-1-结识查找命令" class="headerlink" title="7.2.1 结识查找命令"></a>7.2.1 结识查找命令</h4><p>“<code>wrapscan</code>“  <code>:h &#39;wrapscan&#39;</code></p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>n</code></td>
<td>跳至下一处匹配，保持查找方向与偏移不变</td>
</tr>
<tr>
<td><code>N</code></td>
<td>跳至上一处匹配，保持查找方向与偏移不变</td>
</tr>
<tr>
<td><code>/&lt;CR&gt;</code></td>
<td>正向跳转至相同模式的下一处匹配</td>
</tr>
<tr>
<td><code>?&lt;CR&gt;</code></td>
<td>反向跳转至相同模式的上一处匹配</td>
</tr>
</tbody>
</table>
<h4 id="7-2-2-高亮查找匹配"><a href="#7-2-2-高亮查找匹配" class="headerlink" title="7.2.2 高亮查找匹配"></a>7.2.2 高亮查找匹配</h4><ul>
<li><code>:h &#39;hlsearch&#39;</code> 启用匹配高亮</li>
<li><code>:set nohlsearch</code>(<code>:se hls!</code>) 禁用匹配高亮</li>
<li><code>:nohlsearch</code> <code>:h noh</code> 临时关闭匹配高亮</li>
<li><code>nnoremap &lt;silent&gt; &lt;C-l&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;&lt;C-l&gt;(:h CTRL-L)</code></li>
</ul>
<h4 id="7-2-3-在执行查找前预览第一处匹配"><a href="#7-2-3-在执行查找前预览第一处匹配" class="headerlink" title="7.2.3 在执行查找前预览第一处匹配"></a>7.2.3 在执行查找前预览第一处匹配</h4><ul>
<li><code>:h &#39;incsearch&#39;</code> 增量匹配</li>
<li><code>&lt;C-r&gt;&lt;C-w&gt;</code>查找域自动补全</li>
</ul>
<h4 id="7-2-4-统计当前模式的匹配个数"><a href="#7-2-4-统计当前模式的匹配个数" class="headerlink" title="7.2.4 统计当前模式的匹配个数"></a>7.2.4 统计当前模式的匹配个数</h4><blockquote>
<p><code>:%s///gn</code></p>
</blockquote>
<h4 id="7-2-5-将光标偏移到查找匹配结尾"><a href="#7-2-5-将光标偏移到查找匹配结尾" class="headerlink" title="7.2.5 将光标偏移到查找匹配结尾"></a>7.2.5 将光标偏移到查找匹配结尾</h4><ul>
<li><code>:h search-offset</code></li>
<li><code>/{pattern}/e&lt;CR&gt;</code></li>
</ul>
<h4 id="7-2-6-对完整的查找匹配进行操作"><a href="#7-2-6-对完整的查找匹配进行操作" class="headerlink" title="7.2.6 对完整的查找匹配进行操作"></a>7.2.6 对完整的查找匹配进行操作</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/\vX(ht)?ml\C<span class="symbol">&lt;CR&gt;</span></div><div class="line">gU//<span class="keyword">e</span><span class="symbol">&lt;CR&gt;</span></div><div class="line">//<span class="symbol">&lt;CR&gt;</span></div><div class="line">.</div><div class="line">//<span class="symbol">&lt;CR&gt;</span>.</div></pre></td></tr></table></figure>
<ul>
<li><code>//&lt;CR&gt;</code>,<code>n</code>会重复<code>//e&lt;CR&gt;</code>所以不适合点范式</li>
<li>Natsuno textobj-laastpat插件<code>gUi/</code>解决了上面问题</li>
</ul>
<h4 id="7-2-7-利用查找历史，迭代完成复杂的模式"><a href="#7-2-7-利用查找历史，迭代完成复杂的模式" class="headerlink" title="7.2.7 利用查找历史，迭代完成复杂的模式"></a>7.2.7 利用查找历史，迭代完成复杂的模式</h4><ul>
<li><code>/&lt;UP&gt;</code>遍历查找历史</li>
<li><code>q/</code>在命令行窗口修改</li>
<li><code>c%(&lt;C-r&gt;&quot;)&lt;Esc&gt;</code></li>
<li><code>:%s//&quot;\1&quot;/g</code></li>
</ul>
<h4 id="7-2-8-查找当前高亮选区中的文本"><a href="#7-2-8-查找当前高亮选区中的文本" class="headerlink" title="7.2.8 查找当前高亮选区中的文本"></a>7.2.8 查找当前高亮选区中的文本</h4><ul>
<li><code>:h visual-search</code></li>
<li><code>:vmap X y/&lt;C-R&gt;&quot;&lt;CR&gt;</code>（某些特殊字符”<code>.</code>“或”<code>*</code>“通常会引起问题）</li>
<li>解决方案：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">xnoremap *:&lt;C-u&gt;call &lt;SID&gt;VSetSearch()&lt;CR&gt;/&lt;C-R&gt;=@/&lt;CR&gt;&lt;CR&gt;</div><div class="line">xnoremap #:&lt;C-u&gt;call &lt;SID&gt;VSetSearch()&lt;CR&gt;?&lt;C-R&gt;=@/&lt;CR&gt;&lt;CR&gt;</div><div class="line">function! s:VsetSearch()</div><div class="line">   let temp = @s</div><div class="line">   norm! gv"sy</div><div class="line">   let @/ = '\V' .substitute(escape(@s, '/\'), '\n', '\\n', 'g')</div><div class="line">   let @s = temp</div><div class="line">endfunction</div></pre></td></tr></table></figure>
<ul>
<li><strong>visual star search</strong>插件</li>
<li><code>xnoremap</code>关键字指明映射项只在可视模式下有效，不包括选择模式</li>
<li><code>:h mapmode-x</code></li>
</ul>
<h3 id="7-3-替换"><a href="#7-3-替换" class="headerlink" title="7.3 替换"></a>7.3 替换</h3><h4 id="7-3-1-结识substitute命令"><a href="#7-3-1-结识substitute命令" class="headerlink" title="7.3.1 结识substitute命令"></a>7.3.1 结识substitute命令</h4><ul>
<li><code>:[range]s[ubstitute]/{pattern}/{string}/[flags]</code></li>
<li><p>标志位<code>:h s_flags</code></p>
<ul>
<li><code>g</code>，全局执行</li>
<li><code>c</code>，确认或拒绝</li>
<li><code>n</code>，抑制正常替换行为，即不执行替换操作，只报告匹配次数</li>
<li><code>e</code>，屏蔽错误提示</li>
<li><code>&amp;</code>，重用上一次的标志位</li>
</ul>
</li>
<li><p>特殊字符<code>:h sub-replace-special</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\r</code></td>
<td>插入一个换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>插入一个制表符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>插入一个反斜杠</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>插入第n个子匹配n为1-9</td>
</tr>
<tr>
<td><code>\0</code></td>
<td>插入匹配模式的所有内容</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>插入匹配模式的所有内容</td>
</tr>
<tr>
<td><code>={vim script}</code></td>
<td>执行{vim script}表达式，并将返回的结果作为替换{string}</td>
</tr>
<tr>
<td><code>~</code></td>
<td>使用上一次调用时的{string}</td>
</tr>
</tbody>
</table>
<h4 id="7-3-2-在文件范围内查找并替换每一处匹配"><a href="#7-3-2-在文件范围内查找并替换每一处匹配" class="headerlink" title="7.3.2 在文件范围内查找并替换每一处匹配"></a>7.3.2 在文件范围内查找并替换每一处匹配</h4><ul>
<li>标志位<code>g</code></li>
</ul>
<h4 id="7-3-3-手动控制每一次替换操作"><a href="#7-3-3-手动控制每一次替换操作" class="headerlink" title="7.3.3 手动控制每一次替换操作"></a>7.3.3 手动控制每一次替换操作</h4><ul>
<li>标志位<code>c</code>   <code>:h :s_c</code></li>
</ul>
<table>
<thead>
<tr>
<th>答案</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>y</code></td>
<td>替换此处匹配</td>
</tr>
<tr>
<td><code>n</code></td>
<td>忽略此处匹配</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出替换过程</td>
</tr>
<tr>
<td><code>l</code></td>
<td>“last”–替换此处匹配后退出</td>
</tr>
<tr>
<td><code>a</code></td>
<td>“all”–替换此处与之后所有的匹配</td>
</tr>
<tr>
<td><code>&lt;C-e&gt;</code></td>
<td>向上滚动屏幕</td>
</tr>
<tr>
<td><code>&lt;C-y&gt;</code></td>
<td>向下滚动屏幕</td>
</tr>
</tbody>
</table>
<h4 id="7-3-4-重用上次的查找模式"><a href="#7-3-4-重用上次的查找模式" class="headerlink" title="7.3.4 重用上次的查找模式"></a>7.3.4 重用上次的查找模式</h4><ul>
<li>查找域留空</li>
<li><code>:h cmdline-history</code></li>
<li><code>&lt;C-r&gt;/</code>在命令历史中创建完整的记录</li>
</ul>
<h4 id="7-3-5-用寄存器的内容替换"><a href="#7-3-5-用寄存器的内容替换" class="headerlink" title="7.3.5 用寄存器的内容替换"></a>7.3.5 用寄存器的内容替换</h4><ul>
<li>传值：通过<code>&lt;C-r&gt;{register}</code>插入寄存器内容到替换域</li>
<li>引用：通过<code>\=@{register}</code>引用寄存器内容到替换域</li>
<li>比较：<code>:let @/=&#39;……&#39;</code>  <code>:let @a=&#39;……..&#39;</code>  <code>:%s//\=@a/g</code></li>
</ul>
<h4 id="7-3-6-重复上一次Substitute命令"><a href="#7-3-6-重复上一次Substitute命令" class="headerlink" title="7.3.6 重复上一次Substitute命令"></a>7.3.6 重复上一次Substitute命令</h4><ul>
<li><code>g&amp;</code>整个文件范围内执行上一次<code>substitute</code>命令 <code>:h g&amp;</code></li>
<li><code>:&amp;</code> 重复上一次<code>substitute</code>命令  <code>:h :&amp;</code></li>
<li><code>:&amp;&amp;</code> 后面的<code>&amp;</code>重复上一次的标志位</li>
<li><code>gv</code>  激活可视模式并选中上次高亮位置</li>
<li>修正<code>&amp;</code>命令</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">nnoremap</span> &amp; :&amp;&amp;<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">xnoremap</span> &amp; :&amp;&amp;<span class="symbol">&lt;CR&gt;</span></div></pre></td></tr></table></figure>
<h4 id="7-3-7-使用子匹配重排CSV文件的字段"><a href="#7-3-7-使用子匹配重排CSV文件的字段" class="headerlink" title="7.3.7 使用子匹配重排CSV文件的字段"></a>7.3.7 使用子匹配重排CSV文件的字段</h4><ul>
<li><code>\n</code></li>
</ul>
<h4 id="7-3-8-在替换过程中执行算术运算"><a href="#7-3-8-在替换过程中执行算术运算" class="headerlink" title="7.3.8 在替换过程中执行算术运算"></a>7.3.8 在替换过程中执行算术运算</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/\v\&lt;\/?h\zs\d</div><div class="line">:%s//\=<span class="built_in">submatch</span>(<span class="number">0</span>) - <span class="number">1</span>/g</div></pre></td></tr></table></figure>
<h4 id="7-3-9-交换两个或更多的单词"><a href="#7-3-9-交换两个或更多的单词" class="headerlink" title="7.3.9 交换两个或更多的单词"></a>7.3.9 交换两个或更多的单词</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/\v(<span class="symbol">&lt;man&gt;</span>|<span class="symbol">&lt;dog&gt;</span>)</div><div class="line">:%s//\=&#123;<span class="string">"dog"</span>:<span class="string">"man"</span>,<span class="string">"man"</span>:<span class="string">"dog"</span>&#125;[<span class="built_in">submatch</span>(<span class="number">1</span>)]/g</div></pre></td></tr></table></figure>
<ul>
<li><code>:h submatch()</code></li>
<li><strong>Abolish.vim</strong>:超级<code>substitute</code>命令<ul>
<li>由Tim pope开发的插件</li>
<li><code>:%S/{man,dog}/{dog,man}/g</code></li>
</ul>
</li>
</ul>
<h4 id="7-3-10-在多个文件中执行查找与替换"><a href="#7-3-10-在多个文件中执行查找与替换" class="headerlink" title="7.3.10 在多个文件中执行查找与替换"></a>7.3.10 在多个文件中执行查找与替换</h4><ul>
<li>散射法</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/Pragmatic\ze Vim</div><div class="line">:%s//Practical/g</div><div class="line">:<span class="keyword">args</span> **/*.txt</div><div class="line">:<span class="keyword">set</span> hidden</div><div class="line">:<span class="keyword">argdo</span> %s//Practical/ge</div></pre></td></tr></table></figure>
<ul>
<li>创建只包含目标的文件列表</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/Pragmatic\ze Vim</div><div class="line">:<span class="keyword">vimgrep</span> /<span class="symbol">&lt;C-r&gt;</span>// **/*.txt</div></pre></td></tr></table></figure>
<ul>
<li><code>:copen</code> 打开quickfix列表</li>
<li><strong>substitution/qargs.vim</strong></li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">command! -nargs=<span class="number">0</span> -bar Qargs <span class="keyword">execute</span> <span class="string">'args'</span> QuickfixFileName()</div><div class="line"><span class="function"><span class="keyword">function</span>! <span class="title">QuickfixFilenames</span><span class="params">()</span></span></div><div class="line">   <span class="keyword">let</span> buffer_numbers = &#123;&#125;</div><div class="line">   <span class="keyword">for</span> quickfix_item in <span class="built_in">getqflist</span>()</div><div class="line">       <span class="keyword">let</span> buffer_numbers[quickfix_item[<span class="string">'bufnr'</span>]] = <span class="built_in">bufname</span>(quickfix_item[<span class="string">'bufnr'</span>])</div><div class="line">   <span class="keyword">endfor</span></div><div class="line">   <span class="keyword">return</span> <span class="keyword">join</span>(<span class="keyword">map</span>(<span class="built_in">values</span>(buffer_numbers), <span class="string">'fnameescape(v:val)'</span>))</div><div class="line"><span class="keyword">endfunction</span></div></pre></td></tr></table></figure>
<ul>
<li><code>:Qargs</code> 把quickfix列表中的文件加至参数列表</li>
<li><code>:argdo %s//Practical/g</code></li>
<li><code>:argdo update</code> <code>:h update</code></li>
<li><code>:Qargs | argdo %s//Practical/g | update</code></li>
<li><code>:h :bar</code></li>
</ul>
<h3 id="7-4-global命令"><a href="#7-4-global命令" class="headerlink" title="7.4 global命令"></a>7.4 global命令</h3><h4 id="7-4-1-结识global命令"><a href="#7-4-1-结识global命令" class="headerlink" title="7.4.1 结识global命令"></a>7.4.1 结识global命令</h4><ul>
<li><code>:h :g</code></li>
<li><code>:[range]global[!] /{pattern}/ [cmd]</code></li>
<li><code>:global!  :vglobal</code></li>
</ul>
<h4 id="7-4-2-删除所有包含模式的文本行"><a href="#7-4-2-删除所有包含模式的文本行" class="headerlink" title="7.4.2 删除所有包含模式的文本行"></a>7.4.2 删除所有包含模式的文本行</h4><ul>
<li><p><code>:g/re/d</code></p>
<ul>
<li><code>/\v\&lt;\/?\w+&gt;</code></li>
<li><code>:g//d</code></li>
</ul>
</li>
<li><p><code>:v/re/d</code></p>
<ul>
<li><code>:v/href/d</code></li>
</ul>
</li>
</ul>
<h4 id="7-4-3-将ToDo项收集至寄存器"><a href="#7-4-3-将ToDo项收集至寄存器" class="headerlink" title="7.4.3 将ToDo项收集至寄存器"></a>7.4.3 将ToDo项收集至寄存器</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">qaq</div><div class="line">:g/TODO/<span class="keyword">yank</span> A</div><div class="line">:g/TODO/t$</div></pre></td></tr></table></figure>
<h4 id="7-4-4-将CSS文件中所有规则的属性按照字母排序"><a href="#7-4-4-将CSS文件中所有规则的属性按照字母排序" class="headerlink" title="7.4.4 将CSS文件中所有规则的属性按照字母排序"></a>7.4.4 将CSS文件中所有规则的属性按照字母排序</h4><ul>
<li><code>:h :sort</code></li>
<li><code>vi{ | :’&lt;,’&gt;sort</code></li>
<li><code>:g/{/ .+1,/}/-1 sort</code></li>
<li><code>:g/{pattern}/[range][cmd]</code></li>
<li><code>:g/{start}/ .,{finish} [cmd]</code></li>
<li><code>:g/{/ .+1,/}/-1 &gt;</code></li>
<li><code>:h &gt;</code> <code>:h</code> <code>:sil</code> <code>:slient</code></li>
<li><code>:g/{/sil .+1,/}/-1 &gt;</code></li>
</ul>
<hr>
<h2 id="8-工具"><a href="#8-工具" class="headerlink" title="8. 工具"></a>8. 工具</h2><h3 id="8-1-过ctags建立索引，并用其浏览源代码"><a href="#8-1-过ctags建立索引，并用其浏览源代码" class="headerlink" title="8.1 过ctags建立索引，并用其浏览源代码"></a>8.1 过ctags建立索引，并用其浏览源代码</h3><h4 id="8-1-1-结识ctags"><a href="#8-1-1-结识ctags" class="headerlink" title="8.1.1 结识ctags"></a>8.1.1 结识ctags</h4><h5 id="8-1-1-1-安装Exuberant-Ctags"><a href="#8-1-1-1-安装Exuberant-Ctags" class="headerlink" title="8.1.1.1 安装Exuberant Ctags"></a>8.1.1.1 安装Exuberant Ctags</h5><ul>
<li><code>sudo apt-get install exuberant-ctags</code></li>
<li>osx自带的是ctags的BSD</li>
<li><code>brew install ctags</code></li>
<li>修改$PATH使/usr/local/bin比/usr/bin优先</li>
<li>Doctor JS,jsctags</li>
</ul>
<h5 id="8-1-1-2-创建代码库索引"><a href="#8-1-1-2-创建代码库索引" class="headerlink" title="8.1.1.2 创建代码库索引"></a>8.1.1.2 创建代码库索引</h5><ul>
<li><code>ctags *.rb</code></li>
</ul>
<h5 id="8-1-1-3-详解标签文件"><a href="#8-1-1-3-详解标签文件" class="headerlink" title="8.1.1.3 详解标签文件"></a>8.1.1.3 详解标签文件</h5><ul>
<li>前几行由元数据组成</li>
<li>此后的每一行由关键字、文件名以及关键字在源代码中的位置构成</li>
<li>关键字按字母顺序排列<h5 id="8-1-1-4-用模式定位关键字，而不是行号"><a href="#8-1-1-4-用模式定位关键字，而不是行号" class="headerlink" title="8.1.1.4 用模式定位关键字，而不是行号"></a>8.1.1.4 用模式定位关键字，而不是行号</h5></li>
<li>关键字的地址可以是任意的Ex命令</li>
</ul>
<h5 id="8-1-1-5-用元数据标记关键字"><a href="#8-1-1-5-用元数据标记关键字" class="headerlink" title="8.1.1.5 用元数据标记关键字"></a>8.1.1.5 用元数据标记关键字</h5><ul>
<li>传统由制表符分隔3组字段构成：关键字、文件名以及定位符</li>
<li>扩展格式：末尾添加字段，为关键字提供元数据，c类，f函数</li>
</ul>
<h4 id="8-1-2-配置Vim使用ctags"><a href="#8-1-2-配置Vim使用ctags" class="headerlink" title="8.1.2 配置Vim使用ctags"></a>8.1.2 配置Vim使用ctags</h4><ul>
<li><code>:h &#39;tags&#39;</code>指定标签文件查找路径</li>
<li><code>:h tags-option</code></li>
<li><code>set tags?</code>查看选项内容</li>
</ul>
<h5 id="8-1-2-1-生成标签文件"><a href="#8-1-2-1-生成标签文件" class="headerlink" title="8.1.2.1 生成标签文件"></a>8.1.2.1 生成标签文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!ctags -R</div><div class="line">-exclude=.git // or -languages=-sql</div><div class="line">:nnoremap &lt;f5&gt; :!ctags -R&lt;CR&gt;  //映射快捷键</div></pre></td></tr></table></figure>
<h5 id="8-1-2-2-在每次保存文件时自动执行ctags"><a href="#8-1-2-2-在每次保存文件时自动执行ctags" class="headerlink" title="8.1.2.2 在每次保存文件时自动执行ctags"></a>8.1.2.2 在每次保存文件时自动执行ctags</h5><ul>
<li><code>autocommand</code>允许事件发生时调用一条命令</li>
<li><code>:autocmd BufWritePost * call system(&quot;ctags -R&quot;)</code></li>
</ul>
<h5 id="8-1-2-3-通过版本控制工具的回调机制自动执行ctags"><a href="#8-1-2-3-通过版本控制工具的回调机制自动执行ctags" class="headerlink" title="8.1.2.3 通过版本控制工具的回调机制自动执行ctags"></a>8.1.2.3 通过版本控制工具的回调机制自动执行ctags</h5><blockquote>
<p>Tim Pope的&lt;<effortless ctags="" with="" git="">&gt;讲解了如何为post-commit、post-merge、以及post-checkout等事件建立回调机制</effortless></p>
</blockquote>
<h4 id="8-1-3-使用Vim的标签中转命令，浏览关键字的定义"><a href="#8-1-3-使用Vim的标签中转命令，浏览关键字的定义" class="headerlink" title="8.1.3 使用Vim的标签中转命令，浏览关键字的定义"></a>8.1.3 使用Vim的标签中转命令，浏览关键字的定义</h4><ul>
<li><code>&lt;C-]&gt;</code>跳转到</li>
<li><code>&lt;C-t&gt;</code>跳回</li>
<li><code>g&lt;C-]&gt;</code>可选跳转</li>
<li><code>:h tag-stack</code>、<code>:h tag-priority</code></li>
<li><code>:tselect</code> <code>:tprev</code> <code>:tnext</code> <code>:tfirst</code> <code>:tlast</code></li>
<li><code>:tag{keyword}</code>等同于<code>&lt;C-]&gt;</code></li>
<li><code>:tjump{keyword}</code>等同于<code>g&lt;C-]&gt;</code></li>
<li><code>:h :tag</code> <code>:h :tjump</code></li>
<li><code>:tag /{pattern}</code> <code>:tjump /{pattern}</code></li>
<li><code>:pop</code>等同于<code>&lt;C-t&gt;</code></li>
</ul>
<h3 id="8-2-编译代码，并通过Quickfix列表浏览错误信息"><a href="#8-2-编译代码，并通过Quickfix列表浏览错误信息" class="headerlink" title="8.2 编译代码，并通过Quickfix列表浏览错误信息"></a>8.2 编译代码，并通过Quickfix列表浏览错误信息</h3><h4 id="8-2-1-不用离开Vim也能编译代码"><a href="#8-2-1-不用离开Vim也能编译代码" class="headerlink" title="8.2.1 不用离开Vim也能编译代码"></a>8.2.1 不用离开Vim也能编译代码</h4><ul>
<li>准备工作</li>
<li>在Shell中编译工程<code>make</code></li>
<li>在Vim中编译工程<code>:make</code><ul>
<li><code>:h quickfix</code>加快 编辑-编译-编辑 循环</li>
<li><code>:cnext</code>跳转到下一次quickfix</li>
<li><code>:make!</code>编译不自动跳转</li>
</ul>
</li>
</ul>
<h4 id="8-2-2-浏览Quickfix列表"><a href="#8-2-2-浏览Quickfix列表" class="headerlink" title="8.2.2 浏览Quickfix列表"></a>8.2.2 浏览Quickfix列表</h4><h5 id="8-2-2-1-位置列表以-开头，quickfix只有一份，位置列表有多份"><a href="#8-2-2-1-位置列表以-开头，quickfix只有一份，位置列表有多份" class="headerlink" title="8.2.2.1 位置列表以|开头，quickfix只有一份，位置列表有多份"></a>8.2.2.1 位置列表以|开头，quickfix只有一份，位置列表有多份</h5><ul>
<li><code>:lnext</code> <code>:lprev</code> <code>:ll N</code> <code>:lmake</code> <code>:lgrep</code> <code>:lvimgrep</code></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:cnext</code></td>
<td>跳转到下一项</td>
</tr>
<tr>
<td><code>:cprev</code></td>
<td>跳转到上一项</td>
</tr>
<tr>
<td><code>:cfirst</code></td>
<td>跳转到第一项</td>
</tr>
<tr>
<td><code>:clast</code></td>
<td>跳转到最后一项</td>
</tr>
<tr>
<td><code>:cnfile</code></td>
<td>跳转到下一个文件中的第一项</td>
</tr>
<tr>
<td><code>:cpfile</code></td>
<td>跳转到上一个文件中的最后一项</td>
</tr>
<tr>
<td><code>:cc N</code></td>
<td>跳转到第n项</td>
</tr>
<tr>
<td><code>:copen</code></td>
<td>打开quickfix窗口</td>
</tr>
<tr>
<td><code>:cclose</code></td>
<td>关闭quickfix窗口</td>
</tr>
</tbody>
</table>
<h4 id="8-2-3-回溯以前的Quickfix列表"><a href="#8-2-3-回溯以前的Quickfix列表" class="headerlink" title="8.2.3 回溯以前的Quickfix列表"></a>8.2.3 回溯以前的Quickfix列表</h4><ul>
<li><code>:colder</code> <code>:cnewer</code></li>
</ul>
<h4 id="8-2-4-定制外部编译器"><a href="#8-2-4-定制外部编译器" class="headerlink" title="8.2.4 定制外部编译器"></a>8.2.4 定制外部编译器</h4><ul>
<li><code>:h :compiler</code> <code>:h :make</code></li>
<li>配置<code>:make</code>命令，使调用JSLint来验证JavaScript文件<ul>
<li>nodelint依赖Node.js，可以通过NPM命令安装<code>npm install nodelint -g</code></li>
<li><code>:h &#39;makeprg&#39;</code>允许指定运行:make时所调用的程序</li>
<li><code>:setlocal makeprg=NODE_DISABLE_COLORS=1\nodelint\%</code><ul>
<li>相当于在命令行执行<code>export NODE_DISABLE_COLORS=1 nodelint 文件路径</code></li>
</ul>
</li>
<li>用Nodelint的输出结果填充Quickfix列表<ul>
<li><code>errorformat</code>选项允许我们指导Vim如何解析由<code>:make</code>产生的输出结果<code>:h &#39;errorformat&#39;</code></li>
<li>查看缺省选项<code>:setglobal errorformat?</code></li>
<li><code>%f</code>文件名， <code>%l</code>行号，<code>%m</code>错误信息，<code>:h errorformat</code></li>
<li><code>setlocal efm=%A%f\,\ line\ %l\,\ character\ %c:%m,%Z%.%#,%-G%.%#</code></li>
</ul>
</li>
<li>一条命令设置<code>makeprg</code>与<code>errorformat</code><ul>
<li><code>:h :compiler</code></li>
<li><code>:compiler nodelint</code></li>
<li><code>:args $VIMRUNTIME/compiler/*.vim</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8-3-通过grep-vimgrep以及其他工具对整个工程进行查找"><a href="#8-3-通过grep-vimgrep以及其他工具对整个工程进行查找" class="headerlink" title="8.3 通过grep,vimgrep以及其他工具对整个工程进行查找"></a>8.3 通过grep,vimgrep以及其他工具对整个工程进行查找</h3><h4 id="8-3-1-不必离开Vim也能调用grep"><a href="#8-3-1-不必离开Vim也能调用grep" class="headerlink" title="8.3.1 不必离开Vim也能调用grep"></a>8.3.1 不必离开Vim也能调用grep</h4><ul>
<li><code>:h :grep</code></li>
<li><code>-i</code>不区分大小写</li>
</ul>
<h4 id="8-3-2-定制grep程序"><a href="#8-3-2-定制grep程序" class="headerlink" title="8.3.2 定制grep程序"></a>8.3.2 定制grep程序</h4><ul>
<li><code>:h &#39;grepprg&#39;</code> <code>$*</code>代表占位符，代替参数</li>
<li><code>:h &#39;grepformat&#39;</code>可以逗号分隔多组格式</li>
<li><code>:h errorformat</code></li>
<li><code>grepprg=&quot;grep -n $* /dev/null&quot;</code></li>
<li><code>grepformat=&quot;%f:%l:%m,%f:%l%m,%f %l%m&quot;</code></li>
<li>通过<code>:grep</code>调用<code>ack</code><ul>
<li>安装<code>ack</code><ul>
<li>ubuntu<ul>
<li><code>sudo apt-get install ack-prep</code></li>
<li><code>sudo ln -s /usr/bin/ack-grep /usr/local/bin/ack</code></li>
</ul>
</li>
<li>OSX<ul>
<li><code>brew install ack</code></li>
</ul>
</li>
</ul>
</li>
<li><code>:set grepprg=ack\ -nogroup -column\ $*</code></li>
<li><code>:set grepformat=%f:%l:%c:%m</code></li>
</ul>
</li>
<li>其他grep插件<ul>
<li>ack.vim</li>
<li>fugitive.vim <code>:Ggrep git-grep</code></li>
</ul>
</li>
<li>使用Vim内部的Grep<ul>
<li><code>:vim[grep][!]/{pattern}/[g][j] {file} ...</code></li>
<li><code>g</code> 允许单行多匹配</li>
<li><code>j</code> 允许不自动跳转</li>
<li><code>:h :_##</code></li>
</ul>
</li>
</ul>
<h4 id="8-3-3-自动补全"><a href="#8-3-3-自动补全" class="headerlink" title="8.3.3 自动补全"></a>8.3.3 自动补全</h4><ul>
<li>结识Vim关键字自动补全<ul>
<li><code>:h &#39;ignorecase&#39;</code>会影响自动补全</li>
<li><code>:h &#39;inercase&#39;</code>避免<code>ignorecase</code>对自动补全的影响</li>
<li><code>&lt;C-p&gt;</code>和<code>&lt;C-n&gt;</code>调用普通关键字自动补全</li>
<li><code>&lt;C-x&gt;</code> <code>:h ins-completion</code></li>
</ul>
</li>
<li>与自动补全的弹出式菜单进行交互<ul>
<li><code>:h popupmenu-completion</code></li>
</ul>
</li>
<li>掌握关键字的来龙去脉<ul>
<li><code>:h compl-current &lt;C-x&gt;&lt;C-n&gt;</code>当前关键字补全</li>
<li><code>:h compl-keyword &lt;C-x&gt;&lt;C-i&gt;</code></li>
<li><code>:h &#39;include&#39;</code></li>
<li><code>:h compl-tag &lt;C-x&gt;&lt;C-]&gt;</code></li>
<li><code>:h &#39;complete&#39;</code></li>
</ul>
</li>
<li>使用字典中的单词进行自动补全<ul>
<li><code>:h compl-dictionary &lt;C-x&gt;&lt;C-k&gt;</code></li>
<li><code>:set spell</code></li>
<li><code>:h &#39;dictionary&#39;</code></li>
</ul>
</li>
<li>自动补全整行文本<ul>
<li><code>:h compl-whole-line &lt;C-x&gt;&lt;C-l&gt;</code></li>
</ul>
</li>
<li>自动补全文件名<ul>
<li><code>:h compl-filename &lt;C-x&gt;&lt;C-f&gt;</code></li>
<li><code>:pwd</code></li>
<li><code>:cd {path}</code></li>
<li><code>:cd -</code> <code>:h :cd-</code>切换回原来的工作目录</li>
</ul>
</li>
<li>根据上下文自动补全<ul>
<li><code>:h compl-ommi &lt;C-x&gt;&lt;C-o&gt;</code></li>
<li><code>:h compl-omni-filetypes</code></li>
<li><code>:h complete-function</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>补全类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><c-n></c-n></td>
<td>普通关键字</td>
</tr>
<tr>
<td><c-x><c-n></c-n></c-x></td>
<td>当前缓冲区关键字</td>
</tr>
<tr>
<td><c-x><c-i></c-i></c-x></td>
<td>包含文件关键字</td>
</tr>
<tr>
<td><c-x><c-]></c-]></c-x></td>
<td>标签文件关键字</td>
</tr>
<tr>
<td><c-x><c-k></c-k></c-x></td>
<td>字典查找</td>
</tr>
<tr>
<td><c-x><c-l></c-l></c-x></td>
<td>整行补全</td>
</tr>
<tr>
<td><c-x><c-f></c-f></c-x></td>
<td>文件名补全</td>
</tr>
<tr>
<td><c-x><c-o></c-o></c-x></td>
<td>全能补全</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><c-n></c-n></td>
<td>使用来自补全列表的下一个匹配项</td>
</tr>
<tr>
<td><c-p></c-p></td>
<td>使用来自补全列表的上一个匹配项</td>
</tr>
<tr>
<td><down></down></td>
<td>选择来自补全列表的下一个匹配项</td>
</tr>
<tr>
<td><up></up></td>
<td>选择来自补全列表的上一个匹配项</td>
</tr>
<tr>
<td><c-y></c-y></td>
<td>确认使用当前选中的匹配项</td>
</tr>
<tr>
<td><c-e></c-e></td>
<td>还原最早输入的文本</td>
</tr>
<tr>
<td><c-h>或<bs></bs></c-h></td>
<td>从当前匹配项中删除一个字符</td>
</tr>
<tr>
<td><c-l></c-l></td>
<td>从当前匹配项中增加一个字符</td>
</tr>
<tr>
<td>{char}</td>
<td>中止自动补全并插入字符</td>
</tr>
</tbody>
</table>
<h4 id="8-3-4-利用Vim的拼写检查器，查找并更正拼写错误"><a href="#8-3-4-利用Vim的拼写检查器，查找并更正拼写错误" class="headerlink" title="8.3.4 利用Vim的拼写检查器，查找并更正拼写错误"></a>8.3.4 利用Vim的拼写检查器，查找并更正拼写错误</h4><ul>
<li>对你工作进行拼写检查<ul>
<li><code>:set spell</code></li>
<li><code>[s</code>和<code>]s</code>遍历拼写错误项<code>:h ]s</code></li>
<li><code>z=</code>获取建议项<code>:h z=, 1z=</code></li>
<li><code>zg</code>将当前单词添加到拼写文件中</li>
<li><code>zw</code>把当前单词从拼写文件中删除</li>
<li><code>zug</code>撤消针对当前单词的<code>zg</code>或<code>zw</code>命令</li>
</ul>
</li>
<li>使用其他拼写字典<ul>
<li><code>:h &#39;spelllang&#39;</code></li>
<li><code>:h spell-remarks</code></li>
<li><code>:h spelllfile.vim</code></li>
</ul>
</li>
<li>将单词添加到拼写文件中<code>:h &#39;spellfile&#39;</code></li>
<li>在插入模式下更正拼写错误<code>&lt;C-x&gt;s</code> <code>:h compl-spelling</code></li>
</ul>
<h4 id="8-3-5-接下来干什么"><a href="#8-3-5-接下来干什么" class="headerlink" title="8.3.5 接下来干什么"></a>8.3.5 接下来干什么</h4><ul>
<li>继续练习</li>
<li>定制你自己的vim<ul>
<li>essential.vim</li>
<li>vimcasts.org</li>
<li>moolenaar.net/habits.html</li>
<li>github.com/nelstrom/dotfiles</li>
<li>iccf-holland.org</li>
</ul>
</li>
<li>欲善其事，先利其器</li>
</ul>
<h3 id="8-4-根据个人喜好定制vim"><a href="#8-4-根据个人喜好定制vim" class="headerlink" title="8.4 根据个人喜好定制vim"></a>8.4 根据个人喜好定制vim</h3><h4 id="8-4-1-动态改变vim的设置项"><a href="#8-4-1-动态改变vim的设置项" class="headerlink" title="8.4.1 动态改变vim的设置项"></a>8.4.1 动态改变vim的设置项</h4><ul>
<li><code>:h option-list</code></li>
<li>选项前面加no,关闭功能</li>
<li>选项之后加!,反转设置</li>
<li>选项之后加?,获取选项当前状态</li>
<li>选项之后加&amp;,重置为默认值</li>
<li>可以set多组选项</li>
<li>setlocal只对当前缓冲区设置</li>
</ul>
<h4 id="8-4-2-将配置信息存至vimrc文件"><a href="#8-4-2-将配置信息存至vimrc文件" class="headerlink" title="8.4.2 将配置信息存至vimrc文件"></a>8.4.2 将配置信息存至vimrc文件</h4><ul>
<li><code>:h :source</code></li>
<li><code>:source {file}</code>应用文件设置项</li>
<li><code>:h vimrc</code></li>
<li><code>:edit $MYVIMRC</code></li>
</ul>
<h4 id="8-4-3-为特定类型的文件应用个性化设置"><a href="#8-4-3-为特定类型的文件应用个性化设置" class="headerlink" title="8.4.3 为特定类型的文件应用个性化设置"></a>8.4.3 为特定类型的文件应用个性化设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if has(&quot;autocmd&quot;)</div><div class="line">  filetype on</div><div class="line">  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et</div><div class="line">  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet</div><div class="line">endif</div></pre></td></tr></table></figure>
<ul>
<li><code>:h :autocmd</code></li>
<li><code>:h ftplugin-name</code></li>
<li>~/.vim/after/ftplugin/javascript.vim</li>
<li><code>filetype plugin on</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-Vim解决问题的方式&quot;&gt;&lt;a href=&quot;#0-Vim解决问题的方式&quot; class=&quot;headerlink&quot; title=&quot;0. Vim解决问题的方式&quot;&gt;&lt;/a&gt;0. Vim解决问题的方式&lt;/h2&gt;&lt;h3 id=&quot;结识-hpoint-命令&quot;&gt;&lt;a href=&quot;#结识-hpoint-命令&quot; class=&quot;headerlink&quot; title=&quot;结识. [^hpoint] 命令&quot;&gt;&lt;/a&gt;结识&lt;code&gt;.&lt;/code&gt; [^hpoint] 命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt; 重复上次修改&lt;br&gt;&lt;strong&gt;注意&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入模式下,重复从进入到结束的所有操作(&lt;em&gt;移动光标会重置修改状态&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;命令事实上是一个微型的宏&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;操作&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除光标下字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;dd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;&amp;gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;增加当前行到文档末尾处的缩进层级&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://x8087.github.io/categories/note/"/>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vim" scheme="http://x8087.github.io/tags/vim/"/>
    
      <category term="技巧" scheme="http://x8087.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>图形思考力量大：解决不了的问题, 用画的就对了！</title>
    <link href="http://x8087.github.io/2015/08/02/%E5%9B%BE%E5%BD%A2%E6%80%9D%E8%80%83%E5%8A%9B%E9%87%8F%E5%A4%A7-%E8%A7%A3%E5%86%B3%E4%B8%8D%E4%BA%86%E7%9A%84%E9%97%AE%E9%A2%98-%E7%94%A8%E7%94%BB%E7%9A%84-%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    <id>http://x8087.github.io/2015/08/02/图形思考力量大-解决不了的问题-用画的-就对了/</id>
    <published>2015-08-02T14:44:14.000Z</published>
    <updated>2016-11-24T13:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>村井瑞枝/著 张凌虚/译</em></p>
<blockquote>
<p><strong>明明看了一堆书,为什么记不起来,也无法实际应用在工作上?</strong><br>如果你有以上的困扰,请务必好好研读本书，试着活用图形。<br>一旦学会灵活运用图形思考、表达，即使是左耳进右耳出的普通资讯，也能消化吸收，成为自己血肉的一部分。<br>本书以循序渐进的方式说明图形思考的优点，使用方法，读者可透过书中列举的实例，学会以图圈、三角形、箭头与线条等简单的图形，汇整思路，提高思考力和解决问题的能力！</p>
</blockquote>
<a id="more"></a>
<p><strong>图形思考的5大优点:</strong></p>
<ol>
<li><code>整理思绪</code></li>
<li><code>提高解决问题的能力</code></li>
<li><code>提升工作效率</code></li>
<li><code>让沟通更加顺畅</code></li>
<li><code>在任何工作场合都能派上用场</code></li>
</ol>
<p><strong>复杂变单纯,困难变简单</strong><br><strong>学会7种必胜图形，工作从此事半功倍！</strong></p>
<ol>
<li><code>将事物分解思考的</code><strong>因数分解图</strong></li>
<li><code>将事物分类思考的</code><strong>矩阵图</strong></li>
<li><code>整理思绪的</code><strong>表格图</strong></li>
<li><code>借由比较突显优势方的</code><strong>比较图</strong></li>
<li><code>让无形的时间显现的</code><strong>线表图</strong></li>
<li><code>简单表达想法的</code><strong>概念图</strong></li>
<li><code>抓住趋势的</code><strong>时程表图</strong></li>
</ol>
<hr>
<h2 id="1-是用文字思考的人？还是用数字思考的人？或是……"><a href="#1-是用文字思考的人？还是用数字思考的人？或是……" class="headerlink" title="1. 是用文字思考的人？还是用数字思考的人？或是……"></a>1. 是用文字思考的人？还是用数字思考的人？或是……</h2><blockquote>
<p>比较文字，数字和图形使用上的区别。表明图形相对文字和数字更容易理解。</p>
<ul>
<li>只要画成图形，就能看清事物的本质</li>
<li>没错没错，这就是我要表达的意思！</li>
</ul>
</blockquote>
<hr>
<h2 id="2-使用图形思考的5大优点"><a href="#2-使用图形思考的5大优点" class="headerlink" title="2. 使用图形思考的5大优点"></a>2. 使用图形思考的5大优点</h2><h3 id="2-1-整理思绪"><a href="#2-1-整理思绪" class="headerlink" title="2.1 整理思绪"></a>2.1 整理思绪</h3><ul>
<li>接收的资讯量越来越多</li>
<li>透过图形汇整情报<br><code>画成图形的话，就能知道问题何在</code></li>
</ul>
<h3 id="2-2-提高解决问题能力"><a href="#2-2-提高解决问题能力" class="headerlink" title="2.2 提高解决问题能力"></a>2.2 提高解决问题能力</h3><ul>
<li>资讯解读能力是必备能力</li>
<li>图形可以用来协助解决问题</li>
<li>例：阴晴不定的时刻表<br><code>光在脑中思考会觉得困难的问题也……</code></li>
<li>例：北方的小屋<br><code>画成图来看，答案就很简单了</code></li>
</ul>
<h3 id="2-3-提升工作效率"><a href="#2-3-提升工作效率" class="headerlink" title="2.3 提升工作效率"></a>2.3 提升工作效率</h3><ul>
<li>提高速度的重要性</li>
</ul>
<h3 id="2-4-让沟通更加顺畅"><a href="#2-4-让沟通更加顺畅" class="headerlink" title="2.4 让沟通更加顺畅"></a>2.4 让沟通更加顺畅</h3><ul>
<li>8成靠外表来决定</li>
<li>做得好的资料只要看一眼就能理解</li>
<li>图形是右脑负责的工作区域<br><code>做得好的资料只要看一眼就能理解</code></li>
<li>图形能培养共识</li>
<li>使用图形能留下记忆</li>
</ul>
<h3 id="2-5-所有工作场合都能派上用场"><a href="#2-5-所有工作场合都能派上用场" class="headerlink" title="2.5 所有工作场合都能派上用场"></a>2.5 所有工作场合都能派上用场</h3><ul>
<li>用在企划书或报告书上</li>
<li>用来做笔记<br><code>把思考的事情用图形记在笔记上</code></li>
<li>用在做简报的时候<br><code>使用图形的简报简单易懂</code></li>
<li>让会议进行得更有效率<br><code>透过图形来整理，讨论会更容易达成共识</code></li>
<li>可以取代会议记录</li>
</ul>
<hr>
<h2 id="3-没有绘画天赋也没关系"><a href="#3-没有绘画天赋也没关系" class="headerlink" title="3. 没有绘画天赋也没关系"></a>3. 没有绘画天赋也没关系</h2><ul>
<li><p><strong>所谓用在工作上的图形是?</strong></p>
<ul>
<li>只要把传达的信息表现在图形上就可以了！</li>
</ul>
</li>
<li><p><strong>图形的基本形状每个人都画得出来</strong><br><code>使用简单的图案就能画出图形</code><br>圆形，三角形，四方形，箭头，线条</p>
<p><code>恶性循环让感到棘手的意识根植心中</code><br><strong>没有画图习惯</strong>-&gt;<strong>不知道该画什么才好</strong>-&gt;<strong>感到棘手</strong>-&gt;<strong>不画了</strong></p>
<p>无论如何先拿起笔试试看<br><code>总之先动手，克服感到棘手的意识！</code><br><strong>总之先试着画看看再说</strong>-&gt;<strong>意外地能画出来</strong>-&gt;<strong>思路清晰</strong>-&gt;<strong>越画越多</strong></p>
</li>
<li><p><strong>手绘可以激发灵感</strong></p>
</li>
<li><strong>手绘容易修正</strong></li>
<li><strong>手绘可以把人拉进来一起讨论</strong></li>
<li><strong>创造一个随时能画图的环境</strong><ul>
<li>准备方格笔记纸<br><code>推荐使用可以自由画图的方格纸Life clipper 5mm方格笔记纸，life first class paper 10mm方格笔记纸</code></li>
<li>画得流畅的魔法笔<br><code>以粗线条笔为佳，推荐百乐的v corn</code></li>
<li>修正带 反覆修正图形时必备</li>
<li>附加影印功能的电子白板 用过就会上瘾，最适合思考型工作的工具！</li>
</ul>
</li>
</ul>
<hr>
<h2 id="4-学会图形的7种必胜类型"><a href="#4-学会图形的7种必胜类型" class="headerlink" title="4. 学会图形的7种必胜类型"></a>4. 学会图形的7种必胜类型</h2><p><strong> 不是“思考图形”，而是“为了思考而使用图形”</strong></p>
<h3 id="4-1-将事物分解思考的“因数分解类型”"><a href="#4-1-将事物分解思考的“因数分解类型”" class="headerlink" title="4.1 将事物分解思考的“因数分解类型”"></a>4.1 将事物分解思考的“因数分解类型”</h3><ul>
<li><strong>很大</strong> <strong>很复杂</strong>的问题，帮助找出<strong>切入点</strong></li>
<li>画法：<ul>
<li>左边画上一个方格，里面填上想达成的目的，往右增加方格数量。</li>
<li>从最初的方格往下一层的方格移动时，以“达成这个目标的要素是什么？”的方式进行思考，将想法扩展开来</li>
<li>区分可实行与不可实行，按顺位高低排序，淘汰不好够好的想法</li>
</ul>
</li>
</ul>
<h3 id="4-2-将事物分类思考的“矩阵类型”"><a href="#4-2-将事物分类思考的“矩阵类型”" class="headerlink" title="4.2 将事物分类思考的“矩阵类型”"></a>4.2 将事物分类思考的“矩阵类型”</h3><ul>
<li><strong>将事物分门别类</strong>  <strong>厘清彼此关联性或优先顺序的图形</strong></li>
<li>画法：<ul>
<li>合并四个正方形，呈现格子状的图形</li>
<li>首先画出4个正方形，横向与纵向各并列2个</li>
<li>重要的条件与基准放在横轴和纵轴上</li>
</ul>
</li>
</ul>
<h3 id="4-3-整理思绪的“表格类型”"><a href="#4-3-整理思绪的“表格类型”" class="headerlink" title="4.3 整理思绪的“表格类型”"></a>4.3 整理思绪的“表格类型”</h3><ul>
<li><strong>轻松简单地整理大量资讯</strong> <strong>商场上运用最广泛</strong> <strong>汇整资讯，达成共识</strong></li>
<li>画法：<ul>
<li>画出必要项目数量相等的横线</li>
<li>把需要思考的项目，有思考必要的项目写在横线上</li>
<li>接着在横线下方写入对应的项目内容</li>
</ul>
</li>
</ul>
<h3 id="4-4-借由比较突显优势方的“比较类型”"><a href="#4-4-借由比较突显优势方的“比较类型”" class="headerlink" title="4.4 借由比较突显优势方的“比较类型”"></a>4.4 借由比较突显优势方的“比较类型”</h3><ul>
<li><strong>与某种事物比较，验证哪一个较好，或是用来彰显不同事物之间的相异之处</strong></li>
<li>画法：<ul>
<li>算好要比较的物品数量</li>
<li>画上相等数目的横线</li>
<li>纵轴写上比较时使用的项目</li>
<li>项目之间插入箭头，可以把每个物品的不同之处标示得更清楚</li>
</ul>
</li>
</ul>
<h3 id="4-5-让无形的时间显现的“线表类型”"><a href="#4-5-让无形的时间显现的“线表类型”" class="headerlink" title="4.5 让无形的时间显现的“线表类型”"></a>4.5 让无形的时间显现的“线表类型”</h3><ul>
<li><strong>把看不见的时间整理成任何人都能了解的图形，在建立行事历之类的团队共通工作计划时使用</strong> <strong>团队确立目标，让事情顺畅进行</strong></li>
<li>画法：<ul>
<li>在横轴标示“年”、“月”、“周”、“日”等时间单位</li>
<li>依计划时间长短选择时间单位</li>
<li>纵轴写上该段期间应执行的项目</li>
<li>把每个项目所需时间以箭头标示</li>
</ul>
</li>
</ul>
<h3 id="4-6-简单表达想法的“概念类型”"><a href="#4-6-简单表达想法的“概念类型”" class="headerlink" title="4.6 简单表达想法的“概念类型”"></a>4.6 简单表达想法的“概念类型”</h3><ul>
<li><strong>以非常简单且很容易理解的方式，将想转达的事物特征表现出来</strong></li>
<li>画法：<ul>
<li>思考概念构成要素有几种</li>
<li>根据构成要素的数目，画出相等数量的圆</li>
<li>弄清楚要素之间的关系：重叠、相互关联、先后顺序</li>
<li>重叠，让圆形叠在一起</li>
<li>关联，用线条连在一起</li>
<li>先后顺序，用箭头连接</li>
</ul>
</li>
</ul>
<h3 id="4-7-抓住均势的“时程表类型”"><a href="#4-7-抓住均势的“时程表类型”" class="headerlink" title="4.7 抓住均势的“时程表类型”"></a>4.7 抓住均势的“时程表类型”</h3><ul>
<li><strong>分析每个阶段各有什么事时使用</strong> <strong>分析动势</strong> <strong>说明事物先后顺序</strong></li>
<li>画法：<ul>
<li>了解整个过程分成几个阶段</li>
<li>按照阶段数量，将数个本垒板形的箭头连接在一起</li>
<li>在箭头中写上该阶段的摘要</li>
<li>纵轴列出每个阶段执行的内容</li>
</ul>
</li>
</ul>
<hr>
<h2 id="5-试着思考在工作上实际运用图形的状况"><a href="#5-试着思考在工作上实际运用图形的状况" class="headerlink" title="5. 试着思考在工作上实际运用图形的状况"></a>5. 试着思考在工作上实际运用图形的状况</h2><ul>
<li>透过图形学会工作上必备的2项技能<br><code>想法的“扩展技巧”和“归纳技巧”</code></li>
<li>将业绩提升1.5倍的故事</li>
<li><p>使用分解思考扩展对策<br><code>使用分解思考</code><br><code>专案小组成员</code><br><code>提升料理教室营业额的方案</code></p>
</li>
<li><p>透过分类排列优先顺序<br><code>以提升业绩为目标的矩阵图</code></p>
</li>
<li>透过分类扩展构思<br><code>料理教室的目标客群</code></li>
<li>透过比较过滤构思<br><code>比较料理教室的目标客群</code></li>
<li>从构思中再延伸出构思<br><code>男性料理教室的构思</code></li>
<li>整理、归纳概念<br><code>将3个概念整理归纳出来</code></li>
<li>汇整时程表<br><code>用图形制作一目了然的时程表</code></li>
</ul>
<hr>
<h2 id="6-专业级的资料制作法"><a href="#6-专业级的资料制作法" class="headerlink" title="6. 专业级的资料制作法"></a>6. 专业级的资料制作法</h2><h3 id="6-1-分别使用适合内容的软体"><a href="#6-1-分别使用适合内容的软体" class="headerlink" title="6.1 分别使用适合内容的软体"></a>6.1 分别使用适合内容的软体</h3><ul>
<li>使用电脑制作资料<ul>
<li>依公司不同有所差异</li>
<li>power point 顾问公司，广告代理商</li>
<li>word 金融机构</li>
<li>Excel 汽车和机械制造商</li>
</ul>
</li>
<li>使用power point<ul>
<li>最适合作简报的软体</li>
<li>适合用投影机放映</li>
<li>色彩图形丰富</li>
<li>基本版面设置<ul>
<li>决定标题放在资料上方或下方</li>
<li>决定页面的架构，根据内容调整版面设置</li>
</ul>
</li>
</ul>
</li>
<li>使用word<ul>
<li>适合写文章</li>
<li>注意避免冗长的文字</li>
<li>基本版本设置<ul>
<li>基本上要归纳成“标题”、“目的”、“结论”、“详细说明”4个项目</li>
<li>要做成只看第1页就知道结论的格式</li>
<li>详细内容第2页之后再说明</li>
</ul>
</li>
</ul>
</li>
<li>使用Excel<ul>
<li>适合大量图表和数据的资料</li>
<li>版面容易混乱，須注意</li>
<li>基本版面设置<ul>
<li>决定标题放在资料上方或下方</li>
<li>决定页面的架构</li>
<li>在插入图表时，在另一个sheet输入数据，只把图表贴在资料上，看起来简单易懂</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-2-决定资料的架构"><a href="#6-2-决定资料的架构" class="headerlink" title="6.2 决定资料的架构"></a>6.2 决定资料的架构</h3><p>制作资料时一开始要做的应该是决定资料的架构。</p>
<ul>
<li>决定用多少页</li>
<li>朝怎样的方向来制作</li>
<li>避免作错重来并省略不必要的页数</li>
<li>容易理解</li>
<li>方法：<ul>
<li>条列大纲</li>
<li>在纸上把架构和要写的内容简单画成草稿</li>
<li>说明内容，确认要变更的地方</li>
</ul>
</li>
</ul>
<p><code>先画草稿，再到电脑上作业</code></p>
<h3 id="6-3-开始下标题"><a href="#6-3-开始下标题" class="headerlink" title="6.3 开始下标题"></a>6.3 开始下标题</h3><p><em>标题，把整个页面想表达的讯息浓缩成精简的文字</em><br><strong>下好标题的资料，马上能传达作者想要表达的事情</strong><br><strong>决定标题后，就等于决定了资料的内容</strong></p>
<ul>
<li><p>学会3个顺利下标题的方法</p>
<ol>
<li><p>陈述对方不知道的事</p>
<blockquote>
<p>因为资料是调查汇整的，所以是别人都不知道的事或者不确认的事，含有读者可能不知道的资讯且想知道的事。<br>形式：<br><strong>其实</strong>~ （其实）两成的消费者占了营业额的8成<br><strong>果然</strong>~ （果然）节省家庭支出的项目，是以娱乐和伙食费为主。<br><strong>事实上</strong>~ （事实上）不动产价格的下滑，导致业绩低迷。</p>
</blockquote>
</li>
<li>为了做出决定而陈述结论<blockquote>
<p>为某些非下决定不可的事做出结论而制作。<br>试着比较的结果<br>果然还是这个比较好<br>和B方案比较起来，应该采用A方案<br>形式：<br><strong>以结论来说</strong> （以结论来说），今后的一年期间，要把库存量压缩到一半。<br><strong>比较之后的结果</strong> （比较之后的结果）是，工厂应该建在印度和越南。</p>
</blockquote>
</li>
<li>陈述希望对方采取行动，或希望获得对方认同的事。<blockquote>
<p>为了说服对方或是获得对方认同而撰写的资料。<br>形式：<br><strong>~应该</strong> 在研发新产品这个部分，应该投入人力。<br><strong>~是必要的</strong> 以长期观点来看，研发产品是必要的。<br><strong>~开始</strong> 从涩谷区开始，很快就能看到成果。</p>
</blockquote>
</li>
</ol>
</li>
<li>注意标题是否变成<strong>无意义的标题</strong><blockquote>
<p>思考<strong>我想用这份资料告诉对方什么？</strong>是下标题的必要步骤。<br>标题位置，资料的最上方<br>以事实的报告为主的情况，可以把标题放最下方</p>
</blockquote>
</li>
</ul>
<h3 id="6-4-画出图形"><a href="#6-4-画出图形" class="headerlink" title="6.4 画出图形"></a>6.4 画出图形</h3><ol>
<li>记住经常使用的图形<br><code>五种基本形状，四方形，三角形，圆形，线条，箭头，本垒板形</code></li>
<li>使用对齐排列</li>
</ol>
<h3 id="6-5-整理外观"><a href="#6-5-整理外观" class="headerlink" title="6.5 整理外观"></a>6.5 整理外观</h3><blockquote>
<p>工作上使用的资料，注意细节，显得专业<br>字形统一，线条粗细一致</p>
</blockquote>
<ol>
<li><p>汇整相同的资讯</p>
<blockquote>
<p>把相同资讯重复出现的汇整标示，减少多余资讯，让内容简单明了，容易理解。<br>数字之类的符号的单位放进项目，看起来会更整齐。</p>
</blockquote>
</li>
<li><p>文字说明尽可能简短</p>
<blockquote>
<p>将较长的内容拆开来写<br>利用<strong>原因在于</strong>，<strong>如何才能</strong>，<strong>以什么</strong>之类的词汇作为拆句的基准点，连接在这些词后面的文句，则拆掉作为补充资讯。<br>不但列出重点，同时还能改善外观。<br><strong>Because</strong>，<strong>How</strong>，<strong>What</strong></p>
</blockquote>
</li>
<li><p>了解颜色的使用方式</p>
<blockquote>
<p>专业资料，透过颜色表示事物的重要程度<br>即使没有文字说明，颜色也能让阅读者直觉感受到<strong>哪里很重要</strong>，<strong>必须看哪里</strong><br>方法：</p>
<ol>
<li>选择一个颜色作为资料中使用的基础色<br>逻辑性简报、以数据为主的报告资料——&gt;蓝绿之类的冷色系<br>发售新产品或提供给顾客的营业用提案资料——&gt;红、橘、黄之类的暖色系<br>蓝、绿——沉着冷静客观<br>红——热情，振奋，精神，活泼<br>橘、黄——激发购买欲</li>
<li>选一个比基本色亮度更高的颜色作为辅助色。<br>蓝色——水蓝色<br>绿色——浅绿色</li>
<li>搭配白色</li>
<li>基本色用在重要的地方</li>
<li>辅助色用在除基本色之外需要上色的部分</li>
<li>表格可通过上色把项目突显出来。</li>
<li>即使转变成黑白模式后明暗也很清楚，适合黑白打印</li>
</ol>
</blockquote>
</li>
<li><p>选择适合内容的字体</p>
<blockquote>
<p>文章里常用细明体，新细明体和MS Gothic<br>平常工作用的资料，建议MS Gothic，不花俏且远处也能看清，适合制作简报<br>明体给人文学、学术性的印象，因此多半用在论文之类的文章，想要营造知性气氛时相当适用。<br>明体的横线比纵线粗，适合直书式的资料<br>英文商业简报基本上使用Arial<br>Times New Roman适合用在文学和学术性方面的资料</p>
</blockquote>
</li>
</ol>
<h3 id="6-6-最终检查的方法"><a href="#6-6-最终检查的方法" class="headerlink" title="6.6 最终检查的方法"></a>6.6 最终检查的方法</h3><ol>
<li>检查用字遣词<blockquote>
<p>简写的罗马字也要翻译成中文<br>使用具体数字</p>
</blockquote>
</li>
<li>附上单位</li>
<li>一定要标明出处和母体<blockquote>
<p>资料出处，何时的数据<br>母体是以[n=数字]表示</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;村井瑞枝/著 张凌虚/译&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;明明看了一堆书,为什么记不起来,也无法实际应用在工作上?&lt;/strong&gt;&lt;br&gt;如果你有以上的困扰,请务必好好研读本书，试着活用图形。&lt;br&gt;一旦学会灵活运用图形思考、表达，即使是左耳进右耳出的普通资讯，也能消化吸收，成为自己血肉的一部分。&lt;br&gt;本书以循序渐进的方式说明图形思考的优点，使用方法，读者可透过书中列举的实例，学会以图圈、三角形、箭头与线条等简单的图形，汇整思路，提高思考力和解决问题的能力！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://x8087.github.io/categories/note/"/>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="技巧" scheme="http://x8087.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="绘图" scheme="http://x8087.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="思考" scheme="http://x8087.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="图形" scheme="http://x8087.github.io/tags/%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>各类资源各类网站收藏</title>
    <link href="http://x8087.github.io/2015/07/31/%E5%90%84%E7%B1%BB%E8%B5%84%E6%BA%90%E5%90%84%E7%B1%BB%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    <id>http://x8087.github.io/2015/07/31/各类资源各类网站收藏/</id>
    <published>2015-07-31T02:51:38.000Z</published>
    <updated>2016-11-26T03:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些工具以及网站的整理收藏。<br><a id="more"></a></p>
<h6 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统:"></a>评论系统:</h6><p><a href="http://duoshuo.com" target="_blank" rel="external">多说</a><br><a href="https://disqus.com" target="_blank" rel="external">disqus</a></p>
<h6 id="图标"><a href="#图标" class="headerlink" title="图标:"></a>图标:</h6><p><a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="external">Font Awesome</a><br><a href="http://www.faviconer.com/" target="_blank" rel="external">Faviconer</a><br><a href="http://www.bitbug.net" target="_blank" rel="external">比特虫</a><br><a href="http://icomoon.io/" target="_blank" rel="external">icoMoon</a></p>
<p><a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod域名映射CDN</a><br><a href="https://www.godaddy.com" target="_blank" rel="external">Goddaddy域名提供商</a><br><a href="http://www.sousuoyinqingtijiao.com/" target="_blank" rel="external">屈站长</a></p>
<h6 id="绘图引擎"><a href="#绘图引擎" class="headerlink" title="绘图引擎:"></a>绘图引擎:</h6><p><a href="http://docs.mathjax.org/en/latest/index.html" target="_blank" rel="external">MathJax数学公式引擎javascrip</a><a href="https://mathjax-chinese-doc.readthedocs.org/en/latest/" target="_blank" rel="external">中文文档</a><br><a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">序列图javascript库</a><br><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">流程图javascript库</a></p>
<h6 id="404"><a href="#404" class="headerlink" title="404:"></a>404:</h6><p><a href="http://www.qq.com/404" target="_blank" rel="external">腾讯公益404</a><br><a href="http://yibo.iyiyun.com/Index/web404" target="_blank" rel="external">404公益_益云(公益互联网)社会创新中心</a><br><a href="http://404page.missingkids.org.tw/" target="_blank" rel="external">失蹤兒童少年資料管理中心404</a></p>
<h6 id="图床"><a href="#图床" class="headerlink" title="图床:"></a>图床:</h6><p><a href="http://www.qiniu.com/" target="_blank" rel="external">七牛图床</a><br><a href="http://www.farbox.com/" target="_blank" rel="external">FarBox</a><br><a href="http://www.dropbox.com/" target="_blank" rel="external">DropBox</a><br><a href="http://www.upyun.com/" target="_blank" rel="external">又拍云</a></p>
<h6 id="分享"><a href="#分享" class="headerlink" title="分享:"></a>分享:</h6><p><a href="http://share.baidu.com/" target="_blank" rel="external">百度分享</a><br><a href="http://www.bshare.cn/" target="_blank" rel="external">bshare</a><br><a href="http://www.jiathis.com/" target="_blank" rel="external">加网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些工具以及网站的整理收藏。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x8087.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="资源" scheme="http://x8087.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="收藏" scheme="http://x8087.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
      <category term="网站" scheme="http://x8087.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://x8087.github.io/2015/07/30/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://x8087.github.io/2015/07/30/git学习/</id>
    <published>2015-07-30T09:46:31.000Z</published>
    <updated>2016-11-26T02:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-取得项目的Git仓库"><a href="#1-取得项目的Git仓库" class="headerlink" title="1. 取得项目的Git仓库"></a>1. 取得项目的Git仓库</h3><ul>
<li>在工作目录中初始化新仓库<br><code>git init</code><br><code>git add</code></li>
<li>从现有仓库克隆<br><code>git clone [url]</code><br><code>git clone [url] [addr]</code></li>
</ul>
<hr>
<a id="more"></a>
<h3 id="2-记录每次更新到仓库"><a href="#2-记录每次更新到仓库" class="headerlink" title="2. 记录每次更新到仓库"></a>2. 记录每次更新到仓库</h3><ul>
<li>文件状态 <code>untracked 未跟踪</code>, <code>unmodified 未修改</code>, <code>modified 已修改</code>, <code>staged 已缓存</code></li>
</ul>
<h5 id="2-1-检查当前文件状态-git-status"><a href="#2-1-检查当前文件状态-git-status" class="headerlink" title="2.1 检查当前文件状态 git status"></a>2.1 检查当前文件状态 <code>git status</code></h5><h5 id="2-2-跟踪新文件git-add"><a href="#2-2-跟踪新文件git-add" class="headerlink" title="2.2 跟踪新文件git add"></a>2.2 跟踪新文件<code>git add</code></h5><h5 id="2-3-暂存已修改文件git-add"><a href="#2-3-暂存已修改文件git-add" class="headerlink" title="2.3 暂存已修改文件git add"></a>2.3 暂存已修改文件<code>git add</code></h5><h5 id="2-4-忽略某些文件-gitignore"><a href="#2-4-忽略某些文件-gitignore" class="headerlink" title="2.4 忽略某些文件.gitignore"></a>2.4 忽略某些文件<code>.gitignore</code></h5><ul>
<li>忽略空行及<code>#</code>开头的行</li>
<li>后跟<code>/</code>表示目录</li>
<li>模式前加<code>!</code>表示取反，忽略模式以外的文件或目录</li>
<li>以标准glob模式匹配<ul>
<li>指shell所使用简化了的正则表达式</li>
<li><code>*</code>匹配0个或多个任意字符</li>
<li><code>[abc]</code>可选匹配</li>
<li><code>?</code>匹配一个任意字符</li>
<li><code>[0-9]</code>匹配指定范围字符</li>
<li><code>**/</code>递归匹配子目录（1.8.2以上版本）</li>
</ul>
</li>
</ul>
<h5 id="2-5-查看已暂存和未暂存的文件"><a href="#2-5-查看已暂存和未暂存的文件" class="headerlink" title="2.5 查看已暂存和未暂存的文件"></a>2.5 查看已暂存和未暂存的文件</h5><ul>
<li><code>git diff</code>比较工作目录中当前文件与暂存文件之间的差异 </li>
<li><code>git diff --cached</code>或<code>git diff --staged</code>（1.6.1以上版本，效果一样）比较暂存文件与上次提交文件之间的差异</li>
</ul>
<h5 id="2-6-提交更新"><a href="#2-6-提交更新" class="headerlink" title="2.6 提交更新"></a>2.6 提交更新</h5><ul>
<li><code>git commit</code></li>
<li><code>git config --global core.editor</code>设定编辑器</li>
<li><code>-v</code>显示详细差异</li>
</ul>
<h5 id="2-7-跳过使用暂存区域"><a href="#2-7-跳过使用暂存区域" class="headerlink" title="2.7 跳过使用暂存区域"></a>2.7 跳过使用暂存区域</h5><ul>
<li><code>git commit -a</code></li>
</ul>
<h5 id="2-8-移除文件"><a href="#2-8-移除文件" class="headerlink" title="2.8 移除文件"></a>2.8 移除文件</h5><ul>
<li><code>git rm</code></li>
<li><code>git rm -f</code>强制删除包含在暂存区的文件</li>
<li><code>git rm --cached</code>删除版本控制，保留本地文件</li>
<li>后面可跟文件或者目录的名字，也可以使用glob模式</li>
<li>模式前加反斜杠<code>\</code>，使用git自身的文件模式扩展匹配方式，<code>*</code>会递归匹配</li>
</ul>
<h5 id="2-9-移动文件"><a href="#2-9-移动文件" class="headerlink" title="2.9 移动文件"></a>2.9 移动文件</h5><ul>
<li><code>git mv file_from file_to</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-取得项目的Git仓库&quot;&gt;&lt;a href=&quot;#1-取得项目的Git仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 取得项目的Git仓库&quot;&gt;&lt;/a&gt;1. 取得项目的Git仓库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在工作目录中初始化新仓库&lt;br&gt;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从现有仓库克隆&lt;br&gt;&lt;code&gt;git clone [url]&lt;/code&gt;&lt;br&gt;&lt;code&gt;git clone [url] [addr]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x8087.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="笔记" scheme="http://x8087.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="http://x8087.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="http://x8087.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
</feed>
